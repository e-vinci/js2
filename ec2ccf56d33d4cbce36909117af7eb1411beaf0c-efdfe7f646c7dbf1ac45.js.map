{"version":3,"file":"ec2ccf56d33d4cbce36909117af7eb1411beaf0c-efdfe7f646c7dbf1ac45.js","mappings":"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","sources":["webpack://myjscourse/./node_modules/inline-style-parser/index.js","webpack://myjscourse/./node_modules/decode-named-character-reference/index.dom.js","webpack://myjscourse/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://myjscourse/./node_modules/micromark-factory-space/index.js","webpack://myjscourse/./node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","webpack://myjscourse/./node_modules/micromark-util-character/index.js","webpack://myjscourse/./node_modules/micromark-util-chunked/index.js","webpack://myjscourse/./node_modules/micromark-util-classify-character/index.js","webpack://myjscourse/./node_modules/micromark-util-combine-extensions/index.js","webpack://myjscourse/./node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://myjscourse/./node_modules/micromark-util-decode-string/index.js","webpack://myjscourse/./node_modules/micromark-util-normalize-identifier/index.js","webpack://myjscourse/./node_modules/micromark-util-resolve-all/index.js","webpack://myjscourse/./node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","webpack://myjscourse/./node_modules/micromark-extension-gfm-footnote/lib/syntax.js","webpack://myjscourse/./node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","webpack://myjscourse/./node_modules/micromark-extension-gfm-table/lib/edit-map.js","webpack://myjscourse/./node_modules/micromark-extension-gfm-table/lib/infer.js","webpack://myjscourse/./node_modules/micromark-extension-gfm-table/lib/syntax.js","webpack://myjscourse/./node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","webpack://myjscourse/./node_modules/mdast-util-gfm-autolink-literal/node_modules/ccount/index.js","webpack://myjscourse/./node_modules/mdast-util-find-and-replace/node_modules/unist-util-is/lib/index.js","webpack://myjscourse/./node_modules/mdast-util-find-and-replace/node_modules/unist-util-visit-parents/lib/index.js","webpack://myjscourse/./node_modules/mdast-util-find-and-replace/lib/index.js","webpack://myjscourse/./node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","webpack://myjscourse/./node_modules/mdast-util-gfm-autolink-literal/lib/index.js","webpack://myjscourse/./node_modules/mdast-util-to-markdown/lib/util/association.js","webpack://myjscourse/./node_modules/mdast-util-to-markdown/lib/util/container-flow.js","webpack://myjscourse/./node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","webpack://myjscourse/./node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js","webpack://myjscourse/./node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","webpack://myjscourse/./node_modules/mdast-util-to-markdown/lib/util/safe.js","webpack://myjscourse/./node_modules/mdast-util-to-markdown/lib/util/track.js","webpack://myjscourse/./node_modules/mdast-util-gfm-footnote/lib/index.js","webpack://myjscourse/./node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","webpack://myjscourse/./node_modules/mdast-util-gfm-strikethrough/lib/index.js","webpack://myjscourse/./node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","webpack://myjscourse/./node_modules/markdown-table/index.js","webpack://myjscourse/./node_modules/mdast-util-gfm-table/lib/index.js","webpack://myjscourse/./node_modules/mdast-util-to-markdown/lib/handle/list-item.js","webpack://myjscourse/./node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","webpack://myjscourse/./node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","webpack://myjscourse/./node_modules/mdast-util-gfm-task-list-item/lib/index.js","webpack://myjscourse/./node_modules/remark-gfm/index.js","webpack://myjscourse/./node_modules/micromark-extension-gfm/index.js","webpack://myjscourse/./node_modules/mdast-util-gfm/lib/index.js"],"sourcesContent":["// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n}\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst protocolAutolink = {\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n\n/** @type {ConstructRecord} */\nconst text = {}\n\n// To do: next major: expose functions that yields extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * autolink literal syntax.\n *\n * @type {Extension}\n */\nexport const gfmAutolinkLiteral = {\n  text\n}\n\n/** @type {Code} */\nlet code = 48\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, protocolAutolink]\ntext[104] = [emailAutolink, protocolAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean | undefined} */\n  let dot\n  /** @type {boolean} */\n  let data\n  return start\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n    if (code === 64) {\n      effects.consume(code)\n      return emailDomain\n    }\n    return nok(code)\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(\n        emailDomainDotTrail,\n        emailDomainAfter,\n        emailDomainDot\n      )(code)\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true\n      effects.consume(code)\n      return emailDomain\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code)\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code)\n    dot = true\n    return emailDomain\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return wwwStart\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww')\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(\n      wwwPrefix,\n      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),\n      nok\n    )(code)\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this\n  let buffer = ''\n  let seen = false\n  return protocolStart\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if (\n      (code === 72 || code === 104) &&\n      previousProtocol.call(self, self.previous) &&\n      !previousUnbalanced(self.events)\n    ) {\n      effects.enter('literalAutolink')\n      effects.enter('literalAutolinkHttp')\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase()\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code)\n        return protocolSlashesInside\n      }\n    }\n    return nok(code)\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code)\n      if (seen) {\n        return afterProtocol\n      }\n      seen = true\n      return protocolSlashesInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null ||\n      asciiControl(code) ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code)\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0\n  return wwwPrefixInside\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++\n      effects.consume(code)\n      return wwwPrefixInside\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code)\n      return wwwPrefixAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment\n  /** @type {boolean | undefined} */\n  let seen\n  return domainInside\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code)\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return domainAfter(code)\n    }\n    seen = true\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment\n      underscoreInLastSegment = undefined\n    }\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code)\n    }\n    return ok(code)\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0\n  let sizeClose = 0\n  return pathInside\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++\n      effects.consume(code)\n      return pathInside\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code)\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 38 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 60 ||\n      code === 63 ||\n      code === 93 ||\n      code === 95 ||\n      code === 126\n    ) {\n      return effects.check(trail, ok, pathAtPunctuation)(code)\n    }\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    effects.consume(code)\n    return pathInside\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++\n    }\n    effects.consume(code)\n    return pathInside\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 63 ||\n      code === 95 ||\n      code === 126\n    ) {\n      effects.consume(code)\n      return trail\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code)\n      return trailCharRefStart\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code)\n      return trailBracketAfter\n    }\n    if (\n      // `<` is an end.\n      code === 60 ||\n      // So is whitespace.\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (\n      code === null ||\n      code === 40 ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return trail(code)\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code)\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code)\n      return trail\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return trailCharRefInside\n    }\n\n    // It’s not a trail.\n    return nok(code)\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code)\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 91 ||\n    code === 93 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code)\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code))\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n  while (index--) {\n    const token = events[index][1]\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  /** @type {Token} */\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde.\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = []\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {void}\n   */\n  add(index, remove, add) {\n    addImpl(this, index, remove, add)\n  }\n\n  // To do: not used here.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {void}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImpl(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {void}\n   */\n  consume(events) {\n    this.map.sort((a, b) => a[0] - b[0])\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length\n    /** @type {Array<Array<Event>>} */\n    const vecs = []\n    while (index > 0) {\n      index -= 1\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]))\n      // eslint-disable-next-line unicorn/no-array-push-push\n      vecs.push(this.map[index][2])\n\n      // Truncate rest.\n      events.length = this.map[index][0]\n    }\n    vecs.push([...events])\n    events.length = 0\n    let slice = vecs.pop()\n    while (slice) {\n      events.push(...slice)\n      slice = vecs.pop()\n    }\n\n    // Truncate everything.\n    this.map.length = 0\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {void}\n */\nfunction addImpl(editMap, at, remove, add) {\n  let index = 0\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove\n\n      // To do: before not used.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add)\n      // }\n\n      return\n    }\n    index += 1\n  }\n  editMap.map.push([at, remove, add])\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       console.log('to do: links?', add, rmCurr)\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef {'left' | 'center' | 'right' | 'none'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {Array<Align>}\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false\n  /** @type {Array<Align>} */\n  const align = []\n  while (index < events.length) {\n    const event = events[index]\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(\n            events[index + 1][1].type === 'tableDelimiterMarker'\n              ? 'left'\n              : 'none'\n          )\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right'\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true\n    }\n    index += 1\n  }\n  return align\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {EditMap} from './edit-map.js'\nimport {gfmTableAlign} from './infer.js'\n\n// To do: next major: expose functions.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * table syntax.\n *\n * @type {Extension}\n */\nexport const gfmTable = {\n  flow: {\n    null: {\n      tokenize: tokenizeTable,\n      resolveAll: resolveTable\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  let size = 0\n  let sizeB = 0\n  /** @type {boolean | undefined} */\n  let seen\n  return start\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1\n    while (index > -1) {\n      const type = self.events[index][1].type\n      if (\n        type === 'lineEnding' ||\n        // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n        type === 'linePrefix'\n      )\n        index--\n      else break\n    }\n    const tail = index > -1 ? self.events[index][1].type : null\n    const next =\n      tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    return next(code)\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead')\n    effects.enter('tableRow')\n    return headRowStart(code)\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code)\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1\n    return headRowBreak(code)\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true\n        effects.exit('tableRow')\n        effects.enter('lineEnding')\n        effects.consume(code)\n        effects.exit('lineEnding')\n        return headDelimiterStart\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, 'whitespace')(code)\n    }\n    sizeB += 1\n    if (seen) {\n      seen = false\n      // Header cell count.\n      size += 1\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      // Whether a delimiter was seen.\n      seen = true\n      return headRowBreak\n    }\n\n    // Anything else is cell data.\n    effects.enter('data')\n    return headRowData(code)\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return headRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? headRowEscape : headRowData\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return headRowData\n    }\n    return headRowData(code)\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    effects.enter('tableDelimiterRow')\n    // Track if we’ve seen a `:` or `|`.\n    seen = false\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        headDelimiterBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return headDelimiterBefore(code)\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code)\n    }\n    if (code === 124) {\n      seen = true\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return headDelimiterCellBefore\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, 'whitespace')(code)\n    }\n    return headDelimiterValueBefore(code)\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1\n      seen = true\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterLeftAlignmentAfter\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      return headDelimiterFiller(code)\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return headDelimiterFiller\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true\n      effects.exit('tableDelimiterFiller')\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterRightAlignmentAfter\n    }\n    effects.exit('tableDelimiterFiller')\n    return headDelimiterRightAlignmentAfter(code)\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, 'whitespace')(code)\n    }\n    return headDelimiterCellAfter(code)\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code)\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow')\n      effects.exit('tableHead')\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code)\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow')\n    return bodyRowBreak(code)\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return bodyRowBreak\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow')\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, 'whitespace')(code)\n    }\n\n    // Anything else is cell content.\n    effects.enter('data')\n    return bodyRowData(code)\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return bodyRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? bodyRowEscape : bodyRowData\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return bodyRowData\n    }\n    return bodyRowData(code)\n  }\n}\n\n/** @type {Resolver} */\n// eslint-disable-next-line complexity\nfunction resolveTable(events, context) {\n  let index = -1\n  let inFirstCellAwaitingPipe = true\n  /** @type {RowKind} */\n  let rowKind = 0\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0]\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0]\n  let afterHeadAwaitingFirstBodyRow = false\n  let lastTableEnd = 0\n  /** @type {Token | undefined} */\n  let currentTable\n  /** @type {Token | undefined} */\n  let currentBody\n  /** @type {Token | undefined} */\n  let currentCell\n  const map = new EditMap()\n  while (++index < events.length) {\n    const event = events[index]\n    const token = event[1]\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n          currentBody = undefined\n          lastTableEnd = 0\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        }\n        map.add(index, 0, [['enter', currentTable, context]])\n      } else if (\n        token.type === 'tableRow' ||\n        token.type === 'tableDelimiterRow'\n      ) {\n        inFirstCellAwaitingPipe = true\n        currentCell = undefined\n        lastCell = [0, 0, 0, 0]\n        cell = [0, index + 1, 0, 0]\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          }\n          map.add(index, 0, [['enter', currentBody, context]])\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1\n      }\n      // Cell data.\n      else if (\n        rowKind &&\n        (token.type === 'data' ||\n          token.type === 'tableDelimiterMarker' ||\n          token.type === 'tableDelimiterFiller')\n      ) {\n        inFirstCellAwaitingPipe = false\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n            lastCell = [0, 0, 0, 0]\n          }\n          cell[2] = index\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n          }\n          lastCell = cell\n          cell = [lastCell[1], index, 0, 0]\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true\n      lastTableEnd = index\n    } else if (\n      token.type === 'tableRow' ||\n      token.type === 'tableDelimiterRow'\n    ) {\n      lastTableEnd = index\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1]\n        currentCell = flushCell(\n          map,\n          context,\n          lastCell,\n          rowKind,\n          index,\n          currentCell\n        )\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell)\n      }\n      rowKind = 0\n    } else if (\n      rowKind &&\n      (token.type === 'data' ||\n        token.type === 'tableDelimiterMarker' ||\n        token.type === 'tableDelimiterFiller')\n    ) {\n      cell[3] = index\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n  }\n  map.consume(context.events)\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1\n  while (++index < context.events.length) {\n    const event = context.events[index]\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index)\n    }\n  }\n  return events\n}\n\n/// Generate a cell.\n/**\n *\n * @param {EditMap} map\n * @param {TokenizeContext} context\n * @param {Range} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName =\n    rowKind === 1\n      ? 'tableHeader'\n      : rowKind === 2\n      ? 'tableDelimiter'\n      : 'tableData'\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent'\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]))\n    map.add(range[0], 0, [['exit', previousCell, context]])\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1])\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  }\n  map.add(range[1], 0, [['enter', previousCell, context]])\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2])\n    const relatedEnd = getPoint(context.events, range[3])\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    }\n    map.add(range[2], 0, [['enter', valueToken, context]])\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]]\n      const end = context.events[range[3]]\n      start[1].end = Object.assign({}, end[1].end)\n      start[1].type = 'chunkText'\n      start[1].contentType = 'text'\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1\n        const b = range[3] - range[2] - 1\n        map.add(a, b, [])\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]])\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd))\n    map.add(rowEnd, 0, [['exit', previousCell, context]])\n    previousCell = undefined\n  }\n  return previousCell\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {EditMap} map\n * @param {TokenizeContext} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = []\n  const related = getPoint(context.events, index)\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related)\n    exits.push(['exit', tableBody, context])\n  }\n  table.end = Object.assign({}, related)\n  exits.push(['exit', table, context])\n  map.add(index + 1, 0, exits)\n}\n\n/**\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {readonly Point}\n */\nfunction getPoint(events, index) {\n  const event = events[index]\n  const side = event[0] === 'enter' ? 'start' : 'end'\n  return event[1][side]\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  markdownSpace\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\n\n// To do: next major: expose function to make extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions`, to\n * enable GFM task list items syntax.\n *\n * @type {Extension}\n */\nexport const gfmTaskListItem = {\n  text: {\n    [91]: tasklistCheck\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n    return nok(code)\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code)\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )(code)\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, 'whitespace')\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {Extract<Node, MdastParent>} Parent\n * @typedef {Exclude<Parent, Root>} ContentParent\n *\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[Root, ...Array<ContentParent>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | undefined | null}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {string | RegExp} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n *   Several find and replaces, in object form.\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n * @typedef {string | ReplaceFunction} Replace\n *   Thing to replace with.\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore.\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param tree\n *   Tree to change.\n * @param find\n *   Patterns to find.\n * @param replace\n *   Things to replace with (when `find` is `Find`) or configuration.\n * @param options\n *   Configuration (when `find` is not `Find`).\n * @returns\n *   Given, modified, tree.\n */\n// To do: next major: remove `find` & `replace` combo, remove schema.\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &\n   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)\n   * )}\n   **/\n  (\n    /**\n     * @template {Node} Tree\n     * @param {Tree} tree\n     * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find\n     * @param {Replace | Options | null | undefined} [replace]\n     * @param {Options | null | undefined} [options]\n     * @returns {Tree}\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options | null | undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      // To do next major: don’t return the given tree.\n      return tree\n\n      /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent | undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = parents[index]\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error: TS doesn’t understand but it’s perfect.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          return handler(node, parents)\n        }\n      }\n\n      /**\n       * Handle a text node which is not in an ignored parent.\n       *\n       * @param {Text} node\n       *   Text node.\n       * @param {Array<Parent>} parents\n       *   Parents.\n       * @returns {VisitorResult}\n       *   Result.\n       */\n      function handler(node, parents) {\n        const parent = parents[parents.length - 1]\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        const index = parent.children.indexOf(node)\n        let change = false\n        /** @type {Array<PhrasingContent>} */\n        let nodes = []\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          const position = match.index\n          /** @type {RegExpMatchObject} */\n          const matchObject = {\n            index: match.index,\n            input: match.input,\n            // @ts-expect-error: stack is fine.\n            stack: [...parents, node]\n          }\n          let value = replace(...match, matchObject)\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          // It wasn’t a match after all.\n          if (value !== false) {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n            change = true\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (change) {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        } else {\n          nodes = [node]\n        }\n\n        return index + nodes.length\n      }\n    }\n  )\n\n/**\n * Turn a schema into pairs.\n *\n * @param {FindAndReplaceSchema | FindAndReplaceList} schema\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n */\n\nimport {ccount} from 'ccount'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n// To do: next major: expose functions instead of extensions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM autolink literals.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [\n    {\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\n  ]\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Link | Array<PhrasingContent> | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('../types.js').AssociationId} AssociationId\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * Get an identifier from an association to match it to others.\n *\n * Associations are nodes that match to something else through an ID:\n * <https://github.com/syntax-tree/mdast#association>.\n *\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another:\n * controversially, character escapes and references don’t work in this\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\n *\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character\n * escapes and all character references.\n *\n * @type {AssociationId}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n","/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  const tracker = state.createTracker(info)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(\n        tracker.move(between(child, children[index + 1], parent, state))\n      )\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state)\n\n    if (result === true || result === 1) {\n      break\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result)\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n'\n    }\n  }\n\n  return '\\n\\n'\n}\n","/**\n * @typedef {import('../types.js').IndentLines} IndentLines\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @type {IndentLines}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n * @typedef {import('../types.js').ConstructName} ConstructName\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').SafeConfig} SafeConfig\n */\n\nimport {patternCompile} from './pattern-compile.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n// To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteReference')\n  const subexit = context.enter('reference')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteDefinition')\n  const subexit = context.enter('label')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    indentLines(containerFlow(node, context, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').PhrasingContent} PhrasingContent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: expose functions.\n// To do: next major: use `state`, state utilities.\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {strikethrough: enterStrikethrough},\n  exit: {strikethrough: exitStrikethrough}\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [\n    {\n      character: '~',\n      inConstruct: 'phrasing',\n      notInConstruct: constructsWithoutStrikethrough\n    }\n  ],\n  handlers: {delete: handleDelete}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  const exit = context.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += containerPhrasing(node, context, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternCompile} from '../util/pattern-compile.js'\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n *\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells.\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters.\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n// To do: next major: use `state` and `state` utilities from `mdast-util-to-markdown`.\n// To do: next major: use `defaultHandlers.inlineCode`.\n// To do: next major: expose functions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM tables.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  /** @type {Array<'left' | 'right' | 'center' | 'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter(\n    {\n      type: 'table',\n      align: align.map((d) => (d === 'none' ? null : d)),\n      children: []\n    },\n    token\n  )\n  this.setData('inTable', true)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(\n      handleTableAsData(node, context, safeOptions),\n      node.align\n    )\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...safeOptions,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(\n        children[index],\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(\n        children[index],\n        node,\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'tab'\n\n  // To do: remove in a major.\n  // @ts-expect-error: deprecated.\n  if (style === 1 || style === '1') {\n    return 'one'\n  }\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\n/**\n * @typedef {Extract<Root | Content, Parent>} Parents\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: rename `context` -> `state`, `safeOptions` -> `info`, use\n// `track` from `state`.\n// To do: next major: replace exports with functions.\n// To do: next major: use `defaulthandlers.listItem`.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM task list items.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM task list items.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parents} */ (this.stack[this.stack.length - 2])\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\n */\n\nimport {gfm} from 'micromark-extension-gfm'\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\n\n/**\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkGfm(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', gfm(options))\n  add('fromMarkdownExtensions', gfmFromMarkdown())\n  add('toMarkdownExtensions', gfmToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral,\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable,\n    gfmTaskListItem\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration.\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml,\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml,\n    gfmTableHtml,\n    gfmTagfilterHtml,\n    gfmTaskListItemHtml\n  ])\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown,\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown,\n    gfmTableFromMarkdown,\n    gfmTaskListItemFromMarkdown\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown,\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown,\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown\n    ]\n  }\n}\n"],"names":["COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","module","exports","style","options","TypeError","lineno","column","updatePosition","lines","match","length","i","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","prototype","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","value","decl","decls","declarations","element","document","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","charCodeAt","blankLine","tokenize","effects","ok","nok","code","after","partial","factorySpace","max","limit","Number","POSITIVE_INFINITY","size","enter","prefix","consume","exit","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","test","String","fromCharCode","splice","list","remove","items","parameters","chunkStart","Array","from","unshift","classifyCharacter","hasOwnProperty","combineExtensions","extensions","all","index","syntaxExtension","extension","hook","left","call","undefined","right","constructs","isArray","existing","before","add","decodeNumericCharacterReference","base","parseInt","characterEscapeOrReference","decodeString","decode","$0","$1","$2","head","hex","normalizeIdentifier","toLowerCase","toUpperCase","resolveAll","events","context","called","resolve","includes","wwwPrefix","wwwPrefixInside","wwwPrefixAfter","domain","underscoreInLastSegment","underscoreInLastLastSegment","seen","domainInside","check","trail","domainAfter","domainAtPunctuation","path","sizeOpen","sizeClose","pathInside","pathAtPunctuation","trailCharRefStart","trailBracketAfter","trailCharRefInside","emailDomainDotTrail","wwwAutolink","self","previousWww","previous","previousUnbalanced","attempt","wwwAfter","protocolAutolink","buffer","previousProtocol","fromCodePoint","protocolPrefixInside","protocol","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","data","gfmAtext","previousEmail","atext","emailDomain","emailDomainAfter","emailDomainDot","gfmAutolinkLiteral","text","result","token","_balanced","_gfmAutolinkLiteralWalkedInto","indent","tail","sliceSerialize","tokenizePotentialGfmFootnoteCall","defined","parser","gfmFootnotes","labelStart","id","now","codePointAt","resolveToPotentialGfmFootnoteCall","Object","assign","marker","offset","_bufferIndex","string","chunk","contentType","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","identifier","_container","labelAtMarker","labelInside","labelAfter","labelEscape","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","tokenizer","more","_open","Boolean","_close","open","strikethrough","nextEvents","insideSpan","null","attentionMarkers","EditMap","constructor","map","editMap","at","addImpl","sort","a","b","vecs","pop","gfmTableAlign","inDelimiterRow","align","event","alignIndex","gfmTable","flow","sizeB","next","bodyRowStart","headRowBefore","lazy","headRowBreak","headRowStart","interrupt","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","disable","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","cell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","_align","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","table","tableBody","exits","related","side","tasklistCheck","_gfmTasklistFirstContentOfListItem","inside","close","spaceThenNonSpace","gfmTaskListItem","ccount","character","count","indexOf","convert","castFactory","typeFactory","tests","checks","any","anyFactory","key","propsFactory","CONTINUE","EXIT","visitParents","tree","visitor","reverse","is","step","factory","parents","name","tagName","defineProperty","visit","subresult","grandparents","toResult","children","concat","own","findAndReplace","find","settings","schema","RegExp","ignored","ignore","pairs","toExpression","toFunction","toPairs","pairIndex","grandparent","parent","change","nodes","lastIndex","matchObject","input","stack","global","handler","inConstruct","notInConstruct","gfmAutolinkLiteralFromMarkdown","transforms","findUrl","findEmail","literalAutolink","title","url","literalAutolinkEmail","enterLiteralAutolinkValue","literalAutolinkHttp","literalAutolinkWww","config","autolinkEmail","autolinkProtocol","gfmAutolinkLiteralToMarkdown","unsafe","_","parts","split","isCorrectDomain","trailExec","closingParenIndex","openingParens","closingParens","splitUrl","label","email","association","between","state","join","repeat","eol","patternCompile","pattern","_compiled","atBreak","patternInScope","listInScope","none","safe","positions","infos","expression","numerical","escapeBackslashes","encode","toString","results","whole","track","lineShift","move","chunks","current","shift","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","resume","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","footnoteReference","safeOptions","tracker","subexit","footnoteDefinition","one","indentLines","info","indexStack","createTracker","child","handle","bulletLastUsed","containerFlow","blank","containerPhrasing","handlers","peek","handleDelete","gfmStrikethroughFromMarkdown","canContainEols","gfmStrikethroughToMarkdown","delete","inlineCode","sequence","defaultStringLength","toAlignment","gfmTableFromMarkdown","d","setData","tableData","enterCell","tableHeader","tableRow","codeText","getData","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","tableCell","handleTableCell","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","sizes","columnIndex","Math","delimiterStart","delimiterEnd","markdownTable","listItem","listItemIndent","checkListItemIndent","bullet","bulletCurrent","checkBullet","ordered","incrementListMarker","spread","ceil","gfmTaskListItemFromMarkdown","taskListCheckValueChecked","exitCheck","taskListCheckValueUnchecked","paragraph","checked","siblings","firstParaghraph","sibling","gfmTaskListItemToMarkdown","checkable","checkbox","remarkGfm","field","continuation","resolveTo","gfm","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","gfmToMarkdown"],"sourceRoot":""}