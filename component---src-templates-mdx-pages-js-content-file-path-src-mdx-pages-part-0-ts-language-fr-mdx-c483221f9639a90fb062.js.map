{"version":3,"file":"component---src-templates-mdx-pages-js-content-file-path-src-mdx-pages-part-0-ts-language-fr-mdx-c483221f9639a90fb062.js","mappings":"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","sources":["webpack://myjscourse/./src/mdx-pages/part0/ts-language.fr.mdx","webpack://myjscourse/./src/templates/mdx-pages.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\",\n    br: \"br\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    pre: \"pre\",\n    h3: \"h3\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {InternalPageMenu, PathViewer, PathViewerItem, InternalPageMenuItem, InternalPageTitle} = _components;\n  if (!InternalPageMenu) _missingMdxReference(\"InternalPageMenu\", true);\n  if (!InternalPageMenuItem) _missingMdxReference(\"InternalPageMenuItem\", true);\n  if (!InternalPageTitle) _missingMdxReference(\"InternalPageTitle\", true);\n  if (!PathViewer) _missingMdxReference(\"PathViewer\", true);\n  if (!PathViewerItem) _missingMdxReference(\"PathViewerItem\", true);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"c) Introduction au TS\"), \"\\n\", React.createElement(InternalPageMenu, null, React.createElement(PathViewer, null, React.createElement(PathViewerItem, {\n    to: \"/\"\n  }, \" web2course \"), React.createElement(PathViewerItem, {\n    to: \"/part0\"\n  }, \" Partie 0 \"), React.createElement(PathViewerItem, {\n    selected: true\n  }, \" c) TS \")), React.createElement(InternalPageMenuItem, null, \" Le TS, c'est quoi ? \"), React.createElement(InternalPageMenuItem, null, \" A quel moment le TS intervient ? \"), React.createElement(InternalPageMenuItem, null, \" Quand définir les types ? \"), React.createElement(InternalPageMenuItem, null, \" Comment définir les types ? \"), React.createElement(InternalPageMenuItem, null, \" Comment contrôler le flux en TS ? \"), React.createElement(InternalPageMenuItem, null, \" Réduction de type plus avancée \"), React.createElement(InternalPageMenuItem, null, \" Comment en savoir plus sur TS ? \")), \"\\n\", React.createElement(_components.h1, null, React.createElement(InternalPageTitle, null, \" Le TS, c'est quoi ? \")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Le TypeScript est du JavaScript avec des types\"), \". Ainsi, toute la syntaxe décrite dans l'\", React.createElement(_components.a, {\n    href: \"../js-language\"\n  }, \"introduction du JS\"), \" est valable pour le TS.\"), \"\\n\", React.createElement(_components.p, null, \"Le TS s'écrit tant dans un browser que dans un environnement serveur.\", React.createElement(_components.br), \"\\n\", \"On écrira du TS conforme au standard que l'on souhaite voir associé à JS : \", React.createElement(_components.strong, null, React.createElement(_components.code, null, \"ECMAScript\")), \", \", React.createElement(_components.strong, null, React.createElement(_components.code, null, \"CommonJS\")), \"...\"), \"\\n\", React.createElement(_components.p, null, \"Comme le monde de l'entreprise va de plus en plus vers \", React.createElement(_components.code, null, \"ECMAScript 6\"), \" (ou \", React.createElement(_components.code, null, \"ES6\"), \"), nous avons choisi \", React.createElement(_components.code, null, \"ECMAScript\"), \" comme standard pour ce cours.\"), \"\\n\", React.createElement(_components.p, null, \"Nous allons voir dans cette partie les spécificités utiles du TS.\"), \"\\n\", React.createElement(_components.p, null, \"Notons que le TS permet d'améliorer l'orienté objet en JS, mais nous ne verrons pas ces aspects dans ce cours sauf pour quelques exceptions. Nous estimons que le développement web moderne ne nécessite pas de maîtriser l'orienté objet en JS ; il nous semble plus intéressant de faire de la programmation fonctionnelle, tout en manipulant des objets et des types.\"), \"\\n\", React.createElement(_components.h1, null, React.createElement(InternalPageTitle, null, \" A quel moment le TS intervient ? \")), \"\\n\", React.createElement(_components.p, null, \"En TypeScript, l'intervention se fait principalement au moment de la \", React.createElement(_components.strong, null, \"transpilation\"), \" (on parle aussi de compilation par abus de langage) :\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Type Checking\"), \": TypeScript intervient lors de la transpilation, vérifiant les types et s'assurant que le code respecte les définitions de types fournies. Cela permet de détecter les erreurs de type avant l'exécution.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Type Safety\"), \" : TypeScript aide à maintenir la sécurité des types en obligeant à définir des types précis pour les variables, les fonctions, etc. Cela évite l'utilisation du type \", React.createElement(_components.code, null, \"any\"), \", qui désactive les vérifications de type, et réduit les risques d'erreurs liées aux pointeurs nuls (null pointers).\"), \"\\n\", React.createElement(_components.li, null, \"Le code TypeScript est transpilé en JavaScript. Les annotations de type sont supprimées et le \", React.createElement(_components.strong, null, \"code résultant est du pur JavaScript\"), \".\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Il y a d'autres aspects importants où TypeScript peut intervenir, principalement :\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Intellisense\"), \" : Les éditeurs de code et IDE qui supportent TypeScript (comme Visual Studio Code) utilisent les informations de type pour fournir des suggestions de code, auto-compléter les noms de variables et de fonctions, et offrir des informations sur les signatures de fonctions.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Erreurs en temps réel\"), \" : Pendant l'écriture du code, les éditeurs peuvent afficher des erreurs de type en temps réel, avant même que le code ne soit compilé.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Documentation\"), \" : Les annotations de type servent de documentation vivante, aidant les développeurs à comprendre les interfaces et les attentes des fonctions.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Refactoring\"), \" : Les outils de refactoring utilisent les informations de type pour effectuer des transformations de code de manière sécurisée (comme par exemple le \", React.createElement(_components.code, null, \"Quick Fix...\"), \" de VS Code).\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Linting\"), \" : Les outils comme ESLint utilisent les types pour imposer des règles de style et de bonnes pratiques de code.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Tests\"), \" : Les frameworks de tests peuvent utiliser les types pour générer des cas de test ou vérifier les types des données manipulées.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Runtime (indirectement)\"), \" : Même si TypeScript ne vérifie pas les types à l'exécution, les développeurs peuvent utiliser des gardes de type (type guards) et des assertions pour vérifier les types à l'exécution, ce qui ajoute une couche supplémentaire de sécurité.\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, React.createElement(InternalPageTitle, null, \" Quand définir les types ? \")), \"\\n\", React.createElement(_components.h2, null, \"Introduction\"), \"\\n\", React.createElement(_components.p, null, \"Pour maintenir la sécurité des types, il est important d'éviter que TypeScript infère le type \", React.createElement(_components.code, null, \"any\"), \" pour les variables, les fonctions, les paramètres, etc.\"), \"\\n\", React.createElement(_components.p, null, \"Il y a beaucoup de cas où TS est capable d'inférer le type d'une variable, d'une fonction, etc. sans que l'on ait besoin de le spécifier explicitement.\"), \"\\n\", React.createElement(_components.h2, null, \"Cas où il est inutile de spécifier le type\"), \"\\n\", React.createElement(_components.p, null, \"👍 Lorsque l'inférence de type est claire et évidente, ou lorsque l'annotation (de type) n'apporte pas de valeur ajoutée significative en termes de lisibilité ou de documentation, il n'est pas recommandé de spécifier le type explicitement. Cela peut rendre le code plus verbeux et moins lisible.\"), \"\\n\", React.createElement(_components.p, null, \"Voici quelques exemples où il est inutile de spécifier le type :\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"const x = 10; // TypeScript infère que x est de type number\\nconst y = 'hello'; // TypeScript infère que y est de type string\\nconst z = [1, 2, 3]; // TypeScript infère que z est de type number[]\\n\\nfunction greet(name: string) { \\n  return `Hello, ${name}!`; // Le type string est évident ici\\n}\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Cas où il est important de spécifier le type\"), \"\\n\", React.createElement(_components.h3, null, \"Type Checking\"), \"\\n\", React.createElement(_components.p, null, \"👍 Il est recommandé de spécifier le type lorsque TypeScript ne peut pas inférer le type correctement, ou lorsque l'inférence de type peut entraîner des erreurs potentielles difficiles à détecter.\"), \"\\n\", React.createElement(_components.p, null, \"Voici un exemple concret où il est recommandé de spécifier le type :\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"let value; // TypeScript infère que value est de type any\\n\\nfunction setValue(newValue) { \\n  value = newValue; \\n}\\n\\nsetValue(42);\\n\\n// Plus tard dans le code\\nconsole.log(value.toFixed(2)); // Erreur à la compilation/transpilation : toFixed n'est pas une fonction sur type 'any'\\n\")), \"\\n\", React.createElement(_components.p, null, \"TypeScript détectera l'erreur lors de la transpilation/compilation, car value est de type \", React.createElement(_components.code, null, \"any\"), \" et n'a pas de méthode \", React.createElement(_components.code, null, \"toFixed\"), \".\\nC'est l'éditeur de code qui indiquera cette erreur avant que le code ne soit transpilé en JavaScript.\"), \"\\n\", React.createElement(_components.p, null, \"Pour éviter ce problème, voici comment on peut spécifier le type de \", React.createElement(_components.code, null, \"value\"), \" :\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"let value: number;\\n\\nfunction setValue(newValue: number) {\\n    value = newValue;\\n}\\n\\nsetValue(42);\\n\\n// Maintenant, TypeScript sait que value est de type number\\nconsole.log(value.toFixed(2)); // Correct : affiche '42.00'\\n\")), \"\\n\", React.createElement(_components.p, null, \"En spécifiant \", React.createElement(_components.code, null, \"value\"), \" comme étant de type \", React.createElement(_components.code, null, \"number\"), \", TypeScript peut vérifier statiquement que les opérations ultérieures sur \", React.createElement(_components.code, null, \"value\"), \" (comme \", React.createElement(_components.code, null, \"toFixed(2)\"), \") sont appropriées et éviter les erreurs potentielles qui seraient révélées à l'exécution.\"), \"\\n\", React.createElement(_components.h3, null, \"Documentation & lisibilité\"), \"\\n\", React.createElement(_components.p, null, \"👍 Pour l'aspect documentation et lisibilité, il est recommandé de spécifier le type des paramètres de fonction. Concernant les valeurs de retour, même si TypeScript peut les inférer correctement, il est conseillé de spécifier le type de retour lorsque le corps de la fonction est volumineux. Cela rend le code plus explicite et aide les autres développeurs à comprendre comment utiliser la fonction sans avoir à lire son implémentation.\"), \"\\n\", React.createElement(_components.p, null, \"Voici un exemple d'une fonction assez volumineuse où il est recommandé de spécifier le type de retour :\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"function processData(data: string[]): { averageLength: number, maxLength: number } {\\n    let totalLength = 0;\\n    let maxLength = 0;\\n\\n    for (let item of data) {\\n        totalLength += item.length;\\n        if (item.length > maxLength) {\\n            maxLength = item.length;\\n        }\\n    }\\n\\n    const averageLength = data.length > 0 ? totalLength / data.length : 0;\\n\\n    return { averageLength, maxLength };\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"En spécifiant le type de retour \", React.createElement(_components.code, null, \"{ averageLength: number, maxLength: number }\"), \", on documente clairement que la fonction processData produit un objet avec ces deux propriétés. Cela rend le code plus explicite et facilite la compréhension pour les autres développeurs qui utilisent ou maintiennent cette fonction.\"), \"\\n\", React.createElement(_components.h3, null, \"Maintenabilité\"), \"\\n\", React.createElement(_components.p, null, \"👍 Dans le cas où le type de retour est complexe ou utilisé à plusieurs endroits dans le code, il est intéressant de définir une interface ou un type pour ce type de retour. Cela permet de réutiliser le type de retour dans d'autres parties du code et de garantir la cohérence des types.\"), \"\\n\", React.createElement(_components.p, null, \"Voici ce que ça donnerait pour notre exemple :\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"interface DataProcessingResult {\\n  averageLength: number;\\n  maxLength: number;\\n}\\n\\nfunction processData(data: string[]): DataProcessingResult {\\n  let totalLength = 0;\\n  let maxLength = 0;\\n\\n  for (let item of data) {\\n      totalLength += item.length;\\n      if (item.length > maxLength) {\\n          maxLength = item.length;\\n      }\\n  }\\n\\n  const averageLength = data.length > 0 ? totalLength / data.length : 0;\\n\\n  return { averageLength, maxLength };\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"En définissant l'interface \", React.createElement(_components.code, null, \"DataProcessingResult\"), \", on peut réutiliser ce type de retour dans d'autres parties du code, ce qui rend le code plus maintenable et évite les erreurs de type.\"), \"\\n\", React.createElement(_components.h1, null, React.createElement(InternalPageTitle, null, \" Comment définir les types ? \")), \"\\n\", React.createElement(_components.p, null, \"Il existe plusieurs façons de définir des types en TypeScript. Voici les principales méthodes :\"), \"\\n\", React.createElement(_components.h2, null, \"Les annotations de type\"), \"\\n\", React.createElement(_components.p, null, \"Les annotations de type sont des instructions qui indiquent au compilateur TypeScript le type d'une variable, d'un paramètre de fonction, d'une valeur de retour, etc. Les annotations de type sont placées après le nom de la variable, du paramètre ou de la fonction, suivies de deux points \", React.createElement(_components.strong, null, React.createElement(_components.code, null, \":\")), \" et du type souhaité.\"), \"\\n\", React.createElement(_components.p, null, \"Voici quelques exemples d'annotations de type :\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"let x: number; // x est de type number\\nlet y: string; // y est de type string\\nlet z: number[]; // z est de type number[]\\nconst numbers: number[] = [1, 2, 3]; // numbers est de type number[]\\nlet isActive: boolean; // isActive est de type boolean\\nlet greet: (name: string) => string; \\n// greet est une fonction qui prend un paramètre de type string et retourne une valeur de type string\\nconst person: { name: string, age: number } = { name: \\\"Alice\\\", age: 30 };\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Les interfaces\"), \"\\n\", React.createElement(_components.p, null, \"Les interfaces sont des contrats qui définissent la structure des objets en TypeScript. Elles permettent de définir des types personnalisés pour les objets, les fonctions, les classes, etc. Les interfaces sont largement utilisées pour définir des types complexes et réutilisables.\"), \"\\n\", React.createElement(_components.p, null, \"Voici un exemple d'interface pour définir un type de données :\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"interface Person {\\n    readonly id: number; // Propriété en lecture seule\\n    name: string;\\n    age: number;\\n    email?: string; // Propriété optionnelle\\n}\\n\\nconst alice: Person = { id:1, name: \\\"Alice\\\", age: 30 };\\nconst bob: Person = { id:2, name: \\\"Bob\\\", age: 25, email: \\\"bob@vinci.be\\\" };\\n\\n// Tentative de modification d'une propriété en lecture seule (erreur)\\n// alice.id = 3; // Erreur: Cannot assign to 'id' because it is a read-only property.\\n\")), \"\\n\", React.createElement(_components.p, null, \"Notons qu'une interface peut étendre un type défini ou une autre interface. Voici un exemple d'interface qui étend un type défini:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"type Employee = { // fonctionne aussi avec une interface (interface Employee { ... })\\n  name: string;\\n  age: number;\\n};\\n\\ninterface Manager extends Employee {\\n  department: string;\\n  manageTeam(): void;\\n}\\n\\nconst manager: Manager = {\\n  name: \\\"Bob\\\",\\n  age: 35,\\n  department: \\\"HR\\\",\\n  manageTeam() {\\n      console.log(\\\"Managing team...\\\");\\n  }\\n};\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Les types\"), \"\\n\", React.createElement(_components.p, null, \"Les types sont similaires aux interfaces, mais ils peuvent également être utilisés pour définir des types primitifs, des unions, des intersections, des tuples, etc.\"), \"\\n\", React.createElement(_components.p, null, \"Voici un exemple de type pour définir un type de données :\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"type Person = {\\n    name: string;\\n    age: number;\\n    email?: string; // Propriété optionnelle\\n    readonly id: number; // Propriété en lecture seule\\n}\\n\\nconst person: Person = {\\n    name: \\\"Alice\\\",\\n    age: 30,\\n    id: 1\\n    // email est optionnel et peut être omis si nécessaire\\n};\\n\")), \"\\n\", React.createElement(_components.p, null, \"Notons que les types peuvent être utilisés pour définir des types primitifs, des unions, des intersections, des tuples, etc. :\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"type ID = string | number; // Unions type\\n\\ntype Printable = {\\n    print(): void;\\n};\\n\\ntype Loggable = {\\n    log(): void;\\n};\\n\\ntype LoggableAndPrintable = Printable & Loggable; // Intersections de type\\n\\n// Utilisation du type intersection\\nlet obj: LoggableAndPrintable = {\\n    print() {\\n        console.log(\\\"Printing...\\\");\\n    },\\n    log() {\\n        console.log(\\\"Logging...\\\");\\n    }\\n};\\n\\nfunction readPizzaById(id: number): Pizza | undefined {\\n  const pizzas = parse(jsonDbPath, defaultPizzas);\\n  return pizzas.find((pizza) => pizza.id === id);\\n} // Fonction qui retourne un type Pizza ou undefined\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Les classes\"), \"\\n\", React.createElement(_components.p, null, \"Les classes en TypeScript peuvent également être utilisées pour définir des types. Les classes peuvent être utilisées pour définir des types d'objets avec des propriétés et des méthodes.\"), \"\\n\", React.createElement(_components.p, null, \"Voici un exemple de classe pour définir un type de données :\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"class Person {\\n    name: string;\\n    age: number;\\n    email?: string; // Propriété optionnelle\\n\\n    constructor(name: string, age: number, email?: string) {\\n        this.name = name;\\n        this.age = age;\\n        this.email = email;\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"👍 Dans ce cours, nous avons volontairement choisi de ne pas faire d'orienté objet en JS/TS. Nous vous recommandons de ne pas utiliser les classes pour définir des types, mais plutôt d'utiliser des interfaces ou des types.\"), \"\\n\", React.createElement(_components.h2, null, \"Les enums\"), \"\\n\", React.createElement(_components.p, null, \"Les énumérations (enums) sont des types de données qui permettent de définir un ensemble de valeurs nommées. Les énumérations sont largement utilisées pour définir des types de données avec des valeurs prédéfinies.\"), \"\\n\", React.createElement(_components.p, null, \"Voici un exemple d'énumération pour définir un type de données :\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"enum Color {\\n    Red = 'red',\\n    Green = 'green',\\n    Blue = 'blue'\\n}\\n\\nconst color: Color = Color.Red;\\n\\nif (color === Color.Red) {\\n    console.log(\\\"It's red!\\\");\\n}\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Generics\"), \"\\n\", React.createElement(_components.p, null, \"Les génériques (generics) sont des types de données paramétrés qui permettent de définir des types réutilisables et flexibles. Les génériques sont utilisés pour définir des types de données qui peuvent accepter différents types de paramètres.\"), \"\\n\", React.createElement(_components.p, null, \"Voici un exemple de générique pour définir un type de données :\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"// Définition d'une interface générique\\ninterface Box<T> {\\n    value: T;\\n}\\n\\n// Utilisation de l'interface générique\\nconst box1: Box<number> = { value: 10 };\\nconst box2: Box<string> = { value: \\\"Hello, TypeScript!\\\" };\\nconst box3: Box = { value: true }; // le type de T est inféré comme boolean\\n\\nconsole.log(box1.value); // Output: 10\\nconsole.log(box2.value); // Output: \\\"Hello, TypeScript!\\\"\\nconsole.log(box3.value); // Output: true\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Interfaces vs Types\"), \"\\n\", React.createElement(_components.p, null, \"Les interfaces et les types sont deux façons de définir des types en TypeScript. Les interfaces sont principalement utilisées pour définir des structures d'objets (et leur contrat), tandis que les types sont utilisés pour définir des types primitifs, des unions, des intersections...\"), \"\\n\", React.createElement(_components.p, null, \"👍 Dans ce cours, nous vous recommandons d'utiliser les interfaces pour définir des types d'objets.\"), \"\\n\", React.createElement(_components.p, null, \"Voici un exemple :\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"interface Pizza {\\nid: number;\\ntitle: string;\\ncontent: string;\\n}\\n\\nconst pizza: Pizza = {\\nid: 1,\\ntitle: \\\"Margherita\\\",\\ncontent: \\\"Tomato, mozzarella, basilique\\\"\\n};\\n\")), \"\\n\", React.createElement(_components.p, null, \"👍 Dans ce cours, nous vous recommandons d'utiliser les types pour définir des types primitifs, des unions et des intersections, des types sur base d'interfaces...\"), \"\\n\", React.createElement(_components.p, null, \"Voici quelques exemples :\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"interface AuthenticatedUser {\\nusername: string;\\ntoken: string;\\n}\\n\\ntype MaybeAuthenticatedUser = AuthenticatedUser | undefined; // Union type\\n\\n\\ninterface Pizza {\\nid: number;\\ntitle: string;\\ncontent: string;\\n}\\n\\ntype NewPizza = Omit<Pizza, \\\"id\\\">;  // Omet la propriété \\\"id\\\" de l'interface Pizza\\n\\nfunction updatePizza(\\nid: number,\\nupdatedPizza: Partial<NewPizza> // Partial permet de rendre les propriétés de NewPizza optionnelles\\n): Pizza {\\n// ...\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"Omit\"), \" est un utilitaire TS qui permet de créer un nouveau type en omettant certaines propriétés d'un type existant.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"Partial\"), \" est un utilitaire TS qui permet de rendre toutes les propriétés d'un type optionnel.\"), \"\\n\", React.createElement(_components.h1, null, React.createElement(InternalPageTitle, null, \" Comment contrôler le flux en TS ? \")), \"\\n\", React.createElement(_components.h2, null, \"Introduction\"), \"\\n\", React.createElement(_components.p, null, \"Le contrôle de flux vise à garantir la sécurité et la précision des types en fonction des chemins d'exécution possibles.\"), \"\\n\", React.createElement(_components.p, null, \"Le contrôle de flux en TypeScript se réfère généralement à l'ensemble des mécanismes par lesquels le transpilateur/compilateur analyse les chemins d'exécution possibles d'un programme pour déterminer les types des variables. Cela inclut les vérifications de type conditionnelles telles que \", React.createElement(_components.code, null, \"if\"), \", \", React.createElement(_components.code, null, \"else\"), \", \", React.createElement(_components.code, null, \"switch\"), \", ainsi que les opérateurs de vérification de type comme \", React.createElement(_components.code, null, \"typeof\"), \", \", React.createElement(_components.code, null, \"instanceof\"), \", \", React.createElement(_components.code, null, \"in\"), \", et les assertions de type via \", React.createElement(_components.code, null, \"as\"), \".\"), \"\\n\", React.createElement(_components.h2, null, \"Vérification de type conditionnelle\"), \"\\n\", React.createElement(_components.p, null, \"La vérification de type conditionnelle est une technique courante pour garantir la sécurité des types en fonction des conditions. TypeScript utilise les instructions \", React.createElement(_components.code, null, \"if\"), \", \", React.createElement(_components.code, null, \"else\"), \", \", React.createElement(_components.code, null, \"switch\"), \" pour effectuer des vérifications de type conditionnelles.\"), \"\\n\", React.createElement(_components.p, null, \"Voici un exemple d'utilisation de la vérification de type conditionnelle avec \", React.createElement(_components.code, null, \"if\"), \" :\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"function greet(name: string | undefined) {\\n    if (name) { // TypeScript sait que name est de type string ici\\n        console.log(`Hello, ${name}!`); \\n    } else { // TypeScript sait que name est de type undefined ici\\n        console.log(\\\"Hello, stranger!\\\");\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Dans cet exemple, TypeScript infère que \", React.createElement(_components.code, null, \"name\"), \" est de type \", React.createElement(_components.code, null, \"string | undefined\"), \". La vérification \", React.createElement(_components.code, null, \"if (name)\"), \" permet de vérifier si \", React.createElement(_components.code, null, \"name\"), \" est défini (non \", React.createElement(_components.code, null, \"undefined\"), \") avant d'afficher le message de salutation.\"), \"\\n\", React.createElement(_components.h2, null, \"Opérateurs de vérification de type\"), \"\\n\", React.createElement(_components.p, null, \"Les opérateurs de vérification de type sont des outils puissants pour garantir la sécurité des types en TypeScript. Ces opérateurs permettent de vérifier le type d'une variable ou d'une expression à l'exécution.\"), \"\\n\", React.createElement(_components.p, null, \"Voici quelques exemples d'opérateurs de vérification de type :\"), \"\\n\", React.createElement(_components.h3, null, React.createElement(_components.code, null, \"typeof\")), \"\\n\", React.createElement(_components.p, null, \"L'opérateur \", React.createElement(_components.code, null, \"typeof\"), \" permet de vérifier le type d'une variable ou d'une expression à l'exécution. TypeScript utilise \", React.createElement(_components.code, null, \"typeof\"), \" pour effectuer des vérifications de type sur les variables.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"function logType(value: unknown) {\\n    if (typeof value === \\\"string\\\") {  // Vérifie si value est une string\\n        console.log(\\\"It's a string!\\\");\\n    } else if (typeof value === \\\"number\\\") {\\n        console.log(\\\"It's a number!\\\");\\n    } else {\\n        console.log(\\\"Unknown type!\\\");\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Dans cet exemple, TypeScript utilise \", React.createElement(_components.code, null, \"typeof\"), \" pour vérifier le type de \", React.createElement(_components.code, null, \"value\"), \" et afficher un message en fonction du type détecté.\"), \"\\n\", React.createElement(_components.h3, null, React.createElement(_components.code, null, \"instanceof\")), \"\\n\", React.createElement(_components.p, null, \"L'opérateur \", React.createElement(_components.code, null, \"instanceof\"), \" permet de vérifier si un objet est une instance d'une classe.\"), \"\\n\", React.createElement(_components.p, null, \"Voici un exemple :\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"class Person {\\n  name: string;\\n\\n  constructor(name: string) {\\n      this.name = name;\\n  }\\n}\\n\\nfunction greet(person: Person | unknown) {\\n  if (person instanceof Person) { // Vérifie si person est une instance de Person\\n      console.log(`Hello, ${person.name}!`);\\n  } else {\\n      console.log(\\\"Hello, stranger!\\\");\\n  }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Dans cet exemple, TypeScript utilise \", React.createElement(_components.code, null, \"instanceof\"), \" pour vérifier si \", React.createElement(_components.code, null, \"person\"), \" est une instance de \", React.createElement(_components.code, null, \"Person\"), \" avant d'afficher le message de salutation. Vous ne verrez pas ce genre de code dans ce cours, car nous ne faisons pas d'orienté objet en JS/TS.\"), \"\\n\", React.createElement(_components.h3, null, React.createElement(_components.code, null, \"in\")), \"\\n\", React.createElement(_components.p, null, \"L'opérateur \", React.createElement(_components.code, null, \"in\"), \" permet de vérifier si une propriété existe dans un objet. TypeScript utilise \", React.createElement(_components.code, null, \"in\"), \" pour effectuer des vérifications de type sur les propriétés d'un objet.\"), \"\\n\", React.createElement(_components.p, null, \"Voici un exemple avec une interface \", React.createElement(_components.code, null, \"Person\"), \" :\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"interface Person {\\nname: string;\\nage: number;\\n}\\n\\nfunction greet(person: Person | unknown) {\\nif (person && typeof person === \\\"object\\\"  && \\\"name\\\" in person) {\\n    console.log(`Hello, ${person.name}!`);\\n} else {\\n    console.log(\\\"Hello, stranger!\\\");\\n}\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Dans cet exemple, TypeScript utilise \", React.createElement(_components.code, null, \"in\"), \" pour vérifier si la propriété \", React.createElement(_components.code, null, \"name\"), \" existe dans \", React.createElement(_components.code, null, \"person\"), \" avant d'afficher le message de salutation.\"), \"\\n\", React.createElement(_components.h3, null, \"Assertions de type\"), \"\\n\", React.createElement(_components.p, null, \"Les assertions de type (type assertions) permettent de forcer le type d'une variable ou d'une expression à un type spécifique. TypeScript utilise les assertions de type pour effectuer des vérifications de type manuelles.\"), \"\\n\", React.createElement(_components.p, null, \"Attention, les assertions de type ne changent pas le comportement à l'exécution de votre code ! Il est donc important d'utiliser les assertions de type que quand vous êtes sûr du type de la variable ! A utiliser avec précaution et parcimonie.\"), \"\\n\", React.createElement(_components.h4, null, \"Assertions de type avec \", React.createElement(_components.code, null, \"as\")), \"\\n\", React.createElement(_components.p, null, \"Voici un exemple d'assertion de type avec \", React.createElement(_components.code, null, \"as\"), \" :\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"interface Person {\\nid: number;\\nusername: string;\\nemail: string;\\n}\\n\\n// Exemple de données reçues de l'API (simplifié)\\nconst apiResponse: unknown = {\\nid: 1,\\nusername: \\\"john_doe\\\",\\nemail: \\\"john.doe@example.com\\\",\\n// D'autres propriétés qui ne nous intéressent pas pour cet exemple\\n};\\n\\n// Vérification de type pour garantir que 'apiResponse' est bien de type 'User'\\nif (\\napiResponse &&\\ntypeof apiResponse === \\\"object\\\" &&\\n\\\"id\\\" in apiResponse &&\\n\\\"username\\\" in apiResponse &&\\n\\\"email\\\" in apiResponse\\n) {\\nconst user: Person = {\\n  id: apiResponse.id as number, // Assertion de type pour 'id'\\n  username: apiResponse.username as string,   // Assertion de type pour 'username'\\n  email: apiResponse.email as string,  // Assertion de type pour 'email'\\n};\\n\\nconsole.log(user);\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Dans cet exemple, TypeScript utilise des assertions de type avec \", React.createElement(_components.code, null, \"as\"), \" pour forcer le type des propriétés de \", React.createElement(_components.code, null, \"apiResponse\"), \" à \", React.createElement(_components.code, null, \"number\"), \" et \", React.createElement(_components.code, null, \"string\"), \" respectivement. Cela garantit que \", React.createElement(_components.code, null, \"user\"), \" est de type \", React.createElement(_components.code, null, \"Person\"), \" et évite les erreurs de type potentielles à la transpilation.\"), \"\\n\", React.createElement(_components.h4, null, \"Assertion de type non-null\"), \"\\n\", React.createElement(_components.p, null, \"L'assertion de type non-null (\", React.createElement(_components.code, null, \"!\"), \") affirme (au transpiler et aux lecteurs du code) que la valeur d'une variable n'est pas \", React.createElement(_components.code, null, \"null\"), \" ou \", React.createElement(_components.code, null, \"undefined\"), \" (on dit \\\"nullish\\\").\"), \"\\n\", React.createElement(_components.p, null, \"Voici un exemple d'assertion de type non-null :\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"let value: string | undefined = \\\"Hello, TypeScript!\\\";\\nconst length = value!.length; // Assertion de type non-null(ish)\\nconsole.log(length); // Output: 17\\n\")), \"\\n\", React.createElement(_components.p, null, \"Dans cet exemple, TypeScript utilise l'assertion de type non-null (\", React.createElement(_components.code, null, \"!\"), \") pour garantir que \", React.createElement(_components.code, null, \"value\"), \" n'est pas \", React.createElement(_components.code, null, \"null\"), \" avant d'accéder à sa propriété \", React.createElement(_components.code, null, \"length\"), \".\"), \"\\n\", React.createElement(_components.h2, null, \"Conclusion\"), \"\\n\", React.createElement(_components.p, null, \"Le contrôle de flux en TypeScript est un outil puissant pour garantir la sécurité des types en fonction des chemins d'exécution possibles. En utilisant des vérifications de type conditionnelles, des opérateurs de vérification de type et des assertions de type, les développeurs peuvent s'assurer que leur code respecte les définitions de types fournies et éviter les erreurs de type potentielles.\"), \"\\n\", React.createElement(_components.p, null, \"Nous avons vu les façons les plus directes de contrôler le flux en TS ; il existe d'autre façons (type guards, assertion functions), mais nous ne les verrons pas dans ce cours.\"), \"\\n\", React.createElement(_components.h1, null, React.createElement(InternalPageTitle, null, \" Réduction de type plus avancée \")), \"\\n\", React.createElement(_components.h2, null, \"Introduction\"), \"\\n\", React.createElement(_components.p, null, \"En TypeScript, la \", React.createElement(_components.strong, null, \"réduction de type\"), \" (\\\"type narrowing\\\") permet de contrôler le flux d'exécution (vu à la section précédente) en ajustant dynamiquement le type des variables, facilitant ainsi des décisions conditionnelles basées sur des types précis dans le code.\"), \"\\n\", React.createElement(_components.p, null, \"La \", React.createElement(_components.strong, null, \"réduction de type\"), \" (\\\"type narrowing\\\") en TypeScript fait référence au processus par lequel TypeScript restreint le type d'une variable ou d'une expression à un sous-type plus spécifique. Cela se produit généralement après une vérification de type, ce qui permet au compilateur TypeScript de savoir plus précisément quel type de valeur vous manipulez à un moment donné dans votre code.\"), \"\\n\", React.createElement(_components.p, null, \"Nous allons voir quelques exemples courants de \", React.createElement(_components.strong, null, \"réduction de type\"), \" plus avancé en TypeScript dans une application Express.\"), \"\\n\", React.createElement(_components.h2, null, \"Tentative n°1 de réduction de type du body d'une requête : assertion de type\"), \"\\n\", React.createElement(_components.p, null, \"En TS, lorsqu'on utilise Express, le type du \", React.createElement(_components.code, null, \"body\"), \" d'une requête est \", React.createElement(_components.code, null, \"any\"), \" par défaut. Cela peut être problématique, car cela signifie que le type du \", React.createElement(_components.code, null, \"body\"), \" n'est pas vérifié par TypeScript.\"), \"\\n\", React.createElement(_components.p, null, \"Pour réduire le type du body à un type plus spécifique, on pourrait utiliser une assertion de type :\"), \"\\n\", React.createElement(_components.pre, {\n    numbered: true,\n    highlighting: \"2\"\n  }, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"router.post(\\\"/\\\", (req, res) => {\\n  const { title, content } = req.body as NewPizza;\\n\\n  if (\\n    !title ||\\n    !content ||\\n    !isString(title) ||\\n    !isString(content) ||\\n    !title.trim() ||\\n    !content.trim()\\n  ) {\\n    return res.sendStatus(400);\\n  }\\n\\n  const pizzas = parse(jsonDbPath, defaultPizzas);\\n  // Use reduce() to find the highest id in the pizzas array\\n  const nextId =\\n    pizzas.reduce((maxId, pizza) => (pizza.id > maxId ? pizza.id : maxId), 0) +\\n    1; // 0 is the initial value of maxId\\n\\n  const addedPizza: Pizza = {\\n    id: nextId,\\n    title,\\n    content,\\n  };\\n\\n  pizzas.push(addedPizza);\\n\\n  serialize(jsonDbPath, pizzas);\\n\\n  return res.json(addedPizza);\\n});\\n\")), \"\\n\", React.createElement(_components.p, null, \"Néanmoins, cette approche n'est pas optimale, car il est impossible d'assurer que le type du \", React.createElement(_components.code, null, \"body\"), \" est bien \", React.createElement(_components.code, null, \"NewPizza\"), \". En effet, une API n'a pas d'influence sur ce que les clients décident d'envoyer.\"), \"\\n\", React.createElement(_components.p, null, \"Pour des raisons de robustesse de l'API, on se doit de valider le type du \", React.createElement(_components.code, null, \"body\"), \" avant de l'utiliser. Cela sera fait à l'exécution ici (lignes 4 à 13) via des vérifications de type, mais on prend le risque d'oublier une validation qui pourrait être détectée à la transpilation/compilation.\"), \"\\n\", React.createElement(_components.p, null, \"👎 Dès lors, nous vous déconseillons d'utiliser l'assertion de type (avec \", React.createElement(_components.code, null, \"as\"), \") pour réduire le type du \", React.createElement(_components.code, null, \"body\"), \" d'une requête Express.\", React.createElement(_components.br), \"\\n\", \"Même si le code est très concis, ça n'est pas une bonne pratique de faire des vérifications de type après avoir utilisé une assertion de type juste pour se simplifier la vie en TS.\"), \"\\n\", React.createElement(_components.h2, null, \"Tentative n°2 de réduction de type du body d'une requête : vérification de type uniquement\"), \"\\n\", React.createElement(_components.p, null, \"Pour réduire le type du \", React.createElement(_components.code, null, \"body\"), \" à un type plus spécifique, on pourrait tenter d'utiliser une vérification de type :\"), \"\\n\", React.createElement(_components.pre, {\n    highlighting: \"9-10\"\n  }, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"router.post(\\\"/\\\", (req, res) => {\\n  if (\\n      !req.body ||\\n      typeof req.body !== 'object' ||\\n      !(\\\"title\\\" in req.body) || \\n      !(\\\"content\\\" in req.body) ||\\n      typeof req.body.title !== 'string' ||\\n      typeof req.body.content !== 'string' ||\\n      !req.body.title.trim() || // Unsafe call of an `any` typed value.\\n      !req.body.content.trim() // Unsafe call of an `any` typed value.\\n    ) {\\n      return res.sendStatus(400);\\n    }\\n    //... \\n\")), \"\\n\", React.createElement(_components.p, null, \"⚡️ Ici, \", React.createElement(_components.code, null, \"req.body\"), \" est de type \", React.createElement(_components.code, null, \"any\"), \". TS ne reconnaît pas la réduction de type pour une variable de type \", React.createElement(_components.code, null, \"any\"), \". Ce code ne peut donc pas transpiler/ compiler !\", React.createElement(_components.br), \"\\n\", \"Ainsi, il est nécessaire de typer la variable \", React.createElement(_components.code, null, \"req.body\"), \" pour que TS puisse reconnaître les propriétés \", React.createElement(_components.code, null, \"title\"), \" et \", React.createElement(_components.code, null, \"content\"), \" et les types de ces propriétés.\"), \"\\n\", React.createElement(_components.h2, null, \"Réduction de type du body d'une requête : assertion de type avec \", React.createElement(_components.code, null, \"unknown\")), \"\\n\", React.createElement(_components.p, null, \"Nous allons créer une variable de type \", React.createElement(_components.code, null, \"unknown\"), \" qui est une forme plus strictement typée d'\", React.createElement(_components.code, null, \"any\"), \", car TypeScript nécessite que vous effectuiez une vérification de type avant d'accéder à ses propriétés ou de l'assigner à un autre type :\"), \"\\n\", React.createElement(_components.pre, {\n    numbered: true,\n    highlighting: \"2\"\n  }, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"router.post(\\\"/\\\", (req, res) => {\\n  const body: unknown = req.body;\\n  if (\\n    !body ||\\n    typeof body !== \\\"object\\\" ||\\n    !(\\\"title\\\" in body) ||\\n    !(\\\"content\\\" in body) ||\\n    typeof body.title !== \\\"string\\\" ||\\n    typeof body.content !== \\\"string\\\" ||\\n    !body.title.trim() ||\\n    !body.content.trim()\\n  ) {\\n    return res.sendStatus(400);\\n  }\\n\\nconst { title, content } = body;\\n//...\\n\")), \"\\n\", React.createElement(_components.p, null, \"👍 Ici, \", React.createElement(_components.code, null, \"title\"), \" et \", React.createElement(_components.code, null, \"content\"), \" sont reconnues par TypeScript comme de type \", React.createElement(_components.code, null, \"string\"), \" après la vérification de type. C'est donc une solution robuste qui peut être utilisée dans ce cours.\"), \"\\n\", React.createElement(_components.p, null, \"💭  Notons ici que pour TS, le type de \", React.createElement(_components.code, null, \"body\"), \" est : \", React.createElement(_components.code, null, \"object & Record<\\\"title\\\", unknown> & Record<\\\"content\\\", unknown>\"), \". C'est un type très complexe, mais qui permet de garantir que \", React.createElement(_components.code, null, \"title\"), \" et \", React.createElement(_components.code, null, \"content\"), \" sont bien des propriétés de \", React.createElement(_components.code, null, \"body\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"Le type \", React.createElement(_components.code, null, \"Record<\\\"title\\\", unknown>\"), \" représente un objet qui a une propriété obligatoire nommée \", React.createElement(_components.code, null, \"title\"), \" avec une valeur de type inconnu (\", React.createElement(_components.code, null, \"unknown\"), \"). De même pour \", React.createElement(_components.code, null, \"content\"), \".\", React.createElement(_components.br), \"\\n\", \"Pourtant, TS détecte que le type de \", React.createElement(_components.code, null, \"title\"), \" est \", React.createElement(_components.code, null, \"string\"), \"... Mais au niveau de l'objet \", React.createElement(_components.code, null, \"body\"), \", ça n'est pas le cas...\", React.createElement(_components.br), \"\\n\", \"On peut retenir cela : \", React.createElement(_components.strong, null, \"en TS, la réduction de type des propriétés d'un objet ne réduit pas le type de l'objet lui-même.\")), \"\\n\", React.createElement(_components.p, null, \"Nous ne pourrions pas écrire :\"), \"\\n\", React.createElement(_components.pre, {\n    numbered: true,\n    highlighting: \"16\"\n  }, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"router.post(\\\"/\\\", (req, res) => {\\n  const body: unknown = req.body;\\n  if (\\n    !body ||\\n    typeof body !== \\\"object\\\" ||\\n    !(\\\"title\\\" in body) ||\\n    !(\\\"content\\\" in body) ||\\n    typeof body.title !== \\\"string\\\" ||\\n    typeof body.content !== \\\"string\\\" ||\\n    !body.title.trim() ||\\n    !body.content.trim()\\n  ) {\\n    return res.sendStatus(400);\\n  }\\n\\nconst { title, content } : NewPizza = body;\\n//...\\n\")), \"\\n\", React.createElement(_components.p, null, \"Ce code ne transpile pas car TS ne peut pas garantir que \", React.createElement(_components.code, null, \"title\"), \" et \", React.createElement(_components.code, null, \"content\"), \" sont bien de type \", React.createElement(_components.code, null, \"string\"), \" après la vérification de type. Comme vu précédemment, \", React.createElement(_components.code, null, \"body\"), \" est complexe et TS ne peut pas réduire le type de \", React.createElement(_components.code, null, \"body\"), \" à \", React.createElement(_components.code, null, \"NewPizza\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"Dès lors, dans ce cas, comme on est sûr du type, on pourrait utiliser une assertion de type pour réduire le type de \", React.createElement(_components.code, null, \"body\"), \" à un type plus spécifique :\"), \"\\n\", React.createElement(_components.pre, {\n    numbered: true,\n    highlighting: \"16\"\n  }, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"router.post(\\\"/\\\", (req, res) => {\\n  const body: unknown = req.body;\\n  if (\\n    !body ||\\n    typeof body !== \\\"object\\\" ||\\n    !(\\\"title\\\" in body) ||\\n    !(\\\"content\\\" in body) ||\\n    typeof body.title !== \\\"string\\\" ||\\n    typeof body.content !== \\\"string\\\" ||\\n    !body.title.trim() ||\\n    !body.content.trim()\\n  ) {\\n    return res.sendStatus(400);\\n  }\\n\\n  const { title, content } = body as NewPizza;\\n  //...\\n\")), \"\\n\", React.createElement(_components.p, null, \"👍 Ici, \", React.createElement(_components.code, null, \"body\"), \" est réduit à \", React.createElement(_components.code, null, \"NewPizza\"), \" via une assertion de type. C'est une solution robuste qui peut aussi être utilisée dans ce cours. L'avantage par rapport au même code mais sans l'assertion de type (\", React.createElement(_components.code, null, \"as NewPizza\"), \"), c'est que TS informera le développeur si \", React.createElement(_components.code, null, \"body\"), \" n'est plus de type \", React.createElement(_components.code, null, \"NewPizza\"), \" à la transpilation/compilation.\"), \"\\n\", React.createElement(_components.p, null, \"💭 En effet, si le type \", React.createElement(_components.code, null, \"NewPizza\"), \" venait à changer (si l'on ajoutait une propriété par exemple), alors le linter afficherait qu'il manque une propriété partout où ce type est utilisé.\", React.createElement(_components.br), \"\\n\", \"Par exemple, si on ajoute une propriété \", React.createElement(_components.code, null, \"price\"), \" à \", React.createElement(_components.code, null, \"NewPizza\"), \", alors TS afficherait une erreur à la ligne 16 car \", React.createElement(_components.code, null, \"body\"), \" n'a pas de propriété \", React.createElement(_components.code, null, \"price\"), \".\"), \"\\n\", React.createElement(_components.h2, null, \"🍬 Réduction de type du body d'une requête : fonction de type \\\"guard\\\"\"), \"\\n\", React.createElement(_components.p, null, \"Parfois, on souhaiterait que TypeScript puisse inférer le type de \", React.createElement(_components.code, null, \"req.body\"), \" sans avoir à le typer explicitement (avec \", React.createElement(_components.code, null, \"as\"), \").\"), \"\\n\", React.createElement(_components.p, null, \"La seule façon actuelle de le faire est de créer une \", React.createElement(_components.strong, null, \"fonction de type \\\"guard\\\"\"), \" qui permet de vérifier si un objet a les propriétés \", React.createElement(_components.code, null, \"title\"), \" et \", React.createElement(_components.code, null, \"content\"), \" et que ces propriétés sont des chaînes de caractères non vides.\"), \"\\n\", React.createElement(_components.p, null, \"Une \", React.createElement(_components.strong, null, \"fonction de type \\\"guard\\\"\"), \" retourne un type qui est un \\\"predicate\\\", un type qui permet de vérifier si une valeur est d'un certain type.\"), \"\\n\", React.createElement(_components.p, null, \"Par exemple, on pourrait créer une fonction \", React.createElement(_components.code, null, \"isNewPizza\"), \" qui vérifie si un objet a les propriétés \", React.createElement(_components.code, null, \"title\"), \" et \", React.createElement(_components.code, null, \"content\"), \" et que ces propriétés sont des chaînes de caractères non vides.\", React.createElement(_components.br), \"\\n\", React.createElement(_components.code, null, \"isNewPizza\"), \" retournerait un type prédicat \", React.createElement(_components.code, null, \"body is NewPizza\"), \" qui  permettrait à TypeScript de reconnaître que \", React.createElement(_components.code, null, \"req.body\"), \" est de type \", React.createElement(_components.code, null, \"NewPizza\"), \". Imaginez cette fonction définie dans un fichier \", React.createElement(_components.code, null, \"/src/utils/type-guards.ts\"), \" :\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"const isNewPizza = (body: unknown): body is NewPizza => {\\nif (\\n  !body ||\\n  typeof body !== \\\"object\\\" ||\\n  !(\\\"title\\\" in body) ||\\n  !(\\\"content\\\" in body) ||\\n  body.title !== \\\"string\\\" ||\\n  body.content !== \\\"string\\\" ||\\n  !body.title.trim() ||\\n  !body.content.trim()\\n) {\\n  return false;\\n}\\n\\nreturn true;\\n};\\n\")), \"\\n\", React.createElement(_components.p, null, \"Ensuite, on pourrait utiliser cette fonction pour réduire le type de \", React.createElement(_components.code, null, \"req.body\"), \" à \", React.createElement(_components.code, null, \"NewPizza\"), \" :\"), \"\\n\", React.createElement(_components.pre, {\n    numbered: true,\n    highlighting: \"2\"\n  }, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"router.post(\\\"/\\\", (req, res) => {\\n  if(!isNewPizza(req.body)) return res.sendStatus(400);\\n  const { title, content } : NewPizza = body;\\n  //...\\n\")), \"\\n\", React.createElement(_components.p, null, \"Pour ce cours, nous avons choisi de ne pas mettre les fonctions de type guard en avant car même si cela offre un code concis et lisible, cela implique une compréhension approfondie de TS qui dépasse les objectifs de ce cours.\"), \"\\n\", React.createElement(_components.h1, null, React.createElement(InternalPageTitle, null, \" Comment en savoir plus sur TS ? \")), \"\\n\", React.createElement(_components.p, null, \"Si vous souhaitez en savoir plus sur ce langage, nous vous recommandons de consulter la documentation en ligne de \", React.createElement(_components.a, {\n    href: \"https://www.typescriptlang.org\"\n  }, \"typescriptlang.org\"), \".\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/Users/raphaelbaroni/code/web2/ts-repos/web2/src/mdx-pages/part0/ts-language.fr.mdx\";\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport {MDXProvider} from '@mdx-js/react';\nimport {Link} from 'gatsby';\nimport MainLayout from '../components/main-layout.js';\nimport Image from '../components/image.js';\nimport Section from '../components/section.js';\nimport Content from '../components/content.js';\nimport Background from '../components/background.js';\nimport SectionHeader from '../components/section-header.js';\nimport SectionFooter from '../components/section-footer.js';\nimport PageHeader from '../components/page-header.js';\nimport {withFrontmatter} from '../components/hoc/hoc.js';\nimport CodeBlock from '../components/codeblock/codeblock.js';\nimport LinkFile from '../components/file/link-file.js';\nimport ScrollableImage from '../components/image/scrollable-image';\nimport PublicProjectsView from '../components/public-projects/public-projects-view';\nimport {AuthenticatedTemplate, UnauthenticatedTemplate} from '@azure/msal-react';\nimport AuthenticatedBlock from '../components/auth/authenticated-block.js';\nimport UnAuthenticatedBlock from '../components/auth/unauthenticated-block.js';\nimport NestedMdxBlock from '../components/mdx/nested-mdx-block.js';\nimport YoutubeImage from '../components/image/youtube-image.js';\nimport InternalPageMenu from '../components/internal-page-menu/internal-page-menu.js';\nimport InternalPageMenuItem from '../components/internal-page-menu/internal-page-menu-item.js';\nimport InternalPageTitle from '../components/internal-page-menu/menu-title.js';\nimport {PathViewer, PathViewerItem} from '../components/path-viewer/path-viewer.js';\nimport DownloadGitFolder from '../components/download-git-folder-link/DownloadGitFolder.js';\nconst shortcodes = {\n  Link,\n  Image,\n  Section,\n  Content,\n  Background,\n  SectionHeader,\n  SectionFooter,\n  PageHeader,\n  CodeBlock,\n  LinkFile,\n  ScrollableImage,\n  PublicProjectsView,\n  AuthenticatedBlock,\n  UnAuthenticatedBlock,\n  NestedMdxBlock,\n  YoutubeImage,\n  InternalPageMenu,\n  InternalPageMenuItem,\n  InternalPageTitle,\n  PathViewer,\n  PathViewerItem,\n  DownloadGitFolder\n};\nfunction PageTemplate({data: {mdx, allImages}, children}) {\n  shortcodes.PageHeader = withFrontmatter(PageHeader, mdx?.frontmatter);\n  return React.createElement(MainLayout, Object.assign({}, mdx?.frontmatter ? {\n    frontmatter: mdx.frontmatter\n  } : {}, mdx?.frontmatter?.navbarExtraStyles ? {\n    navbarExtraStyles: mdx.frontmatter.navbarExtraStyles\n  } : {}, mdx?.frontmatter?.headerImage ? {\n    headerImage: mdx.frontmatter.headerImage\n  } : {}, mdx?.frontmatter?.featuredImage ? {\n    featuredImage: mdx.frontmatter.featuredImage\n  } : {}, mdx?.frontmatter?.title ? {\n    pageTitle: mdx.frontmatter.title\n  } : {}, allImages && allImages.length > 0 ? {\n    allImages: allImages\n  } : {}), React.createElement(MDXProvider, {\n    components: shortcodes\n  }, React.createElement(\"div\", {\n    className: mdx?.frontmatter?.autoMargin ? 'page page--auto-margin ' : 'page'\n  }, children)));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PageTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const pageQuery = graphql`\n  query pagesAndImages($slug: String) {\n    mdx(fields: { slug: { eq: $slug } }) {\n      id\n      body\n      fields {\n        slug\n      }\n\n      frontmatter {\n        title\n        date\n        navbarExtraStyles\n        headerImage\n        featuredImage\n        description\n        autoMargin\n      }\n    }\n    allImages: allFile(\n      filter: {\n        sourceInstanceName: { eq: \"images\" }\n        extension: { nin: [\"ico\", \"svg\"] }\n      }\n    ) {\n      edges {\n        node {\n          childImageSharp {\n            gatsbyImageData(\n              quality: 90\n              layout: FULL_WIDTH\n              placeholder: TRACED_SVG\n              tracedSVGOptions: { color: \"green\", background: \"grey\" }\n            )\n          }\n          base\n        }\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","strong","a","br","code","ul","li","h2","pre","h3","h4","_provideComponents","components","InternalPageMenu","PathViewer","PathViewerItem","InternalPageMenuItem","InternalPageTitle","_missingMdxReference","React","to","selected","href","className","numbered","highlighting","wrapper","MDXLayout","id","component","Error","shortcodes","Link","Image","Section","Content","Background","SectionHeader","SectionFooter","PageHeader","CodeBlock","LinkFile","ScrollableImage","PublicProjectsView","AuthenticatedBlock","UnAuthenticatedBlock","NestedMdxBlock","YoutubeImage","DownloadGitFolder","PageTemplate","_ref","_mdx$frontmatter","_mdx$frontmatter2","_mdx$frontmatter3","_mdx$frontmatter4","_mdx$frontmatter5","data","mdx","allImages","children","withFrontmatter","frontmatter","MainLayout","navbarExtraStyles","headerImage","featuredImage","title","pageTitle","length","MDXProvider","autoMargin","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}