{"version":3,"file":"9d92d307e8f824a8549e6192aa2e0178007be8e8-7cba4d37a4b5d5492e6c.js","mappings":"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","sources":["webpack://myjscourse/./src/components/content-editable/content-editable.js","webpack://myjscourse/./src/components/context/projects/project-data-context.js","webpack://myjscourse/./src/components/context/reviews/review-data-context.js","webpack://myjscourse/./src/components/reviews/my-reviews-summary.js","webpack://myjscourse/./src/components/reviews/project-reviews-summary.js","webpack://myjscourse/./src/components/quote/quote.js","webpack://myjscourse/./src/components/reviews/review-card.js","webpack://myjscourse/./src/components/spinner/spinner.js","webpack://myjscourse/./src/utils/api/fetch.js","webpack://myjscourse/./src/utils/auths/use-id-token.js","webpack://myjscourse/./src/utils/string/string.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport he from 'he';\r\n\r\n/**\r\n * Make a div editable with text (could also be some HTML if needed).\r\n * @param {startContent} String to be used when the content is being updated\r\n * @param {children} React elements to be used when the content is not being updated\r\n * @returns\r\n */\r\n\r\nconst ContentEditable = ({\r\n  className,\r\n  isBeingEdited,\r\n  onChange,\r\n  startContent,\r\n  id,\r\n  isInline,\r\n  children,\r\n}) => {\r\n  //const [content, setContent] = useState(startContent);\r\n\r\n  const handleChange = (e) => {\r\n    const propUpdated = {};\r\n    propUpdated[id] = e.currentTarget.textContent;\r\n    // set state at parent level\r\n    onChange(propUpdated);\r\n  };\r\n\r\n  let currentContent;\r\n  if (isBeingEdited)\r\n    currentContent = startContent\r\n      ? he.decode(startContent)\r\n      : ''; \r\n  else if (children) currentContent = children;\r\n  else if (startContent)\r\n    currentContent = startContent ? he.decode(startContent) : '';\r\n\r\n  let allClasses;\r\n  allClasses = className ? className : '';\r\n  if (isBeingEdited)\r\n    allClasses += ' index__card__content__description--is-being-edited';\r\n  if (isInline) allClasses += ' index__card__content__description--is-inline';\r\n\r\n  return (\r\n    <div\r\n      className={allClasses}\r\n      contentEditable={isBeingEdited ? true : false}\r\n      onInput={handleChange}\r\n      suppressContentEditableWarning={true}\r\n    >\r\n      {currentContent}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContentEditable;\r\n","import React, { useContext, useState } from 'react';\r\nimport callAPI from '../../../utils/api/fetch';\r\nimport { useMsal } from '@azure/msal-react';\r\nimport { getAsyncIdToken } from '../../../utils/auths/use-id-token';\r\n\r\nconst ProjectDataContext = React.createContext([\r\n  {},\r\n  () => {},\r\n  {},\r\n  () => {},\r\n  {},\r\n  () => {},\r\n  {},\r\n  () => {},\r\n]);\r\n\r\nconst ProjectDataProvider = ({ children }) => {\r\n  const [projectGroupData, setProjectGroupData] = useState(undefined);\r\n  const [userData, setUserData] = useState(undefined);\r\n  const [projectData, setProjectData] = useState(undefined);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  return (\r\n    <ProjectDataContext.Provider\r\n      value={[\r\n        projectGroupData,\r\n        setProjectGroupData,\r\n        userData,\r\n        setUserData,\r\n        projectData,\r\n        setProjectData,\r\n        isLoaded,\r\n        setIsLoaded,\r\n      ]}\r\n    >\r\n      {children}\r\n    </ProjectDataContext.Provider>\r\n  );\r\n};\r\n\r\nconst useProjectData = () => {\r\n  const { instance, accounts } = useMsal();\r\n\r\n  const [\r\n    projectGroupData,\r\n    setProjectGroupData,\r\n    userData,\r\n    setUserData,\r\n    projectData,\r\n    setProjectData,\r\n    isLoaded,\r\n    setIsLoaded,\r\n  ] = useContext(ProjectDataContext);\r\n\r\n  const updateProjectGroupData = async (associatedProjectGroupName) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const tempProjectGroup = await callAPI(\r\n        `projectgroups/${associatedProjectGroupName}`,\r\n        'get',\r\n        idToken,\r\n        undefined\r\n      );\r\n      setProjectGroupData(tempProjectGroup);\r\n      console.log('STATE NOW ????', tempProjectGroup);\r\n      return tempProjectGroup;\r\n    } catch (err) {\r\n      console.error('useProjectData:error:', err);\r\n    }\r\n  };\r\n\r\n  const updateUserData = async (associatedProjectGroupName) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const tempUser = await callAPI(\r\n        `users/role/?projectgroupname=${associatedProjectGroupName}`,\r\n        'get',\r\n        idToken,\r\n        undefined\r\n      );\r\n      setUserData(tempUser);\r\n      return tempUser;\r\n    } catch (err) {\r\n      console.error('useProjectData:updateUserData:error:', err);\r\n    }\r\n  };\r\n\r\n  const updateProjectData = async (projectGroupName) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      setIsLoaded(false);\r\n      let tempProject = await callAPI(\r\n        'projects/projectgroups/' + projectGroupName,\r\n        'get',\r\n        idToken,\r\n        undefined\r\n      );\r\n      setProjectData(tempProject);\r\n      console.log('project array updated', tempProject);\r\n      setIsLoaded(true);\r\n      return tempProject;\r\n    } catch (err) {\r\n      console.error('useProjectData:updateProjectDataerror:', err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Add one project to an existing projectGroupName !\r\n   * @param {*} projectGroupName\r\n   */\r\n  const addOneProject = async (projectGroupName) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const newProject = await callAPI('projects', 'post', idToken, {\r\n        projectGroupName,\r\n      });\r\n      //return await updateProjectData(projectGroupName);\r\n      return newProject;\r\n    } catch (err) {\r\n      console.error('useProjectData:addOneProject:error:', err);\r\n    }\r\n  };\r\n\r\n  const deleteOneProject = async (project) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const deletedProject = await callAPI(\r\n        'projects/' + project._id,\r\n        'DELETE',\r\n        idToken,\r\n        undefined\r\n      );\r\n      //return await updateProjectData(projectGroupName);\r\n      return deletedProject;\r\n    } catch (err) {\r\n      console.error('useProjectData:deleteOneProject:error:', err);\r\n    }\r\n  };\r\n\r\n  const addMemberToProject = async (project) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const projectUpdated = await callAPI(\r\n        'projects/' + project._id + '/member',\r\n        'POST',\r\n        idToken,\r\n        undefined\r\n      );\r\n\r\n      return projectUpdated;\r\n    } catch (err) {\r\n      console.error('useProjectData:addMemberToProject:error:', err);\r\n    }\r\n  };\r\n\r\n  const deleteMemberFromProject = async (project) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const projectUpdated = await callAPI(\r\n        'projects/' + project._id + '/member',\r\n        'DELETE',\r\n        idToken,\r\n        undefined\r\n      );\r\n\r\n      return projectUpdated;\r\n    } catch (err) {\r\n      console.error('useProjectData:deleteMemberFromProject:error:', err);\r\n    }\r\n  };\r\n\r\n  const updateProject = async (data, id) => {\r\n    console.log('project to be updated:', data);\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const projectUpdated = await callAPI(\r\n        'projects/' + id,\r\n        'PATCH',\r\n        idToken,\r\n        data\r\n      );\r\n\r\n      console.log('project updated:', projectUpdated);\r\n      return projectUpdated;\r\n    } catch (err) {\r\n      console.error('useProjectData:updateProject:error:', err);\r\n    }\r\n  };\r\n\r\n  return {\r\n    ...{\r\n      projectGroupData,\r\n      updateProjectGroupData,\r\n      userData,\r\n      updateUserData,\r\n      projectData,\r\n      updateProjectData,\r\n      addOneProject,\r\n      deleteOneProject,\r\n      addMemberToProject,\r\n      deleteMemberFromProject,\r\n      updateProject,\r\n      isLoaded,\r\n      setIsLoaded,\r\n    },\r\n  };\r\n};\r\n\r\nexport { ProjectDataProvider, useProjectData };\r\n","import React, { useContext, useState } from \"react\";\r\nimport callAPI from \"../../../utils/api/fetch\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { getAsyncIdToken } from \"../../../utils/auths/use-id-token\";\r\n\r\nconst ReviewDataContext = React.createContext([\r\n  {},\r\n  () => {},\r\n  {},\r\n  () => {},\r\n  false, // isLoaded = false by default\r\n  () => {},\r\n]);\r\n\r\nconst ReviewDataProvider = ({ children }) => {\r\n  const [myReviewSummaryData, setMyReviewSummaryData] = useState(undefined);\r\n  const [allReviewsData, setAllReviewsData] = useState(undefined);\r\n  const [myReviewsData, setMyReviewsData] = useState(undefined);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  return (\r\n    <ReviewDataContext.Provider\r\n      value={[\r\n        myReviewSummaryData,\r\n        setMyReviewSummaryData,\r\n        allReviewsData,\r\n        setAllReviewsData,\r\n        myReviewsData,\r\n        setMyReviewsData,\r\n        isLoaded,\r\n        setIsLoaded,\r\n      ]}\r\n    >\r\n      {children}\r\n    </ReviewDataContext.Provider>\r\n  );\r\n};\r\n\r\nlet updateOperationCount = 0;\r\n\r\nconst useReviewData = () => {\r\n  const { instance, accounts } = useMsal();\r\n\r\n  const [\r\n    myReviewSummaryData,\r\n    setMyReviewSummaryData,\r\n    allReviewsData,\r\n    setAllReviewsData,\r\n    myReviewsData,\r\n    setMyReviewsData,\r\n    isLoaded,\r\n    setIsLoaded,\r\n  ] = useContext(ReviewDataContext);\r\n\r\n  const updateMyReviewSummaryData = async (userName, projectGroupName) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const myReviewSummary = await callAPI(\r\n        `reviews/users/${userName}/projectgroups/${projectGroupName}/count`,\r\n        \"get\",\r\n        idToken,\r\n        undefined\r\n      );\r\n      setMyReviewSummaryData(myReviewSummary);\r\n\r\n      return myReviewSummary;\r\n    } catch (err) {\r\n      console.error(\"useReviewData:updateMyReviewSummaryData:error:\", err);\r\n    }\r\n  };\r\n\r\n  const updateMyReviewsData = async (userName, projectGroupName) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      setIsLoaded(false);      \r\n      const myReviews = await callAPI(\r\n        `reviews/users/${userName}/projectgroups/${projectGroupName}`,\r\n        \"get\",\r\n        idToken,\r\n        undefined\r\n      );\r\n      setMyReviewsData(myReviews);\r\n      setIsLoaded(true);\r\n      return myReviews;\r\n    } catch (err) {\r\n      setIsLoaded(true);\r\n      console.error(\"useReviewData:updateMyReviewsData:error:\", err);\r\n    }\r\n  };\r\n\r\n  const updateAllReviewsData = async (projectGroupName) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      setIsLoaded(false);\r\n      updateOperationCount++;\r\n      const allReviews = await callAPI(\r\n        `reviews/projectgroups/${projectGroupName}/summary`,\r\n        \"get\",\r\n        idToken,\r\n        undefined\r\n      );\r\n      setAllReviewsData(allReviews);      \r\n      setIsLoaded(true);\r\n      return allReviews;\r\n    } catch (err) {\r\n      setIsLoaded(true);\r\n      console.error(\"useReviewData:updateAllReviewsData:error:\", err);\r\n    }\r\n  };\r\n\r\n  const updateExpectedProjectReview = async (data, id) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const reviewUpdated = await callAPI(\r\n        \"reviews/\" + id,\r\n        \"PATCH\",\r\n        idToken,\r\n        data\r\n      );\r\n\r\n      return reviewUpdated;\r\n    } catch (err) {\r\n      console.error(\"useReviewData:updateProjectReview:error:\", err);\r\n    }\r\n  };\r\n\r\n  const createFreeProjectReview = async (data, id) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const newReview = await callAPI(\"reviews\", \"POST\", idToken, {\r\n        ...data,\r\n        projectId: id,\r\n      });\r\n\r\n      return newReview;\r\n    } catch (err) {\r\n      console.error(\"useReviewData:createFreeProjectReview:error:\", err);\r\n    }\r\n  };\r\n\r\n  return {\r\n    ...{\r\n      myReviewSummaryData,\r\n      updateMyReviewSummaryData,\r\n      allReviewsData,\r\n      updateAllReviewsData,\r\n      myReviewsData,\r\n      updateMyReviewsData,\r\n      updateExpectedProjectReview,\r\n      createFreeProjectReview,\r\n      isLoaded,\r\n      setIsLoaded,\r\n    },\r\n  };\r\n};\r\n\r\nexport { ReviewDataProvider, useReviewData };\r\n","import React from \"react\";\r\nimport { Link, useStaticQuery } from \"gatsby\";\r\nimport YoutubeImage from \"../image/youtube-image.js\";\r\nimport ReviewCard from \"./review-card\";\r\nimport he from \"he\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faHeart, faComment } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst MyReviewsSummary = ({ myReviewsSummary }) => {\r\n  if (!myReviewsSummary) return null;\r\n\r\n \r\n\r\n  return (\r\n    <div className=\"card card--dark-summary card--fill-wrapper\">\r\n      <div className=\"card__header\">Résumé de mes revues</div>\r\n\r\n      <div className=\"card__content card__content--long-titles\">\r\n        <div className=\"card__content__title\">Coups de coeurs disponibles</div>\r\n        <div className=\"card__content__description\">\r\n          <FontAwesomeIcon icon={faHeart} />\r\n          <span className=\"text--light\">{myReviewsSummary.availableLike}</span>\r\n        </div>\r\n\r\n        <div className=\"card__content__title\">Revues attendues</div>\r\n        <div className=\"card__content__description\">\r\n          <FontAwesomeIcon icon={faComment} className=\"card__content--orange\"/>\r\n          <span className=\"text--light\">{myReviewsSummary.expectedReviews}</span>\r\n        </div>\r\n\r\n        <div className=\"card__content__title\">Revues terminées</div>\r\n        <div className=\"card__content__description\">\r\n          <FontAwesomeIcon icon={faComment} />\r\n          <span className=\"text--light\">{myReviewsSummary.alreadyReviewed}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyReviewsSummary;\r\n","import React from \"react\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faHeart, faComment } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst ProjectReviewsSummary = ({ project }) => {\r\n  if (!project) return null;\r\n\r\n  return (\r\n    <div className=\"counter\">\r\n      <div className=\"\">\r\n        <FontAwesomeIcon icon={faHeart} className=\"counter__symbol counter__symbol--red\" />\r\n        <span className=\"text--light\">{project.countLiked}</span>\r\n      </div>\r\n\r\n      <div className=\"\">\r\n        <FontAwesomeIcon icon={faComment} className=\"counter__symbol counter__symbol--orange\" />\r\n        <span className=\"text--light\">{project.countExpected}</span>\r\n      </div>\r\n\r\n      <div className=\"\">\r\n        <FontAwesomeIcon icon={faComment} className=\"counter__symbol counter__symbol--green\" />\r\n        <span className=\"text--light\">{project.countReviews}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectReviewsSummary;\r\n","import React from \"react\";\r\nconst Quote = ({ content, author }) => {\r\n  return (\r\n    <div className=\"quote quote--close-to-others\">\r\n        <div className=\"quote__content quote__content--dark-and-wide\">\r\n      <q>{content}</q>\r\n      <br />\r\n      <i>\r\n        <small className=\"text--hand-written\">- {author}</small>\r\n      </i>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Quote;\r\n\r\n\r\n/*\r\n\r\n<q>{content}</q>\r\n      <br />\r\n      <i>\r\n        <small className=\"text--hand-written\">- {author}</small>\r\n      </i>\r\n      */","import React, { useState, useRef, useEffect } from \"react\";\r\nimport YoutubeImage from \"../image/youtube-image.js\";\r\nimport he from \"he\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faEye,\r\n  faMinusCircle,\r\n  faSave,\r\n  faTimes,\r\n  faCommentDots,\r\n  faTimesCircle,\r\n  faCheckCircle,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { getNamesFromEmail } from \"../../utils/string/string\";\r\nimport { useProjectData } from \"../context/projects/project-data-context\";\r\nimport ContentEditable from \"../content-editable/content-editable.js\";\r\nimport ProjectReviewsSummary from \"./project-reviews-summary.js\";\r\nimport { useReviewData } from \"../context/reviews/review-data-context.js\";\r\nimport Quote from \"../quote/quote.js\";\r\n\r\nconst ReviewCard = ({ project, setFilteredContents }) => {\r\n  const { accounts } = useMsal();\r\n  const userName = accounts?.[0].username; //getUserName(); SEE IF EXISTS !!!\r\n\r\n  let userReview;\r\n  // get the associated review of the authenticated user (from my reviews)\r\n  if (project.praise !== undefined) userReview = project;\r\n  // get the eventual associated review of the authenticated user (from all reviews)\r\n  else if (project.projectReviews && project.projectReviews.length > 0) {\r\n    userReview = project.projectReviews.find(\r\n      (element) => element.userName === userName\r\n    );\r\n  }\r\n\r\n  const [isBeingEdited, setIsBeingEdited] = useState(false);\r\n  const [like, setLike] = useState(userReview ? userReview.like : false);\r\n  const [projectUpdateState, setProjectUpdateState] = useState({});\r\n  const [isDetailed, setIsDetailed] = useState(false);\r\n\r\n  const detailedElementRef = useRef(null);\r\n\r\n  // Scroll to the element that is detailed or that is put back without details\r\n  useEffect(() => {\r\n    if (detailedElementRef.current && isDetailed) {\r\n      detailedElementRef.current.scrollIntoView();\r\n    }\r\n  }, [isDetailed]);\r\n\r\n  // Get state management functions from the provider\r\n  const {\r\n    userData,\r\n    //projectGroupData,\r\n    //projectData,\r\n  } = useProjectData();\r\n\r\n  const {\r\n    updateExpectedProjectReview,\r\n    createFreeProjectReview,\r\n    updateAllReviewsData,\r\n    updateMyReviewSummaryData,\r\n    updateMyReviewsData,\r\n    myReviewSummaryData,\r\n  } = useReviewData();\r\n\r\n  // Deal with events\r\n\r\n  const onProjectUpdateRequest = () => {\r\n    setIsBeingEdited(true);\r\n  };\r\n\r\n  const onQuitProjectUpdateRequest = () => {\r\n    setIsBeingEdited(false);\r\n    // clear the update state\r\n    setProjectUpdateState({});\r\n  };\r\n\r\n  const onProjectSave = async () => {\r\n    /* save the updated state via the API only if :\r\n    the state object is not empty\r\n    each expected state property exists OR is given in the props*/\r\n    if (Object.keys(projectUpdateState).length === 0) return;\r\n\r\n    if (!projectUpdateState.praise && (!userReview || !userReview.praise))\r\n      return;\r\n\r\n    if (\r\n      !projectUpdateState.notImpressed &&\r\n      (!userReview || !userReview.notImpressed)\r\n    )\r\n      return;\r\n\r\n    /*\r\n    Determine if it's the update of an expected review or if it is\r\n    the creation of a new review :\r\n    */\r\n\r\n    let updatedProject;\r\n    if (userReview) {\r\n      updatedProject = await updateExpectedProjectReview(\r\n        projectUpdateState,\r\n        userReview._id\r\n      );\r\n    } else {\r\n      updatedProject = await createFreeProjectReview(\r\n        projectUpdateState,\r\n        project._id\r\n      );\r\n    }\r\n    // clear the project update state\r\n    setProjectUpdateState({});\r\n    setIsBeingEdited(false);\r\n    // update all review state to re-render\r\n    if (updatedProject) {\r\n      await updateAllReviewsData(project.projectGroupName);\r\n      await updateMyReviewSummaryData(\r\n        userData.userName,\r\n        project.projectGroupName\r\n      );\r\n      await updateMyReviewsData(userData.userName, project.projectGroupName);\r\n      setFilteredContents(undefined);\r\n    }\r\n    // }\r\n  };\r\n\r\n  const onViewDetails = () => {\r\n    setIsDetailed(true);\r\n  };\r\n\r\n  const onQuitViewDetails = () => {\r\n    setIsDetailed(false);\r\n  };\r\n\r\n  // deal with modification of content\r\n  const handleChange = (propChanged) => {\r\n    // update the projectState\r\n    setProjectUpdateState((previousState) => {\r\n      return { ...previousState, ...propChanged };\r\n    });\r\n  };\r\n\r\n  const onSetLike = (e) => {\r\n    setLike(!like);\r\n    setProjectUpdateState({\r\n      ...projectUpdateState,\r\n      ...{ like: !like },\r\n    });\r\n  };\r\n\r\n  if (!project) return null;\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        \"index__card\" +\r\n        (isBeingEdited\r\n          ? \" index__card--is-being-edited\"\r\n          : \"\" + (isDetailed ? \" index--long-text\" : \"\"))\r\n      }\r\n      ref={detailedElementRef}\r\n    >\r\n      <div className=\"index__card__header\">\r\n        <span>\r\n          {\"Projet N° \" + project.shortId + \" : \" + he.decode(project.name)}\r\n        </span>\r\n      </div>\r\n\r\n      <div className=\"index__card__header\">\r\n        <ProjectReviewsSummary project={project} />\r\n      </div>\r\n\r\n      <div className=\"index__card__description\">\r\n        {\r\n          /* ADD REVIEW : visible only if         \r\n          the username is not part of the projectMembers AND\r\n          the review is not being edited    AND\r\n          the review is not detailed                \r\n          */\r\n\r\n          !project.projectMembers.includes(userName) &&\r\n          !isBeingEdited &&\r\n          !isDetailed ? (\r\n            <FontAwesomeIcon\r\n              icon={faCommentDots}\r\n              onClick={onProjectUpdateRequest}\r\n            />\r\n          ) : (\r\n            \"\"\r\n          )\r\n        }\r\n\r\n        {\r\n          /*SAVE PROJECT : Visible only if :\r\n        project is being edited       \r\n        */\r\n          isBeingEdited && (\r\n            <FontAwesomeIcon icon={faSave} onClick={onProjectSave} />\r\n          )\r\n        }\r\n\r\n        {\r\n          /*QUIT PROJECT UPDATE: Visible only if :\r\n        project is being edited       \r\n        */\r\n          isBeingEdited && (\r\n            <FontAwesomeIcon\r\n              icon={faTimes}\r\n              onClick={onQuitProjectUpdateRequest}\r\n            />\r\n          )\r\n        }\r\n\r\n        {\r\n          /*VIEW PROJECT REVIEWS DETAILED : Visible only if :\r\n        project is not being edited AND\r\n        project is not detailed AND \r\n        the user has no more expected reviews    \r\n        */\r\n          !isBeingEdited &&\r\n            !isDetailed &&\r\n            myReviewSummaryData &&\r\n            myReviewSummaryData.expectedReviews === 0 && (\r\n              <FontAwesomeIcon icon={faEye} onClick={onViewDetails} />\r\n            )\r\n        }\r\n\r\n        {\r\n          /*QUIT PROJECT REVIEWS DETAILED: Visible only if :\r\n        project is detailed      \r\n        */\r\n          isDetailed && (\r\n            <FontAwesomeIcon icon={faTimes} onClick={onQuitViewDetails} />\r\n          )\r\n        }\r\n      </div>\r\n\r\n      {/* Deal with telling if the project is reviewed. :\r\n        Tell that the review is impossible if the user is a member of this project \r\n        else\r\n        if there is no praise given, tell that the reviewed is not done\r\n        else tell that the review is done*/}\r\n\r\n      <div className=\"index__card__content\">\r\n        <div className=\"index__card__content__title\">Ma revue ?</div>\r\n        <div className=\"index__card__content__description\">\r\n          {project.projectMembers.includes(userName) ? (\r\n            <FontAwesomeIcon icon={faMinusCircle} />\r\n          ) : !userReview || ! userReview.praise || userReview.praise.length === 0 ? (\r\n            <FontAwesomeIcon icon={faTimesCircle} />\r\n          ) : (\r\n            <FontAwesomeIcon icon={faCheckCircle} />\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.description !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Description</div>\r\n            <div className=\"index__card__content__description\">\r\n              {he.decode(project.description)}\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.presentationUrl !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">\r\n              Vidéo de présentation\r\n            </div>\r\n\r\n            <div className=\"index__card__content__description\">\r\n              <YoutubeImage src={project.presentationUrl} />\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.frontendProductionUrl !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">URL du site</div>\r\n            <div className=\"index__card__content__description\">\r\n              <a href={project.frontendProductionUrl} target=\"_blank\">\r\n                {project.frontendProductionUrl}\r\n              </a>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      {/* Deals with praises : this shall be shown :\r\n      if the attribute exists OR\r\n      if the user is adding a review (equivalent to a project update) */}\r\n      <div className=\"index__card__content\">\r\n        {project.praise !== undefined || isBeingEdited ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Mes points forts</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"praise\"\r\n              startContent={userReview ? userReview.praise : \"\"}\r\n              onChange={handleChange}\r\n            />\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      {/* Deals with notImpressed points : this shall be shown :\r\n      if the attribute exists OR\r\n      if the user is adding a review (equivalent to a project update) */}\r\n      <div className=\"index__card__content\">\r\n        {project.notImpressed !== undefined || isBeingEdited ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">\r\n              Mes points d'amélioration\r\n            </div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"notImpressed\"\r\n              startContent={userReview ? userReview.notImpressed : \"\"}\r\n              onChange={handleChange}\r\n            />\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.frontendRepo !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Repo frontend</div>\r\n\r\n            <div className=\"index__card__content__description\">\r\n              <a href={project.frontendRepo} target=\"_blank\">\r\n                {project.frontendRepo}\r\n              </a>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.backendRepo !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Repo backend</div>\r\n            <div className=\"index__card__content__description\">\r\n              <a href={project.backendRepo} target=\"_blank\">\r\n                {project.backendRepo}\r\n              </a>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      {/* Deal with project members : show only if :\r\n      there are project members AND \r\n      project review is detailed */}\r\n      <div className=\"index__card__content\">\r\n        {project.projectMembers !== undefined &&\r\n        project.projectMembers.length > 0 &&\r\n        isDetailed ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Membres du projet</div>\r\n            <div className=\"index__card__content__description\">\r\n              {project.projectMembers\r\n                .map((member) => getNamesFromEmail(member))\r\n                .join(\", \")}\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      {/* Deal with Like \r\n      allow a Like to be edited from false to true (a heart cannot be removed) \r\n      only when the user has still like to be given\r\n      the state provides the info to ensure that we disable only when we load the component\r\n      (because we want to allow updating like prior to click on save)\r\n      NB : this shall be shown :\r\n      if the attribute exists OR\r\n      if the user is adding a review (equivalent to a project update) */}\r\n      <div className=\"index__card__content\">\r\n        {(project.like !== undefined) | isBeingEdited ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Favori ?</div>\r\n            <div className=\"index__card__content__description\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={like}\r\n                disabled={\r\n                  !isBeingEdited || myReviewSummaryData.availableLike === 0\r\n                    ? true\r\n                    : like && !projectUpdateState.like\r\n                    ? true\r\n                    : false\r\n                }\r\n                onClick={onSetLike}\r\n              />\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      {/* Deal with all praises : show only if :      \r\n      project review is detailed AND\r\n      there are user reviews for this project*/}\r\n\r\n      {isDetailed && project.projectReviews && project.projectReviews.length > 0\r\n        ? project.projectReviews.map((review, index) => (\r\n            <div className=\"index__card__content\">\r\n              <div className=\"index__card__content__title\">\r\n                {index === 0 ? \"Tous les points forts\" : \"\"}\r\n              </div>\r\n              <div className=\"index__card__content__description\">\r\n                <Quote\r\n                  content={he.decode(review.praise)}\r\n                  author={getNamesFromEmail(review.userName)}\r\n                />\r\n              </div>\r\n            </div>\r\n          ))\r\n        : \"\"}\r\n\r\n      {/* Deal with all improvements : show only if :      \r\n      project review is detailed AND\r\n      there are user reviews for this project*/}\r\n\r\n      {isDetailed && project.projectReviews && project.projectReviews.length > 0\r\n        ? project.projectReviews.map((review, index) => (\r\n            <div className=\"index__card__content\">\r\n              <div className=\"index__card__content__title\">\r\n                {index === 0 ? \"Tous les points d'amélioration\" : \"\"}\r\n              </div>\r\n              <div className=\"index__card__content__description\">\r\n                <Quote\r\n                  content={he.decode(review.notImpressed)}\r\n                  author={getNamesFromEmail(review.userName)}\r\n                />\r\n              </div>\r\n            </div>\r\n          ))\r\n        : \"\"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReviewCard;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { fas, faSpinner } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinner\">\r\n      <div className=\"spinner__overlay\"></div>\r\n      <div className=\"spinner__animation\">\r\n        <FontAwesomeIcon icon={faSpinner} className=\"fa-3x fa-spin\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","// Helper function to call our API\r\n// using authorization bearer token scheme\r\nexport default async function callAPI(endpoint, method = \"get\", token, data) {\r\n  let headers = new Headers();\r\n  let options = {};\r\n  options.method = method;\r\n\r\n  console.log(\"token :\", token);\r\n\r\n  if (token) {\r\n    const bearer = `Bearer ${token}`;\r\n    headers.append(\"Authorization\", bearer);\r\n  }\r\n\r\n  if (data) {\r\n    options.body = JSON.stringify(data);\r\n  }\r\n\r\n  if (\r\n    method.toLowerCase() === \"post\" ||\r\n    method.toLowerCase() === \"patch\" ||\r\n    method.toLowerCase() === \"put\"\r\n  )\r\n    headers.append(\"Content-Type\", \"application/json\");\r\n  options.headers = headers;  \r\n  const url = process.env.GATSBY_API_URL + endpoint;\r\n  console.log(\r\n    \"request made to API at: \" + new Date().toString(),\r\n    \"URL:\",\r\n    url,\r\n    \"Options:\",\r\n    options\r\n  );\r\n  try {\r\n    const response = await fetch(url, options);\r\n\r\n    if (!response.ok) {\r\n      let fullErrorMessage =\r\n        \" Error code : \" +\r\n        response.status +\r\n        \" : \" +\r\n        response.statusText +\r\n        \"/nMessage : \";\r\n      const textResponse = await response.text();\r\n      fullErrorMessage += textResponse;\r\n      console.error(\"fetch() error\", fullErrorMessage);\r\n      // deal with token expiration\r\n      if (fullErrorMessage.search(\"expired\") > -1) {\r\n        console.log(\"token expired\");\r\n      }\r\n      throw new Error(fullErrorMessage);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.log(\"error:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n","import { InteractionRequiredAuthError } from \"@azure/msal-browser\";\r\n\r\nasync function getAsyncIdToken(accounts, instance) {\r\n  if (accounts.length > 0) {\r\n    const request = {\r\n      scopes: [\"openid\"],\r\n      account: accounts[0],\r\n    };\r\n\r\n    try {\r\n      const response = await instance.acquireTokenSilent(request);\r\n      return response.idToken;\r\n    } catch (error) {\r\n      // acquireTokenSilent can fail for a number of reasons, fallback to interaction\r\n      if (error instanceof InteractionRequiredAuthError) {\r\n        const response2 = await instance.acquireTokenRedirect(request);\r\n        return response2.idToken;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport { getAsyncIdToken };\r\n","const getNamesFromEmail = (email) => {\r\n  let names = email.substring(0, email.indexOf(\"@\"));\r\n  let firstname = names.substring(0, names.indexOf(\".\"));\r\n  let lastname = names.substring(names.indexOf(\".\") + 1);\r\n  firstname = firstname.charAt(0).toUpperCase() + firstname.slice(1);\r\n  lastname = lastname.charAt(0).toUpperCase() + lastname.slice(1);\r\n  // deal with cases where Extra info is added to the name, when there is a second dot\r\n  if (lastname.indexOf(\".\") >= 0) {\r\n    lastname = lastname.substring(lastname.indexOf(\".\") + 1);\r\n    lastname = lastname.charAt(0).toUpperCase() + lastname.slice(1);\r\n  }\r\n  return firstname + \" \" + lastname;\r\n};\r\n\r\nexport { getNamesFromEmail };\r\n"],"names":["_ref","className","isBeingEdited","onChange","startContent","id","isInline","children","currentContent","allClasses","he","React","contentEditable","onInput","e","propUpdated","currentTarget","textContent","suppressContentEditableWarning","ProjectDataContext","ProjectDataProvider","projectGroupData","setProjectGroupData","useState","undefined","userData","setUserData","projectData","setProjectData","isLoaded","setIsLoaded","Provider","value","useProjectData","instance","accounts","useMsal","useContext","updateProjectGroupData","async","idToken","getAsyncIdToken","tempProjectGroup","callAPI","associatedProjectGroupName","err","console","error","updateUserData","tempUser","updateProjectData","tempProject","projectGroupName","addOneProject","deleteOneProject","project","_id","addMemberToProject","deleteMemberFromProject","updateProject","data","ReviewDataContext","ReviewDataProvider","myReviewSummaryData","setMyReviewSummaryData","allReviewsData","setAllReviewsData","myReviewsData","setMyReviewsData","useReviewData","updateMyReviewSummaryData","userName","myReviewSummary","updateAllReviewsData","allReviews","updateMyReviewsData","myReviews","updateExpectedProjectReview","createFreeProjectReview","projectId","myReviewsSummary","FontAwesomeIcon","icon","faHeart","availableLike","faComment","expectedReviews","alreadyReviewed","countLiked","countExpected","countReviews","content","author","setFilteredContents","username","userReview","praise","projectReviews","length","find","element","setIsBeingEdited","like","setLike","projectUpdateState","setProjectUpdateState","isDetailed","setIsDetailed","detailedElementRef","useRef","useEffect","current","scrollIntoView","handleChange","propChanged","previousState","ref","shortId","name","ProjectReviewsSummary","projectMembers","includes","faCommentDots","onClick","onProjectUpdateRequest","faSave","Object","keys","notImpressed","updatedProject","faTimes","onQuitProjectUpdateRequest","faEye","onViewDetails","onQuitViewDetails","faMinusCircle","faCheckCircle","faTimesCircle","description","presentationUrl","YoutubeImage","src","frontendProductionUrl","href","target","ContentEditable","frontendRepo","backendRepo","map","member","getNamesFromEmail","join","type","checked","disabled","review","index","Quote","Spinner","faSpinner","endpoint","method","token","headers","Headers","options","bearer","append","body","JSON","stringify","toLowerCase","url","process","response","fetch","ok","fullErrorMessage","status","statusText","text","search","Error","json","request","scopes","account","acquireTokenSilent","InteractionRequiredAuthError","acquireTokenRedirect","email","names","substring","indexOf","firstname","lastname","charAt","toUpperCase","slice"],"sourceRoot":""}