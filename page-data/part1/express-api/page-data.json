{"componentChunkName":"component---src-templates-mdx-pages-js-content-file-path-src-mdx-pages-part-1-express-api-fr-mdx","path":"/part1/express-api/","result":{"data":{"mdx":{"id":"32276a1b-58a1-5c69-98f8-d314920665e4","body":"\r\n# a) Introduction aux RESTful API\r\n\r\n<InternalPageMenu>\r\n  <PathViewer>\r\n    <PathViewerItem to=\"/\"> web2course </PathViewerItem>\r\n    <PathViewerItem to=\"/part1\"> Partie 1 </PathViewerItem>\r\n    <PathViewerItem selected> a) RESTful API </PathViewerItem>\r\n  </PathViewer>\r\n  <InternalPageMenuItem> Introduction aux RESTful API & conventions </InternalPageMenuItem>\r\n  <InternalPageMenuItem> D√©marrage d'une RESTful API en Express & TS </InternalPageMenuItem>\r\n  <InternalPageMenuItem> Les fonctions middleware en Express </InternalPageMenuItem>\r\n  <InternalPageMenuItem> D√©finition d'une route en Express </InternalPageMenuItem>\r\n  <InternalPageMenuItem> Op√©rations de lecture </InternalPageMenuItem> \r\n  <InternalPageMenuItem> Exercice 1.1 : lecture de toutes les ressources </InternalPageMenuItem>\r\n  <InternalPageMenuItem> Exercice 1.2 : middleware s'ex√©cutant sur toutes les routes </InternalPageMenuItem>\r\n  <InternalPageMenuItem> Utilisation du linter et du formatter pour TS </InternalPageMenuItem>\r\n  <InternalPageMenuItem> Param√®tres de route </InternalPageMenuItem>\r\n  <InternalPageMenuItem> Param√®tres de requ√™te </InternalPageMenuItem>\r\n  <InternalPageMenuItem> Op√©ration de cr√©ation & parsing du body </InternalPageMenuItem>\r\n  <InternalPageMenuItem> Client REST </InternalPageMenuItem>\r\n  <InternalPageMenuItem> Utilisation du debugger</InternalPageMenuItem>\r\n  <InternalPageMenuItem> Exercice 1.3 : lectures sp√©cifiques, cr√©ation & REST Client </InternalPageMenuItem>\r\n  <InternalPageMenuItem> üç¨ Exercice 1.4 : Gestion de la pagination, du tri et du filtrage </InternalPageMenuItem>\r\n  <InternalPageMenuItem> Codes de statut HTTP associ√©s aux r√©ponses </InternalPageMenuItem> \r\n  <InternalPageMenuItem> Exercice 1.5 : codes de statut HTTP </InternalPageMenuItem>\r\n  <InternalPageMenuItem> Op√©rations de suppression & de modification </InternalPageMenuItem>\r\n  <InternalPageMenuItem> Exercice 1.6 : suppression & modification de ressources </InternalPageMenuItem>\r\n</InternalPageMenu>\r\n\r\n# <InternalPageTitle> Introduction aux RESTful API & conventions </InternalPageTitle>\r\n## C'est quoi une application REST ?\r\n\r\n<div className=\"card card__simple-youtube-container\">\r\n    <YoutubeImage src=\"https://youtu.be/EIESrlEV-CQ\" />\r\n</div>\r\n\r\n**REST** vient de **RE**presentational **S**tate **T**ransfer : c'est un style architectural pour construire des applications web extensibles, o√π les client et serveurs sont s√©par√©s.\r\n\r\nDans une application REST, une **interface uniforme** (ou API) est d√©finie afin de permettre √† des applications de coop√©rer.\r\n\r\nToute application REST se doit d'√™tre **stateless** : il n'y a pas d'enregistrement du contexte d'une session sur le serveur pour comprendre une requ√™te d'un client.  \r\nAinsi, les requ√™tes clientes ne d√©pendent pas d'un historique de requ√™tes, chaque requ√™te contient tout l'information n√©cessaire au serveur.\r\n\r\nUne RESTful API met √† disposition des **op√©rations** sur des **ressources** via :\r\n- des **URI** ; il y a donc une adresse unique pur chaque ressource ;\r\n- des **m√©thodes HTTP** (GET, POST, DELETE, PATCH, PUT) repr√©sentant les op√©rations possibles ; on parle souvent d'op√©rations **CRUD**, des op√©rations de type **C**reate, **R**ead, **U**pdate ou **D**elete) ;\r\n- des **repr√©sentations** des ressources compr√©hensibles tant par les clients que les serveurs ; les ressources sont repr√©sent√©es par leur \"Media type\" : **JSON**, **XML**, **HTML**, **TXT**, **JPEG**... ; dans le cadre de ce cours, les ressources seront quasi toujours repr√©sent√©es via du **JSON**.\r\n\r\n## Conventions REST\r\n\r\n Le type d'op√©ration CRUD sur une ressource est d√©fini via la **m√©thode http** de la requ√™te.  \r\n Les op√©rations possibles sont :\r\n  - GET = Read\r\n  - POST = Create\r\n  - DELETE = Delete üòâ\r\n  - PATCH / PUT = Update\r\n    - PATCH = Update d'une ou plusieurs propri√©t√©(s) de la ressources\r\n    - PUT = Update de toutes les propri√©t√©s de la ressources, ou cr√©ation si la ressource n'existe pas\r\n    \r\nVoici un exemple d'application de ces conventions REST dans le cadre d'une RESTful API permettant de g√©rer des **posts** :\r\n\r\n| URI | M√©thode HTTP | Op√©ration |\r\n|---|---|---|\r\n| **`posts`** | GET | READ ALL : Lire toutes les ressources de la collection |\r\n| **`posts?userId=value`** | GET | READ ALL FILTERED : Lire toutes les ressources de la collection selon le filtre donn√© |\r\n| **`posts/{id}`** | GET | READ ONE : Lire la ressource identifi√©e |\r\n| **`posts`** | POST | CREATE ONE : Cr√©er une ressource bas√©e sur les donn√©es de la requ√™te |\r\n| **`posts/{id}`** | DELETE | DELETE ONE : Effacer la ressource identifi√©e |\r\n| **`posts/{id}`** | PUT | UPDATE ONE : Remplacer l'enti√®ret√© de la ressource par les donn√©es de la requ√™te |\r\n\r\n<br/>\r\n\r\nLors de l'ajout d'un post, si cette API est h√©berg√©e √† l'URL racine **https://jsonplaceholder.typicode.com/**, alors nous pourrions identifier une ressource de type **posts** de cette fa√ßon : **https://jsonplaceholder.typicode.com/posts/10**.\r\n\r\nPour lire cette ressource, il faudrait faire une requ√™te http de type **GET** sur cette **URL** : **https://jsonplaceholder.typicode.com/posts/10**.\r\n\r\n# <InternalPageTitle> D√©marrage d'une RESTful API en Express & TS  </InternalPageTitle>\r\n\r\n## Cr√©ation d'un projet √† partir d'un boilerplate\r\nNous allons maintenant d√©couvrir notre toute premi√®re RESTful API permettant de g√©rer les donn√©es associ√©es √† une pizzeria, afin de b√©n√©ficier d'op√©rations sur des ressources de type \"pizzas\" et de type \"drinks\".\r\n\r\nDans votre repo **web2**, veuillez cr√©er le r√©pertoire **`/tutorials/back/api`**.\r\n\r\nVeuillez ouvrir un terminal au niveau de ce r√©pertoire.\r\n\r\nDans ce r√©pertoire, veuillez g√©n√©rer une application express nomm√©e **basic** sur base du boilerplate : [basic-ts-api-boilerplate](https://github.com/e-vinci/basic-ts-api-boilerplate) [[R.51]](/references/#r51).  \r\nPour ce faire :\r\n\r\n```bash\r\ngit clone https://github.com/e-vinci/basic-ts-api-boilerplate basic\r\n```\r\n\r\nVeuillez installer les d√©pendances :\r\n```bash\r\ncd basic\r\nnpm i\r\n```\r\n\r\n‚ö° Comme vous avez fait un clone du boilerplate, attention au Git dans le Git, n'oubliez pas de supprimer le dossier **`.git`** pr√©sent dans votre nouveau projet.\r\n\r\nVeuillez jeter un oeil √† la structure du projet **`basic`**.\r\n\r\nNous d√©veloppons des RESTful API qui ne poss√®dent pas de serveur de fichiers statiques.  \r\nOn n'a donc pas besoin d'avoir un r√©pertoire **`/public`** ni d'un serveur statique (`express.static`).  \r\n\r\n## Fonctionnement d'une application Express\r\n\r\nNous allons maintenant nous attarder √† comprendre les concepts associ√©s √† l'utilisation d'Express, mais en focalisant sur ceux utiles aux applications REST.  \r\nVoici comment une requ√™te faite √† une application Express est trait√©e :\r\n\r\n<ScrollableImage name=\"express-flow.png\" minWidth=\"800px\" maxWidth=\"800px\" />\r\n\r\n<figcaption>Flux d'une requ√™te vers une application Express [R.51]</figcaption>\r\n\r\nDans ce flux de traitement d'une requ√™te, la responsabilit√© des d√©veloppeurs est de s'occuper de la partie \"Middleware\".\r\n\r\nLa grande majorit√© du code √©crit sera du \"routing middleware\" : notre code s'occupera de r√©pondre √† des requ√™tes clientes pour diff√©rentes URLs et m√©thodes HTTP (GET, POST...).\r\n\r\nOn l'a d√©j√† vu, la configuration d'une application Express, comme toutes applications Node.js, est faite au sein de **`package.json`**.\r\n\r\nEn fonction de comment est configur√© l'application, on la d√©marrera via **`npm start`**, **`npm run dev`**, **`npm run build`**...\r\n\r\nUn **serveur web int√©gr√©** √† nos applications Express est d√©marr√© au sein du fichier **`bin/www.ts`**.\r\n\r\nC'est ce fichier que vous devez mettre √† jour si par exemple vous souhaitez que votre application fonctionne sur un port diff√©rent que le port par d√©faut **`3000`**.\r\n\r\nUn serveur int√©gr√© est diff√©rent d'une application web offerte par un serveur standalone comme Apache, Tomcat... C'est un serveur tr√®s l√©ger d√©di√© √† votre application.\r\n\r\n# <InternalPageTitle> Les fonctions middleware en Express </InternalPageTitle>\r\n## C'est quoi une fonction middleware ?\r\n\r\nLes fonctions middleware s'occupent du traitement des requ√™tes des clients et de la pr√©paration des r√©ponses :\r\n\r\n<ScrollableImage name=\"middlewares.jpg\" minWidth=\"638px\" maxWidth=\"638px\" />\r\n\r\n<figcaption>Les fonctions Middleware et Express [R.52]</figcaption>\r\n\r\nUne fonction middleware a acc√®s aux objets de la requ√™te et de la r√©ponse et peut utiliser la requ√™te et la r√©ponse pour ajouter, par exemple, un log, pour autoriser un utilisateur, pour parser des donn√©es Json vers des objets TS/JS, pour servir des fichiers statiques, pour faire un traitement pour une route bien sp√©cifique...\r\n\r\nPar exemple, lors d'une op√©ration d'ajout d'une pizza, si une fonction middleware ne termine pas le cycle de requ√™te-r√©ponse, elle doit appeler **`next()`** pour permettre √† d'autres fonctions qui sont dans la queue de pouvoir √™tre ex√©cut√©es.\r\n\r\nVoici les √©l√©ments associ√©s √† l'appel d'une fonction middleware :\r\n\r\n<ScrollableImage name=\"middleware-function.png\" minWidth=\"944px\" maxWidth=\"944px\" />\r\n\r\n<figcaption>Une fonction middleware [R.53]</figcaption>\r\n\r\nIl existe diff√©rents types de fonctions middleware ayant diff√©rents cas d'utilisation :\r\n- **Application-level middleware** : la fonction middleware est li√©e √† l'objet **`app`** et peut s'appliquer √† toutes les requ√™tes.\r\n- **Router-level middleware** : la fonction middleware est li√©e √† un objet de type **`express.router()`** et est tr√®s similaire au \"application-level middleware\", mais ne s'applique qu'√† un groupe de requ√™tes.\r\n- **Error-handling middleware** : fonction de gestion des erreurs qui se d√©finit comme les fonctions ci-dessus (au niveau **`app`** ou **`router`**), mais qui contient un quatri√®me param√®tre nomm√© **`error`**.\r\n- **Built-in middleware** : fonctions middleware mises √† disposition par Express directement. En voici quelques exemples :\r\n  - **`express.static`** : pour servir des assets statiques ;\r\n  - **`express.json`** : pour parser le body de requ√™tes en JSON vers des objets JS ;\r\n  - **`express.urlencoded`** : pour parser des requ√™tes dont le body est de type \"urlencoded\" (type par d√©faut des formulaires) vers des objets TS/JS.\r\n- **Third-party middleware** : fonctions mises √† disposition par la communaut√© et installables via npm, comme par exemple la fonction middleware **`cookieParser`**.\r\n\r\nLa suite fournit quelques exemples de fonctions middleware qui seront soit plus tard rencontr√©es dans notre code, soit sont extraites de la documentation d'Express : [Using middleware](https://expressjs.com/en/guide/using-middleware.html) [[R.54]](/references/#r54).\r\n\r\n## Application-level middleware : exemple\r\nVoici une fonction middleware qui sera ex√©cut√©e √† chaque fois qu'il y a une requ√™te, quelque soit le chemin (ou path) associ√© √† la requ√™te :\r\n\r\n```js\r\nimport express from \"express\";\r\n\r\nconst app = express();\r\n\r\napp.use((_req, _res, next) => {\r\n  console.log(\r\n    \"Time:\",\r\n    new Date().toLocaleString(\"fr-FR\", { timeZone: \"Europe/Brussels\" })\r\n  );\r\n  next();\r\n});\r\n```\r\n\r\n## Router-level middleware : exemple\r\nVoici une partie du code qui pourrait se trouver au sein d'un router de pizzas, dans un fichier **`/routes/pizzas.ts`** :\r\n\r\n```js\r\nimport { Router } from \"express\";\r\nconst router = Router();\r\n\r\nrouter.use((_req, _res, next) => {\r\n  console.log(\r\n    \"Time:\",\r\n    new Date().toLocaleString(\"fr-FR\", { timeZone: \"Europe/Brussels\" })\r\n  );\r\n  next();\r\n});\r\n\r\nrouter.get(\"/\", (req, res) => {\r\n  return res.json(pizzas);\r\n});\r\n```\r\n\r\nLa premi√®re fonction middleware ne contient pas de m√©thode HTTP, ni de chemin, elle s'appliquerait donc √† toutes les routes associ√©es au router de pizzas.  \r\nVoici le code qui permettrait, dans **`/app.ts`**, d'appeler le router de pizzas :\r\n\r\n```js\r\nimport pizzaRouter from \"./routes/pizzas\";\r\napp.use('/pizzas', pizzaRouter);\r\n```\r\n\r\nLors de l'op√©ration de lecture de toutes les pizzas, si le router est utilis√© de cette fa√ßon, en relisant l'avant-dernier snippet, on voit que : \r\n- la premi√®re fonction (o√π il y a un `console.log`) s'applique donc √† toutes les routes qui commencent par **`/pizzas`** ;\r\n- la deuxi√®me fonction middleware s'appliquent seulement aux requ√™tes de type **`GET`** sur la route (ou le chemin) **`/pizzas`** (√©quivalent de la route **`/pizzas/`**).\r\n\r\n## Error-handling middleware : exemple\r\nCe type de middleware est √† d√©finir apr√®s tous les middlewares pouvant g√©n√©rer une erreur et est appel√© via **`throw`** ou via **`next(err)`** dans une fonction middleware o√π un souci est d√©tect√©.\r\n\r\nVoici la d√©finition d'un gestionnaire d'erreurs :\r\n\r\n```js\r\nconst errorHandler: ErrorRequestHandler = (err, _req, res, _next) => {\r\n  console.error(err.stack);\r\n  return res.status(500).send(\"Something broke!\");\r\n};\r\n\r\napp.use(errorHandler);\r\n```\r\n\r\nVeuillez l'ajouter dans **`/app.ts`** juste avant l'export d'**`app`**. \r\nN'oubliez pas d'importer **`ErrorRequestHandler`** depuis **`express`**.\r\n\r\nAttention, il y a bien 4 param√®tres au lieu des 3 habituels pour les autres types de fonctions middleware.\r\n\r\nVeuillez d√©marrer l'API (par d√©faut elle est configur√©e sur le port 3000 au sein de **`bin/www.ts`**) :\r\n\r\n```bash\r\nnpm run dev\r\n```\r\n\r\nNous allons maintenant simuler une erreur dans notre application pour v√©rifier que notre gestionnaire d'erreurs fonctionne.\r\n\r\nVeuillez ajouter le code suivant dans **`/routes/pizzas.ts`**, comme premi√®re route, juste apr√®s `defaultPizzas` :\r\n\r\n```ts \r\nrouter.get(\"/error\", (_req, _res, _next) => {\r\n  throw new Error(\"This is an error\");\r\n  // equivalent of next(new Error(\"This is an error\"));\r\n});\r\n```\r\n\r\nPour red√©marrer l'API, cela se fait automatiquement pour vous √† chaque sauvegarde d'un fichier : \r\n- üëç Nous vous conseillons de mettre l'auto-save dans VS Code : **`File`** > **`Auto Save`**.\r\n- Sinon, vous devez penser √† faire des sauvegardes manuelles : **`CTRL s`** √† chaque modification de fichier.\r\n\r\n\r\nPour faire une requ√™te √† cette route, veuillez taper dans votre navigateur (ou cliquez sur ce lien) : http://localhost:3000/pizzas/error.\r\n\r\nRegardez le message d'erreur tant dans le terminal de VS Code que ce qui est affich√© dans votre browser.\r\n\r\n## Built-in middleware & third-party middleware : exemple\r\nDans **`app.ts`**, on peut trouver pas mal d'exemples de ces types de middleware. Ils sont comment√©s ci-dessous dans le code :\r\n\r\n```js\r\nconst app = express();\r\n\r\napp.use(logger('dev')); //¬†HTTP request logger linked to morgan package\r\napp.use(express.json()); //¬†Parse requests with JSON payloads\r\napp.use(express.urlencoded({ extended: false })); //¬†Parse requests with URL-\r\n                                                  // encoded payload \r\napp.use(cookieParser()); //¬†Parse cookie header (req.cookies)\r\napp.use(express.static(path.join(__dirname, 'public'))); //¬†Serve static assets\r\n```\r\n\r\n# <InternalPageTitle> D√©finition d'une route en Express </InternalPageTitle>\r\n## D√©finition d'une route\r\nLe routing, ou routage, contr√¥le la r√©ponse √† une requ√™te client pour un chemin et une m√©thode HTTP. Le chemin est aussi appel√© **endpoint** ou **URI** ou **PATH**.\r\n\r\nOn va d√©finir une route soit sur l'objet **`app`**, soit sur un **`router`**.  \r\nUn objet de type **`router`** permet de regrouper toutes les routes associ√©es √† un type de ressources.\r\n\r\nOn d√©finit une route de cette fa√ßon : **`app.`** ou **`router.`**  **`METHOD(PATH, MIDDLEWARE_FUNCTION)`**.\r\n\r\nüëç Dans notre cours, nous vous recommandons d'organiser vos routes par type de ressources et donc de mettre en place des routers.\r\n\r\n# <InternalPageTitle> Op√©rations de lecture </InternalPageTitle>\r\n\r\nNous souhaitons d√©couvrir comment mettre en place une op√©ration permettant de lire toutes les ressources de type \"drinks\".  \r\n\r\nPour cela, il nous faut cr√©er un router pour traiter des ressources **`/drinks`** au sein de **`/routes/drinks.ts`**.  \r\n\r\nPour √™tre s√ªr de ne pas avoir de probl√®me de compilation avec TypeScript, il est recommand√© de toujours ouvrir votre projet en tant que **`workspace`** dans VS Code (`File` > `Open Folder...` et s√©lection de votre r√©pertoire `basic`).\r\n\r\nPour l'op√©ration de lecture de toutes les boissons, selon les conventions REST, il faut faire une requ√™te de type **`GET /drinks`**. Le router de **`/routes/drinks.ts`** doit donc offrir une route renvoyant toutes les boissons qui existent.\r\n\r\nPour d√©marrer, nous souhaitons une application basique qui ne g√®re pas la persistance des donn√©es. Le menu sera donc un array d'objets, chaque objet repr√©sentant une boisson.\r\n\r\nNotre op√©ration de lecture de boissons va renvoyer du JSON au client, c'est √† dire une repr√©sentation textuelle d'un array d'objets. Nous verrons plus tard ce qu'est r√©ellement le JSON. A ce stade-ci, il est suffisant de conna√Ætre la fonction d'Express qui permet √† un objet TS/JS de circuler sur le r√©seau : **`res.json()`**.\r\n\r\nVoici le code du router **`/routes/drinks.ts`** :\r\n```ts\r\nimport { Router } from \"express\";\r\nimport { Drink } from \"../types\";\r\n\r\nconst drinks: Drink[] = [\r\n  {\r\n    id: 1,\r\n    title: \"Coca-Cola\",\r\n    image:\r\n      \"https://media.istockphoto.com/id/1289738725/fr/photo/bouteille-en-plastique-de-coke-avec-la-conception-et-le-chapeau-rouges-d%C3%A9tiquette.jpg?s=1024x1024&w=is&k=20&c=HBWfROrGDTIgD6fuvTlUq6SrwWqIC35-gceDSJ8TTP8=\",\r\n    volume: 0.33,\r\n    price: 2.5,\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"Pepsi\",\r\n    image:\r\n      \"https://media.istockphoto.com/id/185268840/fr/photo/bouteille-de-cola-sur-un-fond-blanc.jpg?s=1024x1024&w=is&k=20&c=xdsxwb4bLjzuQbkT_XvVLyBZyW36GD97T1PCW0MZ4vg=\",\r\n    volume: 0.33,\r\n    price: 2.5,\r\n  },\r\n  {\r\n    id: 3,\r\n    title: \"Eau Min√©rale\",\r\n    image:\r\n      \"https://media.istockphoto.com/id/1397515626/fr/photo/verre-deau-gazeuse-%C3%A0-boire-isol%C3%A9.jpg?s=1024x1024&w=is&k=20&c=iEjq6OL86Li4eDG5YGO59d1O3Ga1iMVc_Kj5oeIfAqk=\",\r\n    volume: 0.5,\r\n    price: 1.5,\r\n  },\r\n  {\r\n    id: 4,\r\n    title: \"Jus d'Orange\",\r\n    image:\r\n      \"https://images.unsplash.com/photo-1600271886742-f049cd451bba?q=80&w=1374&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\r\n    volume: 0.25,\r\n    price: 4.5,\r\n  },\r\n  {\r\n    id: 5,\r\n    title: \"Limonade\",\r\n    image:\r\n      \"https://images.unsplash.com/photo-1583064313642-a7c149480c7e?q=80&w=1430&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\r\n    volume: 0.33,\r\n    price: 5,\r\n  },\r\n];\r\n\r\nconst router = Router();\r\n\r\nrouter.get(\"/\", (_req, res) => {\r\n  return res.json(drinks);\r\n});\r\n\r\nexport default router;\r\n```\r\n\r\nIci, on a d√©fini un array de boissons, chaque boisson √©tant un objet de type **`Drink`**. TS aurait pu nous aider √† d√©finir automatiquement le type de chaque objet gr√¢ce √† l'inf√©rence de type : (le 1er objet contient un `id` qui est un `number`, un `title` qui est une string, `image` qui est une string, ...).\r\n\r\nN√©anmoins, il est bien plus clair de pr√©ciser le type de chaque objet comme √©tant de type `Drink`. Une bonne pratique est de d√©finir les types de donn√©es dans un fichier **`/types.ts`** ; veuillez mettre √† jour ce fichier avec le type **`Drink`** :\r\n```ts\r\ninterface Drink {\r\n  id: number;\r\n  title: string;\r\n  image: string;\r\n  volume: number;\r\n  price: number;\r\n}\r\n\r\nexport type { Pizza, NewPizza, PizzaToUpdate, Drink };\r\n```\r\n\r\nEt voici le code de **`app.ts`** (les parties modifi√©es sont surlign√©es) :\r\n\r\n```js numbered highlighting=\"5,22\"\r\nimport express, { ErrorRequestHandler } from \"express\";\r\n\r\nimport usersRouter from \"./routes/users\";\r\nimport pizzaRouter from \"./routes/pizzas\";\r\nimport drinkRouter from \"./routes/drinks\";\r\n\r\nconst app = express();\r\n\r\napp.use((_req, _res, next) => {\r\n  console.log(\r\n    \"Time:\",\r\n    new Date().toLocaleString(\"fr-FR\", { timeZone: \"Europe/Brussels\" })\r\n  );\r\n  next();\r\n});\r\n\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\n\r\napp.use(\"/users\", usersRouter);\r\napp.use(\"/pizzas\", pizzaRouter);\r\napp.use(\"/drinks\", drinkRouter);\r\n\r\nconst errorHandler: ErrorRequestHandler = (err, _req, res, _next) => {\r\n  console.error(err.stack);\r\n  return res.status(500).send(\"Something broke!\");\r\n};\r\n\r\napp.use(errorHandler);\r\nexport default app;\r\n```\r\n\r\nPour consommer l'op√©ration de lecture via un browser, nous pouvons lire toutes les ressources de type \"drinks\" ici : http://localhost:3000/drinks\r\n\r\n# <InternalPageTitle> Exercice 1.1 : lecture de toutes les ressources </InternalPageTitle>\r\nVous allez cr√©er la premi√®re version de la RESTful API de **myMovies**, un site qui permettra de pr√©senter des films. Vous devez, sous Express, mettre √† disposition cette op√©ration :\r\n\r\n| URI | M√©thode HTTP | Op√©ration |\r\n|---|---|---|\r\n| **`films`** | GET | READ ALL : Lire toutes les ressources de la collection |\r\n\r\n<br/>\r\n\r\nUne ressource de type **`films`** doit contenir les propri√©t√©s suivantes :\r\n  - **`id`** : un entier \r\n  - **`title`** : titre du film (String)\r\n  - **`director`** : le r√©alisateur du film (String)\r\n  - **`duration`** : dur√©e du film en minutes ; elle doit √™tre un nombre positif (pas une string !).\r\n\r\nUn film pourra avoir des propri√©t√©s suppl√©mentaires (elles sont optionnelles) :\r\n  - **`budget`** : pour informer du co√ªt qu'a cout√© la production du film, en millions ; le budget doit √™tre un nombre positif (pas une string !).\r\n  - **`description`** : pour donner une URL vers une image du film.\r\n  - **`imageUrl`** : pour donner une URL vers une image du film.\r\n\r\nVeuillez donc \"hardcoder\" au moins trois ressources, parmi vos films pr√©f√©r√©s, dans un array au sein de votre RESTful API. Et si vous voulez aller tr√®s vite, demander √† une IA de g√©n√©rez des films contenant les propri√©t√©s demand√©es.\r\n\r\nLe code de votre application doit se trouver dans votre repo git au sein du r√©pertoire **`/exercises/1.1`**. Vous allez donc cr√©er un nouveau projet sur base d'un clone du boilerplate : [basic-ts-api-boilerplate](https://github.com/e-vinci/basic-ts-api-boilerplate).\r\n\r\nVeuillez supprimer tout le code du boilerplate qui n'est pas n√©cessaire pour cet exercice.\r\n\r\nUne fois tout fonctionnel, veuillez faire un **`commit`** de votre code avec le message suivant : **`new: ex1.1`**.\r\n\r\n# <InternalPageTitle> Exercice 1.2 : middleware s'ex√©cutant sur toutes les routes </InternalPageTitle>\r\n## Application middleware de base\r\nVeuillez cr√©er un middleware qui permette d'enregistrer et d'afficher dans la console des statistiques sur les requ√™tes faites √† votre API.\r\n\r\nVous devez enregistrer, depuis le d√©marrage du serveur, le nombre de requ√™tes **`GET`** faites √† votre API.\r\n\r\nVeuillez repartir du code de la solution de votre Exercice 1.1 en cr√©ant un nouveau projet dans votre repo git dans **`/exercises/1.2`**.  \r\n\r\nVoici un example de ce qui devrait √™tre affich√© dans la console √† chaque requ√™te vers votre API :\r\n```bash\r\nGET counter : 2\r\n```\r\n\r\nVeuillez faire un **`commit`** de votre code avec le message suivant : **`new: ex1.2`**.\r\n\r\n#### ü§ù Tips\r\n- Comment r√©cup√©rer la m√©thode HTTP ? **`req.method`** ...\r\n- Comment appliquer un middleware √† toutes les routes ? revoir les **application-level middleware**...\r\n\r\n## üç¨ Challenge optionnel : et si on allait un peu plus loin ?\r\n\r\nS'il vous reste du temps et que vous souhaitez travailler les structures de donn√©es, vous pourriez maintenant cat√©goriser le nombre d'appels par **`PATH`** et par **`m√©thode HTTP`**.\r\n\r\nVoici un example de ce qui pourrait √™tre affich√© dans la console √† chaque requ√™te vers votre API :\r\n```bash\r\nRequest counter :\r\n- GET / : 10\r\n- GET /pizzas : 2\r\n- POST /pizzas : 5\r\n- DELETE /pizzas : 2\r\n```\r\n\r\n\r\n# <InternalPageTitle> Utilisation du linter et du formatter pour TS </InternalPageTitle>\r\n## Le linter \r\nUn linter est un outil qui analyse le code source pour signaler des erreurs de programmation, des bogues, des erreurs stylistiques et des constructions suspectes.\r\n\r\nPour b√©n√©ficier de feedback sur votre code lors de son √©criture, vous devez avoir install√© l'extension **ESLint** au sein de VS Code.\r\n\r\nVous devez aussi avoir ouvert le projet comme Workspace dans VS Code : `File`, `Open Folder...`. Le fichier de configuration de TypeScript (qui sp√©cifie les options de compilation pour le compilateur TypeScript `tsc`) doit se trouver √† la racine de votre Workspace.\r\n\r\nPour info, la configuration des r√®gles de **ESLint** se fait dans le fichier `.eslintrc` devant se trouver √† la racine d'un projet et offert au sein du boilerplate.\r\n\r\nIl est possible de b√©n√©ficier d'un check du projet par le linter et de voir tous les avertissement ou erreurs en tapant cette commande dans votre projet :\r\n```bash\r\nnpm run lint\r\n```\r\n\r\n## Le formatter\r\nUn formateur de code est un outil qui permet de formater le code source de mani√®re automatique et coh√©rente. Cela permet de rendre le code plus lisible et de suivre des conventions de codage.\r\n\r\nPour formatter votre code, vous devez avoir install√© l'extension **prettier** au sein de VS Code.\r\n\r\nVous pouvez facilement formatter votre code :\r\n- soit en tapant `Alt Shift F `(`Option Shift F` sous MacOS);\r\n- soit en faisant un clic droit sur votre script, `Format Document` ; la premi√®re fois, il se peut que vous deviez s√©lectionner **prettier** comme formater : dans un fichier `.ts`, clic droit, `Format Document With...`, `Configure Default Formatter`.\r\n\r\n\r\n# <InternalPageTitle> Param√®tres de route </InternalPageTitle>\r\n\r\nLes **route parameters** sont des segments d'une URL qui sont utilis√©s pour capturer une valeur sp√©cifi√©e √† leur position dans l'URL. On r√©cup√®re ces param√®tres via l'objet **`req.params`**.\r\n\r\nPour notre pizzeria, nous souhaitons pouvoir lire une boisson identifi√©e par son **id**.\r\n\r\nNous allons donc ajouter le param√®tre de route **`id`**.  \r\nEn respect des conventions REST, un client devra faire ce genre de requ√™te pour appeler cette op√©ration : **`GET /drinks/2`**.\r\n\r\nPour continuer le tutoriel que nous avons initi√© dans le r√©pertoire **`/tutorials/pizzeria/api/basic`**,  voici la nouvelle route √† ajouter dans le router **`/routes/drinks.ts`** :\r\n```ts\r\nrouter.get(\"/:id\", (req, res) => {\r\n  const id = Number(req.params.id);\r\n  const drink = drinks.find((drink) => drink.id === id);\r\n  if (!drink) {\r\n    return res.sendStatus(404);\r\n  }\r\n  return res.json(drink);\r\n});\r\n```\r\n\r\nPour consommer cette nouvelle op√©ration via un browser, nous pouvons lire la ressource de type \"drinks\" identifi√©e par **2** dans le menu ainsi :\r\nhttp://localhost:3000/drinks/2\r\n\r\nLe browser fait bien une requ√™te du genre : **`GET /drinks/2`**.  \r\nLe param√®tre de la route \"2\" est r√©cup√©r√© dans l'URL de la route par Express et est offert via **`req.params.id`**. \r\n\r\nN'h√©sitez pas √† faire une requ√™te pour un identifiant n'existant pas dans les boissons : http://localhost:3000/drinks/666.\r\n\r\n# <InternalPageTitle> Param√®tres de requ√™te </InternalPageTitle>\r\n\r\nLes **query parameters** sont des param√®tres qui peuvent √™tre ajout√©s √† une URL.  \r\nOn r√©cup√®re ces param√®tres via l'objet **`req.query`**.\r\n\r\nPour notre pizzeria, nous souhaitons pouvoir filtrer toutes les ressources de type \"boissons\" n'√©tant pas plus cher qu'un certain budget.\r\n\r\nEn respect des conventions REST, un client devra faire ce genre de requ√™tes : **`GET /drinks/?budget-max=price`** ;\r\n\r\nIl n'y a donc pas de nouvelle route √† ajouter ici. En effet, √ßa reste une requ√™te de type GET sur la route **`/drinks`**. \r\n\r\nVeuillez donc mettre √† jour **`/routes/drinks.ts`** pour la lecture de toutes les boissons en filtrant selon le budget maximum :\r\n```ts\r\nrouter.get(\"/\", (req, res) => {\r\n  if (!req.query[\"budget-max\"]) {\r\n    // Cannot call req.query.budget-max as \"-\" is an operator\r\n    return res.json(drinks);\r\n  }\r\n  const budgetMax = Number(req.query[\"budget-max\"]);\r\n  const filteredDrinks = drinks.filter((drink) => {\r\n    return drink.price <= budgetMax;\r\n  });\r\n  return res.json(filteredDrinks);\r\n});\r\n```\r\n\r\nPour consommer cette nouvelle op√©ration via un browser, nous pouvons lire toutes les ressources de type \"drinks\" tri√©es par leur titre de mani√®re descendante :\r\nhttp://localhost:3000/drinks/?budget-max=3\r\n\r\nN'h√©sitez pas √† tester d'autres filtres.\r\n\r\n\r\n# <InternalPageTitle> Op√©ration de cr√©ation & parsing du body </InternalPageTitle>\r\n\r\nNous souhaitons d√©velopper une op√©ration permettant de cr√©er une ressource de type \"drinks\".  \r\nSelon les conventions REST, il faut faire une requ√™te de type **`POST /drinks`** qui offre une repr√©sentation de la ressource √† cr√©er. La repr√©sentation utilis√©e est le JSON que nous verrons plus en d√©tails plus tard.  \r\nLors de l'ajout d'une boisson, si nous souhaitons cr√©er une ressource dont le titre est \"Virgin Tonic\", l'image est \"https://plus.unsplash.com/premium_photo-1668771899398-1cdd763f745e?q=80&w=1374&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\", le volume est de 25cl et le prix est de 4,5‚Ç¨, alors la repr√©sentation de la ressource √† cr√©er sera la suivante :\r\n```json\r\n{\r\n    \"title\":\"Virgin Tonic\",\r\n    \"image\":\"https://plus.unsplash.com/premium_photo-1668771899398-1cdd763f745e?q=80&w=1374&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\r\n    \"volume\":0.25,\r\n    \"price\":4.5\r\n}\r\n```\r\n\r\nSelon les conventions REST, une requ√™te de cr√©ation est de type **POST** et contient ses **param√®tres au sein du body** de la requ√™te.\r\n\r\n**`/routes/drinks.ts`** doit offrir une nouvelle route permettant d'ajouter une nouvelle boisson (au menu des boissons), qui est un array d'objets. Une nouvelle boisson doit donc √™tre ajout√©e √† une variable, un array, qui est contenu dans la m√©moire vive de notre machine.  \r\nLorsque l'ajout d'une boisson a r√©ussi, nous souhaitons renvoyer la repr√©sentation de la nouvelle ressource au client. \r\n\r\nAinsi, le client aura souvent acc√®s √† une nouvelle propri√©t√©, l'**id** de la ressource cr√©√©e par l'API.\r\n\r\nVoici une premi√®re version du code du router **`/routes/drinks.ts`** pour la nouvelle op√©ration. Rajoutons-le dans notre application :\r\n```ts\r\nrouter.post(\"/\", (req, res) => {\r\n  const { title, image, volume, price } = req.body;\r\n  if (!title || !image || !volume || !price) {\r\n    return res.sendStatus(400);\r\n  }\r\n\r\n  const nextId =\r\n    drinks.reduce((maxId, drink) => (drink.id > maxId ? drink.id : maxId), 0) +\r\n    1;\r\n\r\n  const newDrink: Drink = {\r\n    id: nextId,\r\n    title,\r\n    image,\r\n    volume,\r\n    price,\r\n  };\r\n\r\n  drinks.push(newDrink);\r\n  return res.json(newDrink);\r\n});\r\n```\r\n\r\nIci, le linter ESLint nous avertit que **`req.body`** n'est pas d√©fini, nous avons une allocation de valeurs de type **`any`** ins√©curitaire. En effet, `title`, `image`, `volume` et `price` peuvent √™tre de n'importe quel type (**`any`**). \r\nNotre compilateur interdit ce genre de pratique, il est donc important de d√©finir le type de **`req.body`**.\r\n\r\nPour cela, nous devons d√©finir une interface qui repr√©sente la repr√©sentation de la ressource √† cr√©er.\r\n\r\nVoici le code de **`/types.ts`** mis √† jour :\r\n```ts\r\ntype NewDrink = Omit<Drink, \"id\">;\r\n\r\nexport type { Pizza, NewPizza, PizzaToUpdate, Drink, NewDrink };\r\n```\r\n\r\nGr√¢ce √† `Omit`, nous avons cr√©√© un nouveau type **`NewDrink`** qui est le type **`Drink`** sans la propri√©t√© **`id`**.\r\n\r\n\r\nConcernant `req.body`, il faut faire ce que l'on appelle de la **r√©duction de type** (ou **type narrowing**). Cela consiste √† v√©rifier que les propri√©t√©s sont bien d√©finies et qu'elles sont du bon type, g√©n√©ralement √† l'aide d'op√©rateurs (comme **`typeof`** ou **`instanceof`**, les op√©rateurs d'√©galit√©, l'op√©rateur **`in`** ) qui r√©duisent dynamiquement le type de la variable.\r\n\r\nEt voici le code de **`/routes/drinks.ts`** mis √† jour en suivant les bonnes pratiques identifi√©es dans l'intro au TS de ce cours :\r\n```ts numbered highlighting=\"2-20,22\"\r\nrouter.post(\"/\", (req, res) => {\r\n  const body: unknown = req.body;\r\n  if (\r\n    !body ||\r\n    typeof body !== \"object\" ||\r\n    !(\"title\" in body) ||\r\n    !(\"image\" in body) ||\r\n    !(\"volume\" in body) ||\r\n    !(\"price\" in body) ||\r\n    typeof body.title !== \"string\" ||\r\n    typeof body.image !== \"string\" ||\r\n    typeof body.volume !== \"number\" ||\r\n    typeof body.price !== \"number\" ||\r\n    !body.title.trim() ||\r\n    !body.image.trim() ||\r\n    body.volume <= 0 ||\r\n    body.price <= 0\r\n  ) {\r\n    return res.sendStatus(400);\r\n  }\r\n\r\n  const { title, image, volume, price } = body as NewDrink;\r\n\r\n  const nextId =\r\n    drinks.reduce((maxId, drink) => (drink.id > maxId ? drink.id : maxId), 0) +\r\n    1;\r\n\r\n  const newDrink: Drink = {\r\n    id: nextId,\r\n    title,\r\n    image,\r\n    volume,\r\n    price,\r\n  };\r\n\r\n  drinks.push(newDrink);\r\n  return res.json(newDrink);\r\n});\r\n```\r\n\r\nNous avons finalement ajout√© une **assertion de type** : gr√¢ce √† **`as NewDrink`**, nous avons indiqu√© √† TypeScript que **`body`** est de type **`NewDrink`** car nous en sommes certains (suite aux v√©rifications de type).\r\n\r\nIl est √† noter que la repr√©sentation de la ressource √† cr√©er est pars√©e dans l'objet **`req.body`** gr√¢ce √† la fonction middleware **`express.json()`** appel√©e dans **`/app.ts`** :\r\n```js\r\napp.use(express.json());\r\n```\r\n\r\nIl est donc important de ne pas oublier cette ligne lorsque l'on cr√©e une RESTful API.\r\n\r\nBien, on se rend compte que la validation des donn√©es est tr√®s importante, mais elle est souvent r√©p√©titive. C'est pourquoi il peut √™tre int√©ressant d'utiliser des librairies de validation de donn√©es comme **`Joi`** ou **`Yup`**.\r\n\r\nOK, c'est bien, mais comment tester ce nouveau code ?\r\n\r\nLe browser permet de facilement cr√©er des requ√™tes de type **`GET`**, mais pas des requ√™tes de type **`POST`**...   \r\nNous avons donc besoin d'un client l√©ger permettant de faire des requ√™tes HTTP.\r\n\r\n# <InternalPageTitle> Client REST </InternalPageTitle>\r\n\r\n## Introduction\r\nDans le cadre de ce cours, tout comme g√©n√©ralement dans un environnement professionnel, nous souhaitons pouvoir d√©velopper une API ind√©pendamment du d√©veloppement d'une IHM (Interface Homme Machine, ce sont les √©crans permettant d'interagir avec l'application web).\r\n\r\nEn effet, cela prendrait trop de temps de devoir d√©velopper un frontend pour tester nos API.\r\n\r\nNous allons donc utiliser un client l√©ger permettant de faire des requ√™tes √† nos API.  \r\nIl en existe de nombreux, comme [REST Client](https://marketplace.visualstudio.com/items?itemName=humao.rest-client) [[R.55]](/references/#r55) ou [Postman](https://www.postman.com/) [[R.56]](/references/#r56).\r\n\r\n## REST Client\r\nDans le cadre de ce cours, nous utilisons [REST Client](https://marketplace.visualstudio.com/items?itemName=humao.rest-client) [[R.55]](/references/#r55) de Visual Studio Code pour tester nos API.\r\n\r\nPour installer REST Client au sein de VS Code, veuillez cliquer sur l'onglet **`Extensions`**. \r\n\r\nRecherchez l'extension **`REST Client`** et cliquez sur **`Install`**.\r\n\r\nQuelques notions pour utiliser REST Client :\r\n- Il faut cr√©er un fichier **`.http`** (ou **`.rest`**) contenant les requ√™tes vers vos RESTful APIs.  \r\nNB : Il est appropri√© de cr√©er un fichier par type de ressources.\r\n- Chaque requ√™te est introduite par **`###`** (3 \"**`#`**\"\" ou plus) ; voici la requ√™te permettant de lire toutes les boissons :\r\n```http\r\n### Read all drinks\r\nGET http://localhost:3000/drinks\r\n```\r\n- Pour ex√©cuter une requ√™te, il suffit de cliquer sur **`Send Request`**.\r\n- Lorsqu'on envoie des donn√©es au format JSON, il est important d'avoir un espace avant les accolades (avant le \"**`{`**\" ).\r\n- On peut d√©finir des **File variables** via ce genre de syntaxe : **`@baseUrl = http://localhost:3000`**.\r\n- Pour utiliser la variable **`baseUrl`**, il suffit de la mettre entre double accolades. Par exemple, voici la requ√™te permettant de lire toutes les boissons :  \r\n```http\r\n### Read all drinks with File variable\r\n@baseUrl = http://localhost:3000\r\nGET {{baseUrl}}/drinks\r\n```\r\n\r\nNous allons maintenant tester l'API de la pizzeria que nous avons cr√©√©e pour toutes ses op√©rations.\r\n\r\nAu sein de VS Code, dans votre projet **`/tutorials/pizzeria/api/basic`**, veuillez cr√©er un r√©pertoire nomm√© **`REST Client`**. Dans ce r√©pertoire, veuillez cr√©er un fichier nomm√© **`drinks.http`**.\r\n\r\nDans **`drinks.http`**, veuillez ajouter cette requ√™te pour la lecture de toutes les boissons et ex√©cutez la : \r\n```http\r\n### Read all drinks with File variable\r\n@baseUrl = http://localhost:3000\r\nGET {{baseUrl}}/drinks\r\n```\r\n\r\nEst-ce que cela fonctionne bien ?  Avez vous bien d√©marr√© votre API ?  \r\nVous devriez obtenir le m√™me r√©sultat que si vous acc√©diez √† votre API √† l'aide du browser.\r\n\r\nAu sein de **`drinks.http`**, veuillez ajouter ces deux requ√™tes pour la lecture d'une seule boisson ou pour la lecture de toutes les boissons en les filtrant selon le budget maximum :\r\n```http\r\n### Read a single drink\r\nGET {{baseUrl}}/drinks/3\r\n\r\n### Read all drinks cheaper or equal to 3 ‚Ç¨\r\nGET {{baseUrl}}/drinks/?budget-max=3\r\n```\r\n\r\nVeuillez ex√©cuter ces deux requ√™tes.\r\n\r\nNous sommes pr√™ts pour ajouter une requ√™te appelant l'op√©ration de cr√©ation d'une boisson.\r\n\r\nAu sein de **`drinks.http`**, veuillez ajouter cette requ√™te pour la cr√©ation d'une boisson :\r\n```http\r\n### Create a drink\r\nPOST {{baseUrl}}/drinks\r\nContent-Type: application/json\r\n\r\n{\r\n    \"title\":\"Virgin Tonic\",\r\n    \"image\":\"https://plus.unsplash.com/premium_photo-1668771899398-1cdd763f745e?q=80&w=1374&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\r\n    \"volume\":0.25,\r\n    \"price\":4.5    \r\n}\r\n```\r\n\r\nOn remarque qu'il est important de mettre une ligne vide avant les accolades repr√©sentant le body de la requ√™te.\r\n\r\nüí≠ Comment tester que le bon fonctionnement de l'op√©ration de cr√©ation ?\r\n\r\nIl suffit d'ex√©cuter l'op√©ration de lecture de toutes les boissons üòé !\r\nLors de l'ajout d'une boisson, si la nouvelle ressource appara√Æt, c'est qu'elle a bien √©t√© cr√©√©e !  \r\nFaites le test !\r\n\r\n# <InternalPageTitle> Utilisation du debugger </InternalPageTitle>\r\n\r\n## Introduction\r\nüí≠ Qui est votre meilleur ami ?\r\n\r\nIl est possible qu'√† ce stade-ci, vous ignorez une des bonnes r√©ponses, car pour les d√©veloppeurs, le debugger est leur meilleur ami !\r\n\r\nLe debugger est toujours l√† pour vous, pr√™t √† vous faire voyager pas √† pas dans votre code, √† vous donner des pistes dans les moments difficiles, sans imposer de solutions, il vous offre une libert√© totale ! Et il acceptera toujours votre code tel qu'il est, sous r√©serve bien s√ªr que celui-ci compile.\r\nC'est exactement ce que l'on attend d'un ami üòÅ.\r\n\r\n## Utilisation de la configuration de debug offerte\r\n\r\nNous vous offrons une configuration de Debug permettant de facilement d√©boguer plusieurs applications au sein d'un m√™me folder de VS Code. Cette configuration se trouve dans le fichier **`.vscode/launch.json`**.  \r\nCette configuration est active au sein de VS Code que si elle se trouve √† la racine du folder ouverte dans VS Code. Vous devez donc vous assurer que le dossier **`.vscode`** et son fichier **`launch.json`** se trouvent au bon endroit. Voici deux sc√©narios :\r\n- Si vous ouvrez un seul projet au sein de VS Code, c'est-√†-dire que le folder ouvert de VS Code est le clone du boilerplate d'une API : vous ne devez pas d√©placer le r√©pertoire **`.vscode`**, tout est bien configur√©.\r\n- Si vous ouvrez ou folder de VS Code contenant plusieurs projets, comme par exemple un repository contenant plusieurs API : vous devez d√©placer **`.vscode`** √† la racine du folder ouvert dans VS Code.\r\n\r\nSi vous avez plusieurs applications au sein d'un folder de VS Code, pour d√©boguer une application en particulier, nous vous conseillons cette approche :\r\n- Ouvrez le fichier **`package.json`** de l'application √† d√©boguer ;\r\n- Cliquez sur l'ic√¥ne **`Run and Debug`** √† gauche de l'Explorer, puis cliquez sur **`Start Debugging`** (ou cliquez juste sur **`F5`**) en v√©rifiant que la configuration de debugging s√©lectionn√©e est bien nomm√©e **`Launch via NPM`**.\r\n\r\nNotons que le nom de la configuration de debugging peut facilement √™tre modifi√©e en changeant la valeur de l'attribut **`name`** dans **`/.vscode/launch.json`**.\r\n\r\n## Utilisation du debugger TS\r\nIl existe un autre moyen de d√©boguer son application au sein de VS Code :\r\n- Vous pouvez installer l'extension **`TypeScript Debugger`** au sein de VS Code;\r\n- Ensuite, il vous suffit de cr√©er une configuration de Debug : **`Add Configuration...`**, **`TS Debug`** ; sinon, vous pouvez s√©lectionner la configuration existante et nomm√©e **`ts-node`** dans le boilerplate d'une API. Une fois que votre configuration est ouverte apr√®s avoir cliqu√© sur l'onglet de Debug, vous √™tes pr√™t √† d√©boguer.\r\n- Ouvrez le script d'entr√©e de votre application : **`/bin/www.ts`**.\r\n- Cliquez sur **`Start Debugging`** ou sur **`F5`** en v√©rifiant que la configuration de debugging s√©lectionn√©e est bien nomm√©e **`ts-node`** (ou le nom que vous auriez choisi pour la configuration de votre debugger pour TS).\r\n\r\n# <InternalPageTitle> Exercice 1.3 : lectures sp√©cifiques, cr√©ation & REST Client </InternalPageTitle>\r\n\r\nVeuillez continuer le d√©veloppement de la RESTful API de **myMovies**, sous Express, afin de mettre √† disposition de nouvelles op√©rations sur des films et utiliser **REST Client**.\r\n\r\nVeuillez repartir du code de la solution de votre [Exercice 1.2](#exercice_1_2_middleware_sexecutant_sur_toutes_les_routes) en cr√©ant un nouveau projet dans votre repo git dans **`/exercises/1.3`**.  \r\n\r\nVeuillez rajouter ces op√©rations √† votre API :\r\n\r\n| URI | M√©thode HTTP | Op√©ration |\r\n|---|---|---|\r\n| **`films?minimum-duration=value`** | GET | READ ALL FILTERED : Lire toutes les ressources de la collection selon le filtre donn√© |\r\n| **`films/{id}`** | GET | READ ONE : Lire la ressource identifi√©e |\r\n| **`films`** | POST | CREATE ONE : Cr√©er une ressource bas√©e sur les donn√©es de la requ√™te |\r\n\r\n<br/>\r\n\r\nPour rappel, une ressource de type **`films`** doit contenir les propri√©t√©s suivantes :\r\n  - **`id`** : un entier \r\n  - **`title`** : titre du film (String)\r\n  - **`director`** : le r√©alisateur du film (String)\r\n  - **`duration`** : dur√©e du film en minutes ; elle doit √™tre un nombre positif (pas une string !).\r\n\r\nUn film pourra avoir des propri√©t√©s suppl√©mentaires (elles sont optionnelles) :\r\n  - **`budget`** : pour informer du co√ªt qu'a co√ªt√© la production du film, en millions ; le budget doit √™tre un nombre positif (pas une string !).\r\n  - **`description`** : pour donner une URL vers une image du film.\r\n  - **`imageUrl`** : pour donner une URL vers une image du film.\r\n\r\nLes ressources ne doivent toujours pas persister : d√®s lors, ajoutez les donn√©es associ√©es aux films dans un array.\r\n\r\nVeuillez bien valider les param√®tres re√ßu par les op√©rations de vos API ; v√©rifiez par exemple que **`budget`** et **`duration`** sont des **nombres positifs**. Si √ßa n'est pas le cas, renvoyer un message d'erreur (comme par exemple \"Wrong minimum duration\") au format JSON (via **`res.json`**). Ceci n'est pas une bonne pratique, mais pour l'instant, c'est suffisant.\r\n\r\nVeuillez **tester toutes les fonctions de la RESTful API** pour la collection de films √† l'aide du **REST Client** dans VS Code. Veuillez ajouter vos requ√™tes au sein du fichier **`films.http`** dans le r√©pertoire **REST Client** du dossier associ√© √† cet exercice.\r\n\r\nVeuillez tester pas √† pas chaque ligne de votre op√©ration de cr√©ation de film. Pour ce faire, vous devez utiliser le debugger !\r\n\r\nUne fois tout fonctionnel, veuillez faire un **`commit`** de votre code avec le message suivant : **`new: ex1.3`**.\r\n\r\n#### ü§ù Tips\r\n- D√©veloppez les op√©rations de votre API de mani√®re incr√©mentale : testez une op√©ration via REST Client avant de passer √† une nouvelle op√©ration.\r\n- Pour le filtre sur les films, vous allez r√©cup√©rer un param√®tre de requ√™te.  \r\n‚ö° Attention, le signe **`-`** est un op√©rateur en TS/JS, vous ne pouvez pas r√©cup√©rer le param√®tre de requ√™te via **`req.query.minimum-duration`**...  \r\nüí≠ Mais alors comment faire ?  \r\nOn acc√®de aussi au propri√©t√© d'un objet √† l'aide d'un array, ici √ßa serait via **`req.query['minimum-duration']`**.\r\n- Pour transformer une string en nombre, vous pouvez utiliser la fonction **`Number`** : **`Number(req.query['minimum-duration'])`**...\r\n\r\n#### üç¨ Challenge optionnel\r\nSi vous avez encore du temps, pour l'op√©ration de cr√©ation, vous pourriez ajouter une validation des donn√©es plus robuste en assurant qu'aucune propri√©t√© inattendue n'est pr√©sente dans la repr√©sentation de la ressource √† cr√©er.\r\n\r\nUne fois tout fonctionnel, veuillez faire un **`commit`** de votre code avec le message suivant : **`new: ex1.3++`**.\r\n\r\n# <InternalPageTitle> üç¨ Exercice 1.4 : Gestion de la pagination, du tri et du filtrage </InternalPageTitle>\r\n\r\nN'h√©sitez pas, c'est optionnel, de g√©rer de nouvelles op√©rations au sein de votre RESTful API de **myMovies** :\r\n-\tFiltrez tous les films qui commencent par une certaines cha√Ænes de caract√®res.\r\n-\tPermettez de trier les films.\r\n\r\nLe code de votre application est √† ajouter dans votre repo git dans **`/exercises/1.4`**.  \r\nVeuillez faire un **`commit`** de votre code avec le message suivant : **`1.4 : API : ordering & filtering client`**.\r\n\r\nüç¨ Et si vraiment vous avez encore du temps et souhaitez d√©j√† approfondir les RESTful APIs, n'h√©sitez pas aussi √† impl√©menter la gestion de la pagination. Pour cette partie, veuillez faire un **`commit`** de votre code avec le message suivant : **`new: ex1.4`**.\r\n\r\n#### ü§ù Tips\r\nBesoin d'inspiration pour l'aspect filtrage et la gestion du tri des ressources ? [REST API Guide](https://dev.to/drminnaar/rest-api-guide-14n2) [[R.58]](/references/#r58).\r\n\r\n\r\n# <InternalPageTitle> Codes de statut HTTP associ√©s aux r√©ponses </InternalPageTitle>\r\n\r\nOn ne peut pas toujours renvoyer du JSON suite √† une requ√™te client ainsi qu'un code HTTP correspondant au fait que tout est OK (**`200 OK`**).\r\n\r\nQuand vous ex√©cutez cette requ√™te :\r\n```http\r\n### Read all drinks with File variable\r\nGET {{baseUrl}}/drinks\r\n```\r\n\r\nVous faites appel √† l'op√©ration de lecture de toutes les boissons. La derni√®re ligne de cette op√©ration est la suivante :\r\n```ts\r\nreturn res.json(filteredDrinks);\r\n```\r\n\r\nLa fonction **`json`** renvoie une r√©ponse au format JSON, mais de plus, elle renvoie un **status code** **`200`** indiquant au client que tout s'est bien pass√©.\r\n\r\nAu sein de **`drinks.http`**, veuillez ajouter cette requ√™te pour tenter de cr√©er une boisson en oubliant un param√®tre :\r\n```http\r\n### Try to create a drink with incomplete data\r\nPOST {{baseUrl}}/drinks\r\nContent-Type: application/json\r\n\r\n{\r\n    \"title\":\"Missing Data Drink\",\r\n    \"volume\":0.25,\r\n    \"price\":4.5    \r\n}\r\n```\r\n\r\nVeuillez ex√©cuter cette requ√™te. Que se passe-t-il ?  \r\nOn r√©cup√®re un code d'erreur **`400 Bad Request`**.\r\n\r\nEn effet, lorsqu'on omet un param√®tre dans la repr√©sentation de la ressource √† cr√©er, voici les lignes de code amenant au renvoi du code d'erreur **`400`** au sein de **`drinks.ts`** :\r\n```ts numbered highlighting=\"3-20\"\r\nrouter.post(\"/\", (req, res) => {\r\n  const body: unknown = req.body;\r\n  if (\r\n    !body ||\r\n    typeof body !== \"object\" ||\r\n    !(\"title\" in body) ||\r\n    !(\"image\" in body) ||\r\n    !(\"volume\" in body) ||\r\n    !(\"price\" in body) ||\r\n    typeof body.title !== \"string\" ||\r\n    typeof body.image !== \"string\" ||\r\n    typeof body.volume !== \"number\" ||\r\n    typeof body.price !== \"number\" ||\r\n    !body.title.trim() ||\r\n    !body.image.trim() ||\r\n    body.volume <= 0 ||\r\n    body.price <= 0\r\n  ) {\r\n    return res.sendStatus(400);\r\n  }\r\n\r\n  const { title, image, volume, price } = body as NewDrink;\r\n\r\n  const nextId =\r\n    drinks.reduce((maxId, drink) => (drink.id > maxId ? drink.id : maxId), 0) +\r\n    1;\r\n\r\n  const newDrink: Drink = {\r\n    id: nextId,\r\n    title,\r\n    image,\r\n    volume,\r\n    price,\r\n  };\r\n\r\n  drinks.push(newDrink);\r\n  return res.json(newDrink);\r\n});\r\n```\r\n\r\nLe client est donc bien inform√© qu'il y a eu un probl√®me lors de l'ex√©cution de l'op√©ration.   \r\nIl pourrait par exemple utiliser cette information pour pr√©senter un message d'erreur au niveau d'une IHM.\r\n\r\nVoici les grandes cat√©gories de \"status codes\" :\r\n- R√©ponses informatives : **`100-199`**\r\n- R√©ponses en cas de succ√®s : **`200-299`**\r\n- Redirections : **`300-399`**\r\n- Erreurs du client : **`400-499`**\r\n- Erreurs du serveur : **`500-599`**\r\n\r\nVoici les \"status codes\" que nous allons g√©n√©ralement utiliser :\r\n- **`200 OK`** : tout s'est bien pass√©, Express ajoute ce code automatiquement pour nous quand nous utilisons une m√©thode comme **`res.json()`**.\r\n- **`400 Bad Request`** : pour indiquer au client que la requ√™te contient des param√®tres non valides ou n'est pas compl√®te.\r\n- **`401 Unauthorized`** : pour indiquer au client qu'il doit s'authentifier pour acc√©der √† cette op√©ration. On renvoie aussi ce code d'erreur quand un client fournit un mauvais username ou password.\r\n- **`403 Forbidden`** : le client est connu du serveur, mais il n'a pas les privil√®ges pour acc√©der √† cette op√©ration (par exemple, le client n'est pas admin et tente d'acc√©der √† une op√©ration seulement accessible √† un admin).\r\n- **`404 Not Found`** : la ressource demand√©e n'existe pas, bien que l'URL semble valide.\r\n- **`409 Conflict`** : l'√©tat du serveur entre en conflit avec la requ√™te. Par exemple, la requ√™te demande de cr√©er un utilisateur qui existe d√©j√†.\r\n- **`500 Internal Server Error`** : le serveur a rencontr√© une erreur qu'il ne peut pas r√©gler. Par exemple, le serveur de base de donn√©es ne r√©pond pas et ne permet donc pas d'acc√©der aux ressources.\r\n\r\n# <InternalPageTitle> Exercice 1.5 : codes de statut HTTP </InternalPageTitle>\r\n\r\nVeuillez continuer le d√©veloppement de la RESTful API de **myMovies**, sous Express, afin de mieux g√©rer la la lecture et la cr√©ation de films et les r√©ponses √† donner aux clients.\r\n\r\nVeuillez cr√©er un nouveau projet dans votre repo git dans **`/exercises/1.5`** en partant du code de la solution de votre [Exercice 1.3](#exercice_1_3_lectures_specifiques_creation_rest_client) ou de votre [Exercice 1.4 optionnel](#üç¨_exercice_1_4_gestion_de_la_pagination_du_tri_et_du_filtrage).\r\n\r\nVeuillez am√©liorer les deux op√©rations de lecture (**`GET /films`** & **`GET /films/:id`**) et l'op√©ration de cr√©ation de films (**`POST /films`**):\r\n- En cas d'√©chec de la validation des param√®tres re√ßus par une op√©ration (non respect du contrat de l'API), veuillez renvoyer le status code appropri√©.\r\n- Lors de l'√©chec de la lecture d'un film en particulier, veuillez renvoyer le status code appropri√©.\r\n- Lors de l'ajout d'un film, si la ressource existe d√©j√†, c'est-√†-dire s'il y a d√©j√† un film pr√©sent avec le **`title`** et le **`director`** donn√©, veuillez renvoyer le status code appropri√©.\r\n\r\nVeuillez faire un **`commit`** de votre code avec le message suivant : **`new: ex1.5`**.\r\n\r\n# <InternalPageTitle> Op√©rations de suppression & de modification </InternalPageTitle>\r\n\r\n## Op√©ration de suppression\r\nNous souhaitons d√©velopper une op√©ration permettant de supprimer une ressource de type \"boisson\" √† l'aide de son identifiant.  \r\n\r\nSelon les conventions REST, une **op√©ration de suppression**:\r\n- est associ√©e √† une requ√™te de type **`DELETE /drinks/{id}`** contenant l'**identifiant** de la ressource √† supprimer au sein de l'URI comme **param√®tre de route**.\r\n- **ne contient pas de donn√©es dans le body** et est de **type DELETE**.\r\n\r\nVoici le code du router **`/routes/drinks.ts`** pour la nouvelle op√©ration, veuillez la rajouter dans le r√©pertoire de votre tutoriel en cours :\r\n```ts\r\nrouter.delete(\"/:id\", (req, res) => {\r\n  const id = Number(req.params.id);\r\n  const index = drinks.findIndex((drink) => drink.id === id);\r\n  if (index === -1) {\r\n    return res.sendStatus(404);\r\n  }\r\n  const deletedElements = drinks.splice(index, 1); // splice() returns an array of the deleted elements\r\n  return res.json(deletedElements[0]);\r\n});\r\n```\r\n\r\nAu sein de **`drinks.http`**, veuillez ajouter cette requ√™te pour supprimer la boisson poss√©dant l'identifiant \"2\" :\r\n```http\r\n### Delete a drink\r\nDELETE {{baseUrl}}/drinks/2\r\n```\r\n\r\nVeuillez ex√©cuter cette requ√™te et v√©rifier que la boisson a bien √©t√© supprim√©e.\r\n\r\n## Op√©ration de modification\r\nNous souhaitons d√©velopper une op√©ration permettant de modifier une ressource de type \"drinks\" √† l'aide de son identifiant et de nouvelles valeurs pour ses propri√©t√©s. \r\n\r\nSelon les conventions REST, une **op√©ration de modification** :\r\n- si l'on accepte de modifier que certaines des propri√©t√©s d'une boisson (que l'on ne doit donc pas fournir toutes les propri√©t√©s d'une boisson), est associ√©e √† une requ√™te de type **`PATCH /drinks/{id}`** contenant l'**identifiant** de la ressource √† supprimer au sein de l'URL comme **param√®tre de route**.\r\n- **contient les nouvelles donn√©es au sein du body** et est de **type PATCH ou PUT**.\r\n\r\nLors de l'ajout d'une boisson, si nous souhaitons modifier une ressource identifi√©e par **`5`** en fournissant un nouveau titre \"Citronnade\", la repr√©sentation des donn√©es de la ressource √† modifier sera la suivante :\r\n```json\r\n{\r\n    \"title\":\"Citronnade\"\r\n}\r\n```\r\n\r\nSelon les conventions REST, la requ√™te de modification est de type PATCH et contient ses param√®tres au sein du body de la requ√™te.\r\n\r\nVoici le code du router **`/routes/drinks.ts`** pour la nouvelle op√©ration √† rajouter dans votre tutoriel en cours :\r\n```ts\r\nrouter.patch(\"/:id\", (req, res) => {\r\n  const id = Number(req.params.id);\r\n  const drink = drinks.find((drink) => drink.id === id);\r\n  if (!drink) {\r\n    return res.sendStatus(404);\r\n  }\r\n\r\n  const body: unknown = req.body;\r\n\r\n  if (\r\n    !body ||\r\n    typeof body !== \"object\" ||\r\n    (\"title\" in body &&\r\n      (typeof body.title !== \"string\" || !body.title.trim())) ||\r\n    (\"image\" in body &&\r\n      (typeof body.image !== \"string\" || !body.image.trim())) ||\r\n    (\"volume\" in body &&\r\n      (typeof body.volume !== \"number\" || body.volume <= 0)) ||\r\n    (\"price\" in body && (typeof body.price !== \"number\" || body.price <= 0))\r\n  ) {\r\n    return res.sendStatus(400);\r\n  }\r\n\r\n  const { title, image, volume, price }: Partial<NewDrink> = body;\r\n\r\n  if (title) {\r\n    drink.title = title;\r\n  }\r\n  if (image) {\r\n    drink.image = image;\r\n  }\r\n  if (volume) {\r\n    drink.volume = volume;\r\n  }\r\n  if (price) {\r\n    drink.price = price;\r\n  }\r\n\r\n  return res.json(drink);\r\n});\r\n```\r\n\r\nAu sein de **`drinks.http`**, veuillez ajouter cette requ√™te pour modifier la boisson poss√©dant l'identifiant \"5\" :\r\n\r\n```http\r\n### Update the drink identified by 5\r\nPATCH {{baseUrl}}/drinks/5\r\nContent-Type: application/json\r\n\r\n{\r\n    \"title\":\"Citronnade\"\r\n}\r\n```\r\n\r\nVeuillez ex√©cuter cette requ√™te et v√©rifier que la boisson a bien √©t√© modifi√©e.\r\n\r\nEn cas de souci, vous pouvez acc√©der au code du tutoriel ici : [basic](https://github.com/e-vinci/ts-demos/tree/main/back/api/basic).\r\n\r\n# <InternalPageTitle> Exercice 1.6 : suppression & modification de ressources </InternalPageTitle>\r\n\r\nVeuillez continuer le d√©veloppement de la RESTful API de **myMovies**, sous Express, afin d'ajouter les op√©rations de suppression et de modification de ressources.\r\n\r\nVeuillez cr√©er un nouveau projet dans votre repo git dans **`/exercises/1.6`** en repartant du code de la solution de votre [Exercice 1.5](#exercice_1_5_codes_de_statut_http).\r\n\r\nVeuillez ajouter ces trois nouvelles op√©rations :\r\n\r\n| URI | M√©thode HTTP | Op√©ration |\r\n|---|---|---|\r\n| **`films/{id}`** | DELETE | DELETE ONE : Effacer la ressource identifi√©e |\r\n| **`films/{id}`** | PATCH | UPDATE ONE : Mettre √† jour les propri√©t√©s de la ressource par les valeurs donn√©es dans la requ√™te, pour une ou plusieurs propri√©t√©s |\r\n| **`films/{id}`** | PUT | UPDATE ONE or CREATE ONE : Remplacer la ressource par une ressource reprenant les valeurs donn√©es dans la requ√™te, seulement si toutes les propri√©t√©s non optionnelles de la ressource sont donn√©es ! Si la ressource n'existe pas, cr√©er cette ressource seulement si l'**`id`** donn√© n'est pas d√©j√† existant. |\r\n\r\nVeuillez bien valider les param√®tres re√ßus par les op√©rations de vos API ; v√©rifiez par exemple que **`budget`** et **`duration`** sont des **nombres positifs**. \r\n\r\nVeuillez **tester toutes les fonctions de la RESTful API** pour la collection de films √† l'aide du **REST Client** dans VS Code. Veuillez ajouter vos requ√™tes au sein du fichier **`films.http`** dans le r√©pertoire **REST Client** du dossier associ√© √† cet exercice.\r\n\r\nEt n'h√©sitez pas √† utiliser le debugger pour tester pas √† pas chaque ligne de vos op√©rations qui ne fournissent pas le r√©sultat attendu.\r\n\r\nVeuillez faire un **`commit`** de votre code avec le message suivant : **`new: ex1.6`**.\r\n\r\n#### üç¨ Challenge optionnel\r\nSi vous avez encore du temps, pour les op√©rations de modification, vous pourriez ajouter une validation des donn√©es plus robuste en assurant qu'aucune propri√©t√© inattendue n'est pr√©sente dans la repr√©sentation de la ressource √† modifier (ou √† cr√©er si c'est un **`put`**).  \r\n\r\nDe plus, pour l'op√©ration `PUT`, lorsqu'il s'agit d'une cr√©ation, vous pourriez ajouter une validation pour v√©rifier que le film n'existe pas d√©j√† (sur base du **`title`** et du **`director`**).\r\n\r\nUne fois tout fonctionnel, veuillez faire un **`commit`** de votre code avec le message suivant : **`new: ex1.6++`**.\r\n\r\n\r\n","fields":{"slug":"/part1/express-api/"},"frontmatter":{"title":"RESTful API","date":null,"navbarExtraStyles":"","headerImage":"","featuredImage":"","description":"Introduction aux RESTful API en Node.js, Express & TS","autoMargin":true}},"allImages":{"edges":[{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/19c44353d690d2192603058b13677c32/050f3/ex2-16-questions.png","srcSet":"/js2/static/19c44353d690d2192603058b13677c32/050f3/ex2-16-questions.png 370w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/19c44353d690d2192603058b13677c32/89e9c/ex2-16-questions.webp 370w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.908108108108108}},"base":"ex2-16-questions.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/7746eb8f2da2b173501f76b41b709419/31045/ex2-16-score.png","srcSet":"/js2/static/7746eb8f2da2b173501f76b41b709419/31045/ex2-16-score.png 268w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/7746eb8f2da2b173501f76b41b709419/adc83/ex2-16-score.webp 268w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.49253731343283585}},"base":"ex2-16-score.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#683898","images":{"fallback":{"src":"/js2/static/53aa06cf17e4239d0dba6ffd09854e02/0cbce/icon.png","srcSet":"/js2/static/53aa06cf17e4239d0dba6ffd09854e02/0cbce/icon.png 512w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/53aa06cf17e4239d0dba6ffd09854e02/cc23f/icon.webp 512w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}},"base":"icon.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8e848","images":{"fallback":{"src":"/js2/static/94e78cdb1293988b357eb1e6074279d9/8cffc/join.png","srcSet":"/js2/static/94e78cdb1293988b357eb1e6074279d9/8cffc/join.png 26w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/94e78cdb1293988b357eb1e6074279d9/2705a/join.webp 26w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.0769230769230769}},"base":"join.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/js2/static/309e0fb8b4416829acfed4f7a501206b/98149/logo_vinci.png","srcSet":"/js2/static/309e0fb8b4416829acfed4f7a501206b/98149/logo_vinci.png 544w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/309e0fb8b4416829acfed4f7a501206b/5eade/logo_vinci.webp 544w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.9044117647058824}},"base":"logo_vinci.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8e848","images":{"fallback":{"src":"/js2/static/814c6001016da3a407035f4cfb117ea5/61ec1/quit.png","srcSet":"/js2/static/814c6001016da3a407035f4cfb117ea5/61ec1/quit.png 28w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/814c6001016da3a407035f4cfb117ea5/fad8c/quit.webp 28w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.9285714285714286}},"base":"quit.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#484848","images":{"fallback":{"src":"/js2/static/d500a235cf91fee0cec65a112a3fd9a8/a166b/backend-frameworks.png","srcSet":"/js2/static/d500a235cf91fee0cec65a112a3fd9a8/a166b/backend-frameworks.png 634w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/d500a235cf91fee0cec65a112a3fd9a8/de393/backend-frameworks.webp 634w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5394321766561514}},"base":"backend-frameworks.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#d88848","images":{"fallback":{"src":"/js2/static/c4a1984e0b0ce60b9f9f72756293a96e/50940/frontend-technos.jpg","srcSet":"/js2/static/c4a1984e0b0ce60b9f9f72756293a96e/50940/frontend-technos.jpg 461w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/c4a1984e0b0ce60b9f9f72756293a96e/9d85c/frontend-technos.webp 461w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5553145336225597}},"base":"frontend-technos.jpg"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/4231407aeb2eab1eb26748522a49f119/1daa6/js-evolution.png","srcSet":"/js2/static/4231407aeb2eab1eb26748522a49f119/1daa6/js-evolution.png 505w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/4231407aeb2eab1eb26748522a49f119/1d9c9/js-evolution.webp 505w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3702970297029703}},"base":"js-evolution.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/852194cf7727296de1adabc80b737b1d/52ccc/critere-eval.jpg","srcSet":"/js2/static/852194cf7727296de1adabc80b737b1d/24844/critere-eval.jpg 750w,\n/js2/static/852194cf7727296de1adabc80b737b1d/52ccc/critere-eval.jpg 844w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/852194cf7727296de1adabc80b737b1d/ba934/critere-eval.webp 750w,\n/js2/static/852194cf7727296de1adabc80b737b1d/f361e/critere-eval.webp 844w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.2890995260663507}},"base":"critere-eval.jpg"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#a8c888","images":{"fallback":{"src":"/js2/static/62895fac28825996f4895ee798c3c5da/964cf/modules-breakdown.png","srcSet":"/js2/static/62895fac28825996f4895ee798c3c5da/ddebf/modules-breakdown.png 750w,\n/js2/static/62895fac28825996f4895ee798c3c5da/964cf/modules-breakdown.png 1056w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/62895fac28825996f4895ee798c3c5da/f59f5/modules-breakdown.webp 750w,\n/js2/static/62895fac28825996f4895ee798c3c5da/280c1/modules-breakdown.webp 1056w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3759469696969697}},"base":"modules-breakdown.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#283848","images":{"fallback":{"src":"/js2/static/79637217dd57af31bd8a8860191ab8d8/dbdf5/most-pop-programming.png","srcSet":"/js2/static/79637217dd57af31bd8a8860191ab8d8/dbdf5/most-pop-programming.png 715w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/79637217dd57af31bd8a8860191ab8d8/349ed/most-pop-programming.webp 715w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8139860139860139}},"base":"most-pop-programming.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/js2/static/fa47b7868326f417638155af9c4e1131/a19b7/mpa-api.png","srcSet":"/js2/static/fa47b7868326f417638155af9c4e1131/1f5ea/mpa-api.png 750w,\n/js2/static/fa47b7868326f417638155af9c4e1131/a19b7/mpa-api.png 847w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/fa47b7868326f417638155af9c4e1131/98a4a/mpa-api.webp 750w,\n/js2/static/fa47b7868326f417638155af9c4e1131/b3688/mpa-api.webp 847w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4628099173553719}},"base":"mpa-api.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/js2/static/0db4cabf70d03ffdaba26ad2279a1f03/36fe5/mpa.png","srcSet":"/js2/static/0db4cabf70d03ffdaba26ad2279a1f03/36fe5/mpa.png 540w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/0db4cabf70d03ffdaba26ad2279a1f03/94f16/mpa.webp 540w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.7259259259259259}},"base":"mpa.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/97447aabc0c3f79a34494e5fa4b0b55d/cd171/planning.png","srcSet":"/js2/static/97447aabc0c3f79a34494e5fa4b0b55d/08018/planning.png 750w,\n/js2/static/97447aabc0c3f79a34494e5fa4b0b55d/b5d65/planning.png 1080w,\n/js2/static/97447aabc0c3f79a34494e5fa4b0b55d/cd171/planning.png 1088w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/97447aabc0c3f79a34494e5fa4b0b55d/f7070/planning.webp 750w,\n/js2/static/97447aabc0c3f79a34494e5fa4b0b55d/6949f/planning.webp 1080w,\n/js2/static/97447aabc0c3f79a34494e5fa4b0b55d/9af3a/planning.webp 1088w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.59375}},"base":"planning.PNG"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/df3eb96d3792fedc90e824b9ff4ee666/9aa96/spa-monolithic.png","srcSet":"/js2/static/df3eb96d3792fedc90e824b9ff4ee666/9aa96/spa-monolithic.png 541w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/df3eb96d3792fedc90e824b9ff4ee666/65253/spa-monolithic.webp 541w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.7245841035120149}},"base":"spa-monolithic.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/e927b7d4c1aab1dd521632761a53f1b6/a19b7/spa.png","srcSet":"/js2/static/e927b7d4c1aab1dd521632761a53f1b6/1f5ea/spa.png 750w,\n/js2/static/e927b7d4c1aab1dd521632761a53f1b6/a19b7/spa.png 847w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/e927b7d4c1aab1dd521632761a53f1b6/98a4a/spa.webp 750w,\n/js2/static/e927b7d4c1aab1dd521632761a53f1b6/b3688/spa.webp 847w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4628099173553719}},"base":"spa.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#283848","images":{"fallback":{"src":"/js2/static/633de32074a1d0717540f1ac88bb3e95/dbdf5/web-frameworks.png","srcSet":"/js2/static/633de32074a1d0717540f1ac88bb3e95/dbdf5/web-frameworks.png 715w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/633de32074a1d0717540f1ac88bb3e95/349ed/web-frameworks.webp 715w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8139860139860139}},"base":"web-frameworks.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/d5538808d9455e309732cc72d3c16094/5a8ae/bom.png","srcSet":"/js2/static/d5538808d9455e309732cc72d3c16094/5a8ae/bom.png 361w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/d5538808d9455e309732cc72d3c16094/44051/bom.webp 361w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8531855955678671}},"base":"bom.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/js2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/05d72/browser.png","srcSet":"/js2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/e81f3/browser.png 750w,\n/js2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/05d72/browser.png 815w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/7c1ed/browser.webp 750w,\n/js2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/9c789/browser.webp 815w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6269938650306749}},"base":"browser.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/js2/static/e795fd2fb63aea24f1a6ec7e3b46dc57/b749b/JSdude.png","srcSet":"/js2/static/e795fd2fb63aea24f1a6ec7e3b46dc57/27b15/JSdude.png 750w,\n/js2/static/e795fd2fb63aea24f1a6ec7e3b46dc57/b749b/JSdude.png 1024w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/e795fd2fb63aea24f1a6ec7e3b46dc57/cfe1c/JSdude.webp 750w,\n/js2/static/e795fd2fb63aea24f1a6ec7e3b46dc57/5e515/JSdude.webp 1024w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}},"base":"JSdude.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/815bb84493b798e20f6e050fe7d4f297/8ac59/bytes.heif","srcSet":"/js2/static/815bb84493b798e20f6e050fe7d4f297/8ac59/bytes.heif 730w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/815bb84493b798e20f6e050fe7d4f297/fa94f/bytes.webp 730w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8041095890410959}},"base":"bytes.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/8336698fa5a4150652bf24675d81d450/b818d/console.png","srcSet":"/js2/static/8336698fa5a4150652bf24675d81d450/b818d/console.png 584w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/8336698fa5a4150652bf24675d81d450/2cd0a/console.webp 584w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5941780821917808}},"base":"console.PNG"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#181818","images":{"fallback":{"src":"/js2/static/a2704f93c050f1b8f0af184bca0784e5/bfbd8/copy.png","srcSet":"/js2/static/a2704f93c050f1b8f0af184bca0784e5/bfbd8/copy.png 41w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/a2704f93c050f1b8f0af184bca0784e5/54421/copy.webp 41w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.048780487804878}},"base":"copy.PNG"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/20e0138ec54042c9ab8df2df718b51c7/ad8b1/cssom.heif","srcSet":"/js2/static/20e0138ec54042c9ab8df2df718b51c7/ad8b1/cssom.heif 730w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/20e0138ec54042c9ab8df2df718b51c7/4fc4f/cssom.webp 730w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3136986301369863}},"base":"cssom.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/7c8ef3e05614d0f1331eb1622972209f/ad8b1/dom.heif","srcSet":"/js2/static/7c8ef3e05614d0f1331eb1622972209f/ad8b1/dom.heif 730w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/7c8ef3e05614d0f1331eb1622972209f/4fc4f/dom.webp 730w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3136986301369863}},"base":"dom.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/2c0e805dbcef0b4210fddd87f2fdcd0b/7d9c5/dom2.gif","srcSet":"/js2/static/2c0e805dbcef0b4210fddd87f2fdcd0b/7d9c5/dom2.gif 486w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/2c0e805dbcef0b4210fddd87f2fdcd0b/3b54a/dom2.webp 486w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5473251028806584}},"base":"dom2.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8d818","images":{"fallback":{"src":"/js2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/efde9/js-logo.png","srcSet":"/js2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/27b15/js-logo.png 750w,\n/js2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/efde9/js-logo.png 768w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/cfe1c/js-logo.webp 750w,\n/js2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/ea3b7/js-logo.webp 768w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}},"base":"js-logo.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/9f49136562a5d771c51d7600430566b1/38d9f/eventflow.png","srcSet":"/js2/static/9f49136562a5d771c51d7600430566b1/38d9f/eventflow.png 480w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/9f49136562a5d771c51d7600430566b1/cd74b/eventflow.webp 480w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.1666666666666667}},"base":"eventflow.png"}},{"node":{"childImageSharp":null,"base":"red-light.gif"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/283b4c657f5c4a706c3e29d0a08fd451/7edf3/render.heif","srcSet":"/js2/static/283b4c657f5c4a706c3e29d0a08fd451/7edf3/render.heif 730w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/283b4c657f5c4a706c3e29d0a08fd451/29aef/render.webp 730w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4383561643835616}},"base":"render.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#282828","images":{"fallback":{"src":"/js2/static/302e83d40f9486ab7ea528e217821223/d5cd3/start.png","srcSet":"/js2/static/302e83d40f9486ab7ea528e217821223/d5cd3/start.png 511w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/302e83d40f9486ab7ea528e217821223/02192/start.webp 511w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.40117416829745595}},"base":"start.PNG"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/js2/static/14110746b5f49459429c355815cd77b3/10f52/express-flow.png","srcSet":"/js2/static/14110746b5f49459429c355815cd77b3/eb8cd/express-flow.png 750w,\n/js2/static/14110746b5f49459429c355815cd77b3/10f52/express-flow.png 800w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/14110746b5f49459429c355815cd77b3/4e646/express-flow.webp 750w,\n/js2/static/14110746b5f49459429c355815cd77b3/130b6/express-flow.webp 800w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3825}},"base":"express-flow.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#c8e8d8","images":{"fallback":{"src":"/js2/static/5c1c4cd476b1911739976c74d5457e03/60e67/middlewares.jpg","srcSet":"/js2/static/5c1c4cd476b1911739976c74d5457e03/60e67/middlewares.jpg 638w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/5c1c4cd476b1911739976c74d5457e03/f273c/middlewares.webp 638w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.7288401253918495}},"base":"middlewares.jpg"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/ff2054d2907d5ebd494875c12fe16a3d/d40cb/middleware-function.png","srcSet":"/js2/static/ff2054d2907d5ebd494875c12fe16a3d/7cb90/middleware-function.png 750w,\n/js2/static/ff2054d2907d5ebd494875c12fe16a3d/d40cb/middleware-function.png 944w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/ff2054d2907d5ebd494875c12fe16a3d/4ffb0/middleware-function.webp 750w,\n/js2/static/ff2054d2907d5ebd494875c12fe16a3d/6c417/middleware-function.webp 944w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.298728813559322}},"base":"middleware-function.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/4af4b8ccca63d0a981c68a20bb9658e1/cc4c8/techno-course.png","srcSet":"/js2/static/4af4b8ccca63d0a981c68a20bb9658e1/cc4c8/techno-course.png 721w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/4af4b8ccca63d0a981c68a20bb9658e1/7f7c1/techno-course.webp 721w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5575589459084604}},"base":"techno-course.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/dbf7fef0d0623475d157204fd950008e/cbf92/techno.png","srcSet":"/js2/static/dbf7fef0d0623475d157204fd950008e/cbf92/techno.png 586w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/dbf7fef0d0623475d157204fd950008e/09c5a/techno.webp 586w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8464163822525598}},"base":"techno.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/593d65b45ead31d08b777b977530fbb0/257c8/form.png","srcSet":"/js2/static/593d65b45ead31d08b777b977530fbb0/257c8/form.png 182w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/593d65b45ead31d08b777b977530fbb0/aa09a/form.webp 182w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.1868131868131868}},"base":"form.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/a4d45cc8f767378935f1a47c6a814bff/c4448/table.png","srcSet":"/js2/static/a4d45cc8f767378935f1a47c6a814bff/c4448/table.png 219w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/a4d45cc8f767378935f1a47c6a814bff/5ce26/table.webp 219w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.547945205479452}},"base":"table.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#282828","images":{"fallback":{"src":"/js2/static/995b19933afe2efc8abdad9e056f7eb0/c35a8/terminal-1.png","srcSet":"/js2/static/995b19933afe2efc8abdad9e056f7eb0/c35a8/terminal-1.png 481w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/995b19933afe2efc8abdad9e056f7eb0/8a064/terminal-1.webp 481w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.2390852390852392}},"base":"terminal-1.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#181818","images":{"fallback":{"src":"/js2/static/ec94e10b96163ba7dff989c8073526c9/e4d4e/terminal-2.png","srcSet":"/js2/static/ec94e10b96163ba7dff989c8073526c9/d328f/terminal-2.png 750w,\n/js2/static/ec94e10b96163ba7dff989c8073526c9/e4d4e/terminal-2.png 933w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/ec94e10b96163ba7dff989c8073526c9/dea86/terminal-2.webp 750w,\n/js2/static/ec94e10b96163ba7dff989c8073526c9/92d06/terminal-2.webp 933w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.2722400857449089}},"base":"terminal-2.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/8c454120ed3743524b977a50efee14ae/75d45/architecture.png","srcSet":"/js2/static/8c454120ed3743524b977a50efee14ae/c33b9/architecture.png 750w,\n/js2/static/8c454120ed3743524b977a50efee14ae/75d45/architecture.png 859w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/8c454120ed3743524b977a50efee14ae/013ea/architecture.webp 750w,\n/js2/static/8c454120ed3743524b977a50efee14ae/3c3f0/architecture.webp 859w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6030267753201397}},"base":"architecture.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#e8e8e8","images":{"fallback":{"src":"/js2/static/d0eb9efdef86cf105b8020519b702c01/f6ece/pizza2.jpg","srcSet":"/js2/static/d0eb9efdef86cf105b8020519b702c01/e1af2/pizza2.jpg 750w,\n/js2/static/d0eb9efdef86cf105b8020519b702c01/f6ece/pizza2.jpg 800w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/d0eb9efdef86cf105b8020519b702c01/7f694/pizza2.webp 750w,\n/js2/static/d0eb9efdef86cf105b8020519b702c01/4447d/pizza2.webp 800w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6675}},"base":"pizza2.jpg"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/e5078/authorizeNOK.png","srcSet":"/js2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/8770b/authorizeNOK.png 750w,\n/js2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/e5078/authorizeNOK.png 809w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/35881/authorizeNOK.webp 750w,\n/js2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/a88f0/authorizeNOK.webp 809w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6093943139678616}},"base":"authorizeNOK.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/7019197416b607b814455c5cde2bfd8d/8a955/authorizeOK.png","srcSet":"/js2/static/7019197416b607b814455c5cde2bfd8d/8a955/authorizeOK.png 747w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/7019197416b607b814455c5cde2bfd8d/b344d/authorizeOK.webp 747w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6666666666666666}},"base":"authorizeOK.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/cd56be61925d779c9a23f9ecdea56e09/fb68f/login.png","srcSet":"/js2/static/cd56be61925d779c9a23f9ecdea56e09/e56fa/login.png 750w,\n/js2/static/cd56be61925d779c9a23f9ecdea56e09/fb68f/login.png 879w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/cd56be61925d779c9a23f9ecdea56e09/5510b/login.webp 750w,\n/js2/static/cd56be61925d779c9a23f9ecdea56e09/da356/login.webp 879w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5017064846416383}},"base":"login.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8d8d8","images":{"fallback":{"src":"/js2/static/02183504e2708ac3e446f29003c8d7bc/60bc5/hacked.png","srcSet":"/js2/static/02183504e2708ac3e446f29003c8d7bc/60bc5/hacked.png 744w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/02183504e2708ac3e446f29003c8d7bc/67170/hacked.webp 744w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4206989247311828}},"base":"hacked.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/13b65def72e9840d86bcf161d0140f2d/487a4/places.png","srcSet":"/js2/static/13b65def72e9840d86bcf161d0140f2d/8d835/places.png 750w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/9b397/places.png 1080w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/c1308/places.png 1366w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/487a4/places.png 1599w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/13b65def72e9840d86bcf161d0140f2d/25f33/places.webp 750w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/f7d3e/places.webp 1080w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/cab24/places.webp 1366w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/e838a/places.webp 1599w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.35709818636647905}},"base":"places.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/718a6/cors-issue.png","srcSet":"/js2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/3b3b8/cors-issue.png 750w,\n/js2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/718a6/cors-issue.png 1031w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/148ba/cors-issue.webp 750w,\n/js2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/53c8e/cors-issue.webp 1031w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.29582929194956353}},"base":"cors-issue.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/df999928d139b76e4624212deb47afa1/c60dc/ajax.png","srcSet":"/js2/static/df999928d139b76e4624212deb47afa1/c60dc/ajax.png 569w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/df999928d139b76e4624212deb47afa1/9f538/ajax.webp 569w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8927943760984183}},"base":"ajax.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/368b66a6c71ce7ae5149f7fe124c67b4/dedcf/independentFrontBackSPA.png","srcSet":"/js2/static/368b66a6c71ce7ae5149f7fe124c67b4/aa4e8/independentFrontBackSPA.png 750w,\n/js2/static/368b66a6c71ce7ae5149f7fe124c67b4/dedcf/independentFrontBackSPA.png 914w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/368b66a6c71ce7ae5149f7fe124c67b4/54e6a/independentFrontBackSPA.webp 750w,\n/js2/static/368b66a6c71ce7ae5149f7fe124c67b4/d4860/independentFrontBackSPA.webp 914w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.48468271334792123}},"base":"independentFrontBackSPA.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8e8e8","images":{"fallback":{"src":"/js2/static/cd7a86517cd86bf67e97a9455782f61e/3a7c2/errors.png","srcSet":"/js2/static/cd7a86517cd86bf67e97a9455782f61e/3a7c2/errors.png 589w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/cd7a86517cd86bf67e97a9455782f61e/8d14e/errors.webp 589w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.43803056027164683}},"base":"errors.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/5033887241592124140462a48f880b31/4c60e/independentFrontBackSPA2.png","srcSet":"/js2/static/5033887241592124140462a48f880b31/57832/independentFrontBackSPA2.png 750w,\n/js2/static/5033887241592124140462a48f880b31/4c60e/independentFrontBackSPA2.png 852w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/5033887241592124140462a48f880b31/73ed4/independentFrontBackSPA2.webp 750w,\n/js2/static/5033887241592124140462a48f880b31/fa338/independentFrontBackSPA2.webp 852w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5762910798122066}},"base":"independentFrontBackSPA2.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/11b64c3a36326f1301636f365163fa87/487a4/carousel.png","srcSet":"/js2/static/11b64c3a36326f1301636f365163fa87/8d835/carousel.png 750w,\n/js2/static/11b64c3a36326f1301636f365163fa87/9b397/carousel.png 1080w,\n/js2/static/11b64c3a36326f1301636f365163fa87/c1308/carousel.png 1366w,\n/js2/static/11b64c3a36326f1301636f365163fa87/487a4/carousel.png 1599w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/11b64c3a36326f1301636f365163fa87/25f33/carousel.webp 750w,\n/js2/static/11b64c3a36326f1301636f365163fa87/f7d3e/carousel.webp 1080w,\n/js2/static/11b64c3a36326f1301636f365163fa87/cab24/carousel.webp 1366w,\n/js2/static/11b64c3a36326f1301636f365163fa87/e838a/carousel.webp 1599w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.35709818636647905}},"base":"carousel.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#0878b8","images":{"fallback":{"src":"/js2/static/216c8f19b48a13e3af5020937c6495fe/3f056/deployment.png","srcSet":"/js2/static/216c8f19b48a13e3af5020937c6495fe/f74f0/deployment.png 750w,\n/js2/static/216c8f19b48a13e3af5020937c6495fe/3f056/deployment.png 881w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/216c8f19b48a13e3af5020937c6495fe/00e18/deployment.webp 750w,\n/js2/static/216c8f19b48a13e3af5020937c6495fe/73e10/deployment.webp 881w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5811577752553916}},"base":"deployment.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/a0a9be40f52062756989e43e359b5c44/4ca31/liveServerFrontSPA.png","srcSet":"/js2/static/a0a9be40f52062756989e43e359b5c44/96859/liveServerFrontSPA.png 750w,\n/js2/static/a0a9be40f52062756989e43e359b5c44/4ca31/liveServerFrontSPA.png 751w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/a0a9be40f52062756989e43e359b5c44/3f918/liveServerFrontSPA.webp 750w,\n/js2/static/a0a9be40f52062756989e43e359b5c44/61905/liveServerFrontSPA.webp 751w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4274300932090546}},"base":"liveServerFrontSPA.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/945336ab536627610c9e7fa03999caa2/746ba/proxy.png","srcSet":"/js2/static/945336ab536627610c9e7fa03999caa2/746ba/proxy.png 691w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/945336ab536627610c9e7fa03999caa2/03d38/proxy.webp 691w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6353111432706222}},"base":"proxy.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/4cf8132263a3922a81198d62fa668e8c/8af70/monolithicSPA.png","srcSet":"/js2/static/4cf8132263a3922a81198d62fa668e8c/9fdee/monolithicSPA.png 750w,\n/js2/static/4cf8132263a3922a81198d62fa668e8c/8af70/monolithicSPA.png 758w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/4cf8132263a3922a81198d62fa668e8c/e02a2/monolithicSPA.webp 750w,\n/js2/static/4cf8132263a3922a81198d62fa668e8c/1677e/monolithicSPA.webp 758w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.712401055408971}},"base":"monolithicSPA.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/9482be8bcc11374b223c4bff1aaa7cef/6c4d1/movies.png","srcSet":"/js2/static/9482be8bcc11374b223c4bff1aaa7cef/44ede/movies.png 750w,\n/js2/static/9482be8bcc11374b223c4bff1aaa7cef/c97ea/movies.png 1080w,\n/js2/static/9482be8bcc11374b223c4bff1aaa7cef/6c4d1/movies.png 1268w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/9482be8bcc11374b223c4bff1aaa7cef/9378c/movies.webp 750w,\n/js2/static/9482be8bcc11374b223c4bff1aaa7cef/6e0c3/movies.webp 1080w,\n/js2/static/9482be8bcc11374b223c4bff1aaa7cef/498dd/movies.webp 1268w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.38564668769716093}},"base":"movies.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/04662f2f0ed1b78bd5ead2c3dec85482/36714/readPizzas.png","srcSet":"/js2/static/04662f2f0ed1b78bd5ead2c3dec85482/36714/readPizzas.png 523w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/04662f2f0ed1b78bd5ead2c3dec85482/dfd8f/readPizzas.webp 523w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.7304015296367113}},"base":"readPizzas.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/8eb2b12643e10670a4e4234ccd8a844e/3d704/xss.png","srcSet":"/js2/static/8eb2b12643e10670a4e4234ccd8a844e/613e6/xss.png 750w,\n/js2/static/8eb2b12643e10670a4e4234ccd8a844e/103d4/xss.png 1080w,\n/js2/static/8eb2b12643e10670a4e4234ccd8a844e/3d704/xss.png 1108w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/8eb2b12643e10670a4e4234ccd8a844e/18c9f/xss.webp 750w,\n/js2/static/8eb2b12643e10670a4e4234ccd8a844e/51d3a/xss.webp 1080w,\n/js2/static/8eb2b12643e10670a4e4234ccd8a844e/88976/xss.webp 1108w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.2842960288808664}},"base":"xss.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#d8d8e8","images":{"fallback":{"src":"/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/87754/pizza.jpg","srcSet":"/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/b3dd7/pizza.jpg 750w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/870fe/pizza.jpg 1080w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/f640e/pizza.jpg 1366w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/87754/pizza.jpg 1920w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/2daa0/pizza.webp 750w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/1aa4f/pizza.webp 1080w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/8647b/pizza.webp 1366w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/902b5/pizza.webp 1920w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.5}},"base":"pizza.jpg"}}]}},"pageContext":{"slug":"/part1/express-api/","frontmatter":{"title":"RESTful API","description":"Introduction aux RESTful API en Node.js, Express & TS"}}},"staticQueryHashes":["1696221415","2461182183","3028011774","3458129946","501654901","575455071","641954533","758242238"],"slicesMap":{}}