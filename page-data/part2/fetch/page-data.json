{"componentChunkName":"component---src-templates-mdx-pages-js-content-file-path-src-mdx-pages-part-2-fetch-fr-mdx","path":"/part2/fetch/","result":{"data":{"mdx":{"id":"07508274-3868-5232-87e7-f990cda49284","body":"\n# g) Les requ√™tes & promises\n\n<InternalPageMenu>\n  <PathViewer>\n    <PathViewerItem to=\"/\"> web2course </PathViewerItem>\n    <PathViewerItem to=\"/part2\"> Partie 2 </PathViewerItem>\n    <PathViewerItem selected> g) Les requ√™tes & promises </PathViewerItem>\n  </PathViewer>\n  <InternalPageMenuItem> Fetch de donn√©es </InternalPageMenuItem>\n  <InternalPageMenuItem> useEffect </InternalPageMenuItem>\n  <InternalPageMenuItem> Les \"promises\" & fetch </InternalPageMenuItem>\n  <InternalPageMenuItem> Exercice 2.13 : Premier fetch online </InternalPageMenuItem> \n  <InternalPageMenuItem> Exercice 2.13b : Un autre fetch online </InternalPageMenuItem> \n  <InternalPageMenuItem> Gestion d'√©v√©nements associ√©s au temps </InternalPageMenuItem>\n  <InternalPageMenuItem> Exercice 2.14 : Gestion d'√©v√©nement temporel </InternalPageMenuItem>\n  <InternalPageMenuItem> async / await </InternalPageMenuItem>\n  <InternalPageMenuItem> Exercice 2.14b : async / await p√©riodique  </InternalPageMenuItem>\n  <InternalPageMenuItem> Op√©ration asynchrone d'√©criture d'une ressource </InternalPageMenuItem>\n  <InternalPageMenuItem> Cr√©ation de fonctions asynchrones renvoyant une promesse </InternalPageMenuItem>\n    <InternalPageMenuItem> Single Origin Policy & CORS </InternalPageMenuItem>\n  <InternalPageMenuItem> Simulation d'une m√™me origine via un proxy </InternalPageMenuItem>\n  <InternalPageMenuItem> Exercice 2.15 : Proxy & async / await </InternalPageMenuItem> \n  <InternalPageMenuItem> Exercice 2.15b : async / await : effacer une ressource </InternalPageMenuItem>\n\n</InternalPageMenu>\n\n# <InternalPageTitle> Fetch de donn√©es </InternalPageTitle>\n\nLa m√©thode **`fetch`** permet de faire des requ√™tes HTTP d'un browser vers des API.\n\nCette m√©thode est asynchrone, c'est-√†-dire quelle n'est pas bloquante, elle renvoie des promesses de r√©sultats via des objets **`Promise`**. Dans un premier temps, nous allons de mani√®re intuitive d√©couvrir la programmation asynchrone. Nous verrons plus en d√©tails par la suite ce type de programmation √† l'aide de **promises** (les promesses).\n\nSi un jour vous avez besoin d'en savoir plus sur la m√©thode **`fetch`**, n'h√©sitez pas √† consulter la [documentation MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch) [[R.61]](/references/#r61).\n\nPour ce tutoriel, veuillez cr√©er une copie du tutoriel `routing-state`, si n√©cessaire voici le code du tutoriel [routing-state](https://github.com/e-vinci/ts-demos/tree/main/front/routing-state), et l'appeler `fetch-no-proxy`. Changez le nom du projet dans `package.json`.\n\nActuellement, les **`pizzas`** du menu sont \"hardcod√©es\" dans `App`.  \n\nNous souhaitons changer √ßa : afin de r√©cup√©rer une liste de pizzas, l'IHM doit faire une requ√™te **`fetch`** √† notre RESTful API d√©velopp√©e dans la partie [Refactoring √† l'aide de services](../../part1/refactoring/) :\n[services](https://github.com/e-vinci/js-demos/tree/main/back/api/services).\n\nNous n'allons donc plus utiliser REST Client mais une fonction offerte par le browser pour faire l'√©quivalent de cette requ√™te :\n\n```http\n### Read all pizzas with File variable\nGET {{baseUrl}}/pizzas\n```\n\nVeuillez mettre √† jour `App` en supprimant l'array **`pizzas`** et en rajoutant la requ√™te `fetch` : \n```tsx numbered highlighting=\"1,5-18\"\nconst App = () => {\n  const [actionToBePerformed, setActionToBePerformed] = useState(false);\n  const [pizzas, setPizzas] = useState<Pizza[]>([]);\n\n  useEffect(() => {\n    fetch(\"http://localhost:3000/pizzas\")\n      .then((response) => {\n        if (!response.ok)\n          throw new Error(\n            `fetch error : ${response.status} : ${response.statusText}`\n          );\n        return response.json();\n      })\n      .then((pizzas) => setPizzas(pizzas))\n      .catch((err) => {\n        console.error(\"HomePage::error: \", err);\n      });\n  }, []);\n\n  // Reste du code inchang√©\n```\n\nMalheureusement, cela ne fonctionne pas, nous avons cette erreur : `Access to fetch at 'http://localhost:3000/pizzas' from origin 'http://localhost:5173' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.`.\n\nNous allons apprendre √† r√©soudre cette erreur dans la partie qui suit, car celle-ci d√©pend de la fa√ßon dont l'API a √©t√© configur√©e. A ce stade-ci, pour voir l'application fonctionner, veuillez :\n- Stopper la RESTful API ;\n- T√©l√©charger, et d√©sarchiver cette API : <LinkFile name=\"api-json-server.zip\" target=\"_blank\" download> RESTful API offerte gr√¢ce √† json-server </LinkFile>\n- Lancer l'API t√©l√©charg√©e : \n  - Ouvrir un terminal dans son r√©pertoire.\n  - Installation des packages : **`npm i`**\n  - Ex√©cution de l'API : **`npm start`**\n- Faire un refresh au niveau de votre browser. \n\nLe menu des pizzas devrait s'afficher üéâ.  \nLe code va √™tre expliqu√© dans la suite du tutoriel.\n\nSi n√©cessaire, vous pouvez trouver le code associ√© √† ce tutoriel ici : [fetch-no-proxy](https://github.com/e-vinci/ts-demos/tree/main/front/fetch-no-proxy).\n\n# <InternalPageTitle> useEffect </InternalPageTitle>\n\nMais √† quoi sert `useEffect` dans un composant React ?\n\n`useEffect` est un hook de React qui permet d'ex√©cuter des effets secondaires dans nos composants fonctionnels. Les effets secondaires peuvent inclure des op√©rations telles que la r√©cup√©ration de donn√©es depuis une API, la manipulation directe du DOM, la configuration de timers, etc.\n\nLe code √† l'int√©rieur de `useEffect` est une fonction qui sera ex√©cut√©e apr√®s que le composant soit rendu.\n\nLe tableau vide `[]` en second argument signifie que cet effet ne s'ex√©cutera qu'une seule fois, apr√®s le premier rendu du composant :\n\n```tsx highlighting=\"5-7\"\nconst App = () => {\n  const [actionToBePerformed, setActionToBePerformed] = useState(false);\n  const [pizzas, setPizzas] = useState<Pizza[]>([]);\n\n  useEffect(() => {\n   // Code de la fonction\n  }, []);\n  // ...\n```\n\nSi vous aviez mis des variables d'√©tat dans ce tableau, l'effet se serait ex√©cut√© √† chaque fois que ces variables auraient chang√©.\n\nUn exemple est donn√© dans le composant `AudioPlayer` du tutoriel : \n```ts\nconst AudioPlayer = ({\n  sound,\n  actionToBePerformed,\n  clearActionToBePerformed,\n}: AudioPlayerProps) => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const audioRef = useRef<HTMLAudioElement>(null);\n\n  useEffect(() => {\n    const audioElement = audioRef.current;\n\n    if (audioElement && actionToBePerformed) {\n      console.log(\"actionToBePerformed\", actionToBePerformed);\n      if (audioElement.paused) audioElement.play();\n      else audioElement.pause();\n      clearActionToBePerformed();\n    }\n  }, [actionToBePerformed]);\n```\n\nLa fonction a l'int√©rieur de `useEffect` ne sera appel√©e que si la valeur de `actionToBePerformed` change.\n\nEn r√©sum√©, pour les fetch de donn√©es, si on souhaite le faire qu'une seule fois, au tout premier rendu du composant, alors il faut utiliser `useEffect` avec un `[]` en deuxi√®me param√®tre.\n\nLa suite va expliquer les fondements de la programmation asynchrone en JS/TS.\n\n# <InternalPageTitle> Les \"promises\" & fetch </InternalPageTitle>\n\nLa m√©thode **`fetch`** renvoie une **`Promise`**, qui est un objet repr√©sentant un √©tat interm√©diaire d'une op√©ration. Le code des callbacks s'ex√©cute quand la t√¢che asynchrone est finie avec succ√®s ou si la t√¢che √©choue.\n\nLes √©tats d'une promesse sont les suivants :\n\n- **pending** : √©tat initial,\n- **fulfilled** : l'op√©ration asynchrone a √©t√© termin√©e avec succ√®s ; par exemple la requ√™te **`fetch()`** a obtenu un flux de donn√©es avec la RESTful API,\n- **rejected** : l'op√©ration asynchrone a √©chou√©e ; par exemple la requ√™te **`fetch`** est mal construite.\n\nPour r√©cup√©rer le r√©sultat d'une m√©thode asynchrone, on va faire appel :\n- **`.then( callback )`** : ce morceau de code permet de cha√Æner des traitements asynchrones. Par exemple, √† la fin du premier traitement asynchrone associ√© au **`fetch()`**, on appelle\n\n```ts numbered highlighting=\"2-8\"\nfetch(\"http://localhost:3000/pizzas\")\n      .then((response) => {\n        if (!response.ok)\n          throw new Error(\n            `fetch error : ${response.status} : ${response.statusText}`\n          );\n        return response.json();\n      })\n      .then((pizzas) => setPizzas(pizzas))\n      .catch((err) => {\n        console.error(\"HomePage::error: \", err);\n      });\n```\n\nLa **callback** sera appel√©e et recevra comme param√®tre un objet de type **`Response`** : cet objet ne contient pas encore le contenu du body de la r√©ponse. En fait, **`Response.body`** est un flux de donn√©es (un stream), il faudra donc faire appel √† un traitement asynchrone pour obtenir le contenu du body sous forme d'un objet JS.  \nC'est ce qui est fait en renvoyant **`return response.json();`** : la fonction **`json()`** renvoie une promesse, c'est √† dire qu'une fois le traitement termin√©, nous pourrons cha√Æner celui-ci via un autre **`.then()`**.\nC'est ainsi que nous cha√Ænons, une fois le **`body`** disponible, l'appel d'une deuxi√®me **callback** qui s'occupe de mettre √† jour la variable d'√©tat `pizza`. Cette deuxi√®me **callback** recevra en param√®tre le body de la r√©ponse sous forme d'un objet JS :\n\n```ts numbered highlighting=\"9\"\nfetch(\"http://localhost:3000/pizzas\")\n      .then((response) => {\n        if (!response.ok)\n          throw new Error(\n            `fetch error : ${response.status} : ${response.statusText}`\n          );\n        return response.json();\n      })\n      .then((pizzas) => setPizzas(pizzas))\n      .catch((err) => {\n        console.error(\"HomePage::error: \", err);\n      });\n```\n\n**`.catch( callback )`** : ce morceau de code permet d'ex√©cuter une **callback** lorsque la t√¢che asynchrone associ√©e √† la promesse √©choue. Dans le code, on voit que l'on affiche juste un message dans la console :\n\n```js numbered highlighting=\"10-12\"\nfetch(\"http://localhost:3000/pizzas\")\n      .then((response) => {\n        if (!response.ok)\n          throw new Error(\n            `fetch error : ${response.status} : ${response.statusText}`\n          );\n        return response.json();\n      })\n      .then((pizzas) => setPizzas(pizzas))\n      .catch((err) => {\n        console.error(\"HomePage::error: \", err);\n      });\n```\n\n**`.finally( callback )`** : si l'on souhaite ex√©cuter une callback quelque soit le r√©sultat de la promesse, en cas de succ√®s ou d'√©chec.\n\n‚ö° Pour le cha√Ænage des traitements via plusieurs callback appel√©es au sein de **`.then()`**, cela n'est possible que s'il y a un **`return`** dans les callback.\n\nEn effet, si une callback dans la gestion de promesses retourne :\n\n- **Une valeur** : la promesse retourn√©e par **`then`** est r√©solue avec la valeur.\n- **Pas de valeur** : la promesse retourn√©e par **`then`** est r√©solue avec **`undefined`**.\n- **Une autre promesse \"pending\"**: la promesse retourn√©e par **`then`** est r√©solue/rejet√©e √† la suite de la r√©solution/rejet de la promesse retourn√©e par la **callback**.\n\nPour info, autrefois, pour la programmation asynchrone en JS, nous utilisions simplement les callbacks, des fonctions que l'on passait en argument d'autres fonctions. Le code pouvait facilement devenir illisible et donc difficilement maintenable.\n\n\n# <InternalPageTitle> Exercice 2.13 : Premier fetch online </InternalPageTitle>\n\nNous souhaitons consommer une API qui nous permette d'afficher des blagues.  \nNous avons trouv√© une restful API qui permet tr√®s facilement de g√©n√©rer de mani√®re al√©atoire des **`jokes`** : [JokeAPI](https://v2.jokeapi.dev/).\n\nCette API est tr√®s simple d'utilisation. D'ailleurs, la page du site [JokeAPI](https://v2.jokeapi.dev/) vous donne un exemple fonctionnel de comment r√©cup√©rer des blagues simples dans l'onglet **`Try it out here`**. Pour cela, d√©s√©lectionnez **`twopart`** et vous obtenez l'URL pour faire vos requ√™tes en dessous du formulaire.\n\nVeuillez cr√©er un nouveau projet en utilisant les technos Vite + React + TS + SWC nomm√© `/exercises/2.13-14` dans votre repo git.\n\nDans votre application, veuillez afficher une **`joke`** apr√®s l'avoir r√©cup√©r√©e de **`JokeAPI`**, en donnant ces 2 informations :\n- la cat√©gorie associ√©e √† la **`joke`** ;\n- le texte associ√© √† la **`joke`**.\n\nUne fois tout fonctionnel, veuillez faire un commit avec le message suivant : **`new:ex2.13`**.\n\n# <InternalPageTitle> Exercice 2.13b : Un autre fetch online </InternalPageTitle>\n\nNous avons trouv√© une restful API qui permet tr√®s facilement de g√©n√©rer de mani√®re al√©atoire des photos de chiens : [Dog API](https://dog.ceo/dog-api/).\n\nCette API est tr√®s simple d'utilisation. D'ailleurs, la page du site [Dog API](https://dog.ceo/dog-api/) vous donne un exemple fonctionnel de comment r√©cup√©rer al√©atoirement une photo de chien.\n\nVeuillez cr√©er un nouveau projet en utilisant les technos Vite + React + TS + SWC nomm√© `/exercises/2.13b` dans votre repo git.\n\nDans votre application, veuillez afficher 3 photos al√©atoires de chiens. Veuillez ajouter un bouton qui permette de rafra√Æchir les photos avec 3 nouvelles photos al√©atoires.\n\nComme contrainte d'impl√©mentation, vous devez cr√©er un composant **`RandomDog`** et l'appeler 3 fois dans votre composant principal. \n\nUne fois tout fonctionnel, veuillez faire un commit avec le message suivant : **`new:ex2.13b`**.\n\n#### ü§ù Tips\n- Comment forcer le composant `App` √† faire un rerender de ses enfants ?  \n  Vous pouvez utiliser un √©tat qui sera modifi√© √† chaque fois que vous cliquez sur le bouton de rafra√Æchissement des photos de chiens.  \n  Cela forcera le composant `App` √† faire un rerender de ses enfants.\n- Pensez √† faire en sorte, pour que le rerender des enfants fonctionne, qu'une nouvelle cl√© soit g√©n√©r√©e pour chaque enfant (`RandomDog`). Si aucune cl√© n'est g√©n√©r√©e, React ne fera pas de rerender des enfants, car il consid√®re que les enfants n'ont pas chang√© ; )\n\n# <InternalPageTitle> Gestion d'√©v√©nements associ√©s au temps  </InternalPageTitle>\n\n## Gestion d'un timer\n**`setTimeout(f,t)`** permet l'ex√©cution d'une callback **`f`** √† l'expiration d'un timer, apr√®s **`t`** ms.\n\n**`clearTimeout()`** permet de stopper l'ex√©cution d'une callback qui a √©t√© appel√©e via **`setTimeout()`**.\n\nCet exemple montre comment mettre en place un minuteur qui met √† jour un √©tat apr√®s 3 secondes :\n```tsx numbered highlighting=\"8-10,13\"\nimport { useState, useEffect } from 'react';\n\nconst TimerComponent = () => {\n  const [message, setMessage] = useState('Attendez 3 secondes...');\n\n  useEffect(() => {\n    // D√©finir un timer de 3 secondes\n    const timer = setTimeout(() => {\n      setMessage('3 secondes se sont √©coul√©es!');\n    }, 3000);\n\n    // Nettoyage du timer pour √©viter des fuites de m√©moire si le composant est d√©mont√© avant que le timer se d√©clenche\n    return () => clearTimeout(timer);\n  }, []); // Le tableau vide [] signifie que cet effet s'ex√©cute une seule fois lors du montage\n\n  return (\n    <div>\n      <p>{message}</p>\n    </div>\n  );\n};\n\nexport default TimerComponent;\n```\n\nIci nous apprenons un nouveau concept associ√© √† `useEffect` : la **fonction de nettoyage**. Une fonction de nettoyage, au sein de `useEffect`, est une fonction qui sera appel√©e lors de la destruction d'un composant (par exemple lorsque l'on passe d'une page √† une autre, la page sera \"d√©truite\"). La fonction de nettoyage est sp√©cifi√©e dans le `return` de `useEffect`.\n\nCi-dessus, la fonction de nettoyage `clearTimeout(timer)` est retourn√©e par `useEffect` pour s'assurer que le timer est nettoy√© si le composant est d√©mont√© avant que le timer ne se d√©clenche. Cela sera tr√®s utile √† mettre en place lorsqu'une action est associ√©e √† une page uniquement.\n\n## Gestion d'intervalles de temps & actions r√©p√©t√©es\n\n**`setInterval(f,t)`** permet l'ex√©cution d'une callback **`f`** tous les **`t`** ms.\n\n**`clearInterval()`** permet de stopper les appels √† la callback qui ont √©t√© programm√©s via **`setInterval()`**.\n\nCet exemple montre comment mettre en place un intervalle qui met √† jour un compteur toutes les secondes. :\n```tsx numbered highlighting=\"8-10,13\"\nimport { useState, useEffect } from 'react';\n\nconst CounterComponent = () => {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    // D√©finir un intervalle qui incr√©mente le compteur toutes les secondes\n    const interval = setInterval(() => {\n      setCount(prevCount => prevCount + 1);\n    }, 1000);\n\n    // Nettoyage de l'intervalle pour √©viter des fuites de m√©moire si le composant est d√©mont√©\n    return () => clearInterval(interval);\n  }, []); // Le tableau vide [] signifie que cet effet s'ex√©cute une seule fois lors du montage\n\n  return (\n    <div>\n      <p>Compteur: {count}</p>\n    </div>\n  );\n};\n\nexport default CounterComponent;\n```\n\n# <InternalPageTitle> Exercice 2.14 : Gestion d'√©v√©nement temporel </InternalPageTitle>\n\nVeuillez continuer l'exercice pr√©c√©dent nomm√© `/exercises/2.13-14` afin d'afficher une nouvelle blague toute les 10 secondes.\n\nUne fois tout fonctionnel, veuillez faire un commit avec le message suivant : **`new:ex2.14`**.\n\n# <InternalPageTitle> async / await </InternalPageTitle>\n\n## Introduction\n\nPlut√¥t que d'utiliser des **`.then()`** pour cha√Æner des traitements asynchrones, il est possible de simplifier la syntaxe des promesses √† l'aide de **`async`** et **`await`**.\n\nOn va donc √©crire du code d'une mani√®re √©quivalente √† ce qui serait fait en programmation synchrone, tout en b√©n√©ficiant des effets de la programmation asynchrone.\n\n## async / await : les bases\n\nPour ce nouveau tutoriel, nous allons refactorer l'IHM pour am√©liorer le code associ√© aux appels asynchrones aux API.\n\nPour ce tutoriel, veuillez cr√©er une copie du tutoriel `fetch-no-proxy`, si n√©cessaire voici le code du tutoriel [fetch-no-proxy](https://github.com/e-vinci/ts-demos/tree/main/front/fetch-no-proxy), et l'appeler `async-await`. Changez le nom du projet dans `package.json`.\n\nNous allons donc refactorer le code o√π est fait le `fetch`, c'est √† dire `App` :\n\n```tsx numbered highlighting=\"6,9-22\"\nconst App = () => {\n  const [actionToBePerformed, setActionToBePerformed] = useState(false);\n  const [pizzas, setPizzas] = useState<Pizza[]>([]);\n\n  useEffect(() => {\n    fetchPizzas();\n  }, []);\n\n  const fetchPizzas = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3000/pizzas\");\n\n      if (!response.ok)\n        throw new Error(\n          `fetch error : ${response.status} : ${response.statusText}`\n        );\n\n      const pizzas = await response.json();\n      setPizzas(pizzas);\n    } catch (err) {\n      console.error(\"HomePage::error: \", err);\n    }\n  };\n```\n\nPour tester ce code, il ne faut pas oublier de d√©marrer la RESTful API auparavant, la m√™me qu'au tutoriel pr√©c√©dent (t√©l√©chargez, et d√©sarchivez cette API : <LinkFile name=\"api-json-server.zip\" target=\"_blank\" download> RESTful API offerte gr√¢ce √† json-server </LinkFile> & ex√©cutez la).\n\nVoici quelques caract√©ristiques importantes de **`async`** / **`await`** :\n- **`await`** est utilis√© pour cha√Æner une t√¢che asynchrone (sur une fonction renvoyant une promesse) et ne peut se faire qu'au sein d'une fonction tagu√©e par **`async`** ; c'est donc le rempla√ßant du **`.then(callback)`**.  \n  ‚ö° Attention, il est donc important qu'au niveau de la fonction **`arrow`**, √† la ligne 1 du code donn√© ci-dessus, on indique le **`async`** !  \n  ‚ö° Dans le code donn√© ci-dessus, il est aussi tr√®s important de ne pas oublier les **`await`**. N'h√©sitez pas √† faire le test en enlevant le **`await`** de **`const pizzas = await response.json();`**.  \n- Toute fonction \"tagu√©e\" par **`async`** renvoie automatiquement une promesse ; cela signifie dans le code ci-dessus que la fonction **`fetchPizzas`** est elle m√™me asynchrone.  \n- On utilise des blocs **`try`** / **`catch`** pour g√©rer les erreur ; c'est donc le rempla√ßant du **`.catch(callback)`**.\n\nüí≠ Il est √† parier, et n'h√©sitez pas √† trouver un moyen de vous en rendre compte visuellement, que le footer s'affiche avant le menu !\n\nüí≠ Pourquoi ne pas avoir mis directement un await dans le `useEffect`, sans cr√©er la fonction `fetchPizza` ? On aurait pu tenter quelque chose du genre :\n```ts\nuseEffect(async () => {\n    try {\n      const response = await fetch(\"http://localhost:3000/pizzas\");\n\n      if (!response.ok)\n        throw new Error(\n          `fetch error : ${response.status} : ${response.statusText}`\n        );\n\n      const pizzas = await response.json();\n      setPizzas(pizzas);\n    } catch (err) {\n      console.error(\"HomePage::error: \", err);\n    }\n  }, []);\n```\n\nCela n'est pas possible car `useEffect`, via TS et le linter, ne permet pas d'avoir une fonction asynchrone en param√®tre ! Ainsi, si l'on souhaite lancer une action asynchrone, nous devons faire preuve d'ing√©nuit√© : il faut cr√©er une fonction, et l'appeler au sein de la callback de `useEffect` ; )\n\n# <InternalPageTitle> Exercice 2.14b : async / await p√©riodique </InternalPageTitle>\n\nVeuillez cr√©er un nouveau projet nomm√© `/exercises/2.14b` dans votre repo git, sur base d'un copier / coller de `/exercises/2.13b`.\n\nNous allons faire un refactor de l'application permettant d'afficher 3 photos al√©atoires de chiens.\n\nDans un premier temps, veuillez faire un refactor du **`fetch`** en utilisant **`async`** / **`await`**.\n\nUne fois tout fonctionnel, veuillez faire un commit avec le message suivant : **`new:ex2.14b-refactor`**.\n\nEnsuite, veuillez rafra√Æchir automatiquement les photos de chiens toutes les 5 secondes. Vous devez retirer le bouton de rafra√Æchissement des photos de chiens.\n\nUne fois tout fonctionnel, veuillez faire un commit avec le message suivant : **`new:ex2.14b`**.\n\n#### Challenge\n\nIl vous reste du temps ? Vous √™tes extr√™mement motiv√© ?  \nVeuillez faire en sorte que lorsque les utilisateurs passent leur souris sur une photo de chien, la photo reste affich√©e (il n'y a pas de fetch de nouvelles photos pour ce **`RandomDog`**). Lorsque la souris quitte la photo, le comportement initial est r√©tabli, on recommence √† afficher des photos de chiens al√©atoires toutes les 5 secondes.\n\nUne fois tout fonctionnel, veuillez faire un commit avec le message suivant : **`new:ex2.14b+`**.\n\n\n# <InternalPageTitle> Op√©ration asynchrone d'√©criture d'une ressource </InternalPageTitle>\n\nA pr√©sent, nous souhaiterions que notre IHM puisse cr√©er une ressource au sein de la RESTful API. Dans un premier temps, nous allons mettre √† jour le frontend en acceptant que n'importe quel utilisateur puisse cr√©er une pizza et l'ajouter au menu de la pizzeria.  \nBien entendu, cela est temporaire. Nous verrons plus tard comment s√©curiser cette op√©ration, en autorisant un admin seulement √† r√©aliser l'ajout d'une pizza au menu.\n\nNous allons maintenant ajouter l'interaction avec l'API au sein de **`AddPizzaPage`**.\nLorsque nous soumettons le formulaire, nous voulons faire une requ√™te de cr√©ation de pizza √† la RESTful API, c'est donc une requ√™te de type **`POST /pizzas`** qui doit √™tre l'√©quivalent de ce que nous faisions avec REST Client. Pour rappel, nous faisions une requ√™te de ce genre :\n```http\n### Create a pizza\nPOST {{baseUrl}}/pizzas\nContent-Type: application/json\n\n{\n    \"title\":\"Magic Green\",\n    \"content\":\"Epinards, Brocolis, Olives vertes, Basilic\"\n}\n```\n\nIci, c'est le JS/TS √† rajouter dans la fonction **`addPizza`** de **`App`** qui doit, permettre de r√©cup√©rer les donn√©es de la pizza √† cr√©er et faire un **`fetch`** de l'op√©ration de cr√©ation offerte par l'API.\n\nPour arriver √† nos fins, veuillez mettre √† jour la fonction `addPizza` dans `Main` :\n\n```tsx numbered highlighting=\"2-23\"\nconst addPizza = async (newPizza: NewPizza) => {\n    try {\n      const options = {\n        method: \"POST\",\n        body: JSON.stringify(newPizza),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      };\n\n      const response = await fetch(\"http://localhost:3000/pizzas\", options); // fetch retourne une \"promise\" => on attend la r√©ponse\n\n      if (!response.ok)\n        throw new Error(\n          `fetch error : ${response.status} : ${response.statusText}`\n        );\n\n      const createdPizza = await response.json(); // json() retourne une \"promise\" => on attend les donn√©es\n\n      setPizzas([...pizzas, createdPizza]);\n    } catch (err) {\n      console.error(\"AddPizzaPage::error: \", err);\n    }\n  };\n}\n\nexport default AddPizzaPage;\n```\n\nPour la nouveaut√© et le **`fetch`** :\n- Pour faire une requ√™te de type **`POST`**, tout comme pour les requ√™tes de type **`DELETE`**, **`PATCH`**, **`UPDATE`**..., il faut l'indiquer √† la m√©thode **`fetch`**.  \nCela est indiqu√© dans un objet que nous appelons g√©n√©ralement **`options`** qui doit contenir la propri√©t√© **`method`**.\n- Lorsque l'on doit envoyer des donn√©es dans le **`body`** d'une requ√™te, alors il faut le faire au sein de la propri√©t√© **`body`**. Ici, nous souhaitons envoyer un objet contenant les propri√©t√©s **`title`** et **`content`** au format JSON. Nous devons donc utiliser la m√©thode **`JSON.stringify`** qui permet de cr√©er une repr√©sentation JSON d'un objet JS/TS. \n- Il est tr√®s important de sp√©cifier le type de la repr√©sentation de l'objet qui devrait √™tre utilis√© par l'API et qui se trouve dans le body de la requ√™te. Cela est fait via un **`header`** et la propri√©t√© **`Content-Type`** (**`'Content-Type': 'application/json',`**).  \n‚ö° Si vous oubliez cela, l'API ne pourra pas parser les donn√©es au format JSON vers des objets JS/TS et donc les op√©rations d'√©criture de ressources √©choueront !\n\nVeuillez v√©rifier que tout fonctionne correctement ; )\n\nüí≠ Comment v√©rifier que les donn√©es persistent bien dans notre API apr√®s avoir soumis une nouvelle pizza ?\n\nFaites un refresh de votre page... Vous pouvez m√™me stopper votre frontend et le red√©marrer (mais pas votre API). La nouvelle pizza devrait toujours √™tre affich√©e. Pour rappel, quand les donn√©es √©taient trait√©e dans un tableau en m√©moire vive via notre frontend, lors d'un refresh, on perdait ces donn√©es.\n\n## Quelques mots sur le type en TypeScript\n\nN'avez-vous pas √©t√© surpris que lorsque nous avons mis √† jour `addPizza`, en la rendant asynchrone √† l'aide du mot cl√© `async`, nous n'ayons pas du changer le type de `addPizza` au sein du type `PizzeriaContext` ?\n\nPour garder notre typage propre, nous vous recommandons de mettre √† jour le retour de `addPizza` dans `/src/types.ts` :\n```ts\ninterface PizzeriaContext {\n  pizzas: Pizza[];\n  setPizzas: (pizzas: Pizza[]) => void;\n  actionToBePerformed: boolean;\n  setActionToBePerformed: (actionToBePerformed: boolean) => void;\n  clearActionToBePerformed: () => void;\n  drinks: Drink[];\n  addPizza: (newPizza: NewPizza) => Promise<void>;\n}\n```\n\nC'est une `Promise` qui est retourn√©e par la fonction `addPizza`.\n\n# <InternalPageTitle> Cr√©ation de fonctions asynchrones renvoyant une promesse </InternalPageTitle>\n\nA l'aide d'**`async`** / **`await`**, il est tr√®s simple de cr√©er des fonctions asynchrones qui renvoient une promesse.\n\nNous l'avons d√©j√† fait dans ce tutoriel. Imaginons que nous souhaitons cr√©er une fonction asynchrone qui renvoie toutes les pizzas qui sont offertes par l'op√©ration de lecture des pizzas de la RESTful API.\n\nVoici comment nous √©cririons ce code :\n\n```ts\nasync function getAllPizzas() {\n    try {\n      const response = await fetch(\"http://localhost:3000/pizzas\");\n\n      if (!response.ok)\n        throw new Error(\n          `fetch error : ${response.status} : ${response.statusText}`\n        );\n\n      const pizzas = await response.json();\n\n      return pizzas;\n    } catch (err) {\n      console.error(\"getAllPizzas::error: \", err);\n      throw err;\n    }\n  }\n```\n\nCette fonction **`getAllPizzas`** ne renvoie pas un array de pizzas, mais une **`Promise`** !  \nSi la promesse :\n- r√©sout avec succ√®s, alors c'est bien un array de pizzas qui sera renvoy√© par cette fonction.\n- √©choue, c'est une exception qui sera renvoy√©e.  \nPour que cela fonctionne, vous devez donc faire en sorte, dans vos fonctions asynchrones, de faire un **`throw`** d'une erreur en cas d'√©chec du traitement asynchrone.\n\nComment utiliser ce code au sein de `App`?  \nVoici comment le code pourrait √™tre mis √† jour pour utiliser la fonction asynchrone `getAllPizzas` au sein de `App` :\n\n```tsx highlighting=\"1,5\"\nconst App = () => {\n  const [actionToBePerformed, setActionToBePerformed] = useState(false);\n  const [pizzas, setPizzas] = useState<Pizza[]>([]);\n\n  useEffect(() => {\n    fetchPizzas();\n  }, []);\n\n  const fetchPizzas = async () => {\n    try {\n      const pizzas = await getAllPizzas();\n      setPizzas(pizzas);\n    } catch (err) {\n      console.error(\"HomePage::error: \", err);\n    }\n  };\n```\n\nSi n√©cessaire, vous pouvez trouver le code associ√© √† ce tutoriel ici : [async-await](https://github.com/e-vinci/ts-demos/tree/main/front/async-await).\n\n\n# <InternalPageTitle> Single Origin Policy & CORS </InternalPageTitle>\n\nLa **Single Origin Policy** (**SOP**) sont des r√®gles appliqu√©es par le browser afin :\n- de restreindre les interactions entre un document ou script charg√© par une origine avec une ressource d'une autre origine ;\n- d'isoler des documents ou scripts malicieux, afin de r√©duire le risque des attaques.\n\nDeux URL ont une m√™me **origine** si ces caract√©ristiques sont les m√™mes :\n\n- **protocole** ;\n- **port** ;\n- **host** ; l'URL pointe vers le m√™me appareil connect√© √† internet ou √† un r√©seau local.\n\nIl est possible de relaxer la s√©curit√© via des **Cross Origin Resource Sharing** (**CORS**).  \n**CORS** est un m√©canisme qui utilise des headers HTTP pour indiquer aux browsers qu'ils peuvent autoriser les acc√®s √† des ressources d'origines diff√©rentes.\n\nCela signifie qu'une application web qui utilise une API ne peut le faire que si les ressources demand√©es √† l'API proviennent d'une m√™me origine, √† moins que la r√©ponse de l'API inclut les bonnes **CORS** (via des header HTTP).\n\nSi l'on autorise trop d'origines, voici un exemple classique d'attaque :\n\n<ScrollableImage name=\"cors-issue.png\" minWidth=\"500px\" maxWidth=\"700px\" />\n\nImaginez qu'un site d'une banque ne soit pas s√©curis√© avec des techniques modernes. Ce site utiliserait une IHM (**`https://my-bank.com`**), qui, via un formulaire, permettrait de faire un versement, sous r√©serve d'envoyer un cookie qui contiendrait une variable de session (simple m√©canisme de s√©curit√©) lors d'une requ√™te √† l'API de la banque.\n\nMaintenant, prenons le cas d'un utilisateur qui adore jouer sur le web, un gamer en puissance. Il joue √† un jeu de penguins, mais soudainement, il est redirig√© vers un site malicieux (**`https://malicious.com`**), qui lui offre un nouveau jeu avec des dinosaures. Ce site malicieux, en arri√®re plan, pourrait faire une requ√™te vers la m√™me API utilis√©e par **`https://my-bank.com`**.  \nComme c'est le m√™me browser utilis√© par notre gamer, tant pour faire ses virements, que pour jouer, toute requ√™te faite vers **`https://api.my-bank.com`** enverra d'office les cookies existants et associ√©s au domaine **`api.my-bank.com`**.\nLes r√©sultats peuvent √™tre dramatiques : l'attaquant √† la capacit√© de faire des versements jusqu'√† vider le compte de notre pauvre gamer.\n\nBien s√ªr, gr√¢ce √† la **SOP** appliqu√©e par nos browser, par d√©faut, d√®s que le site malicieux communique avec l'API de la banque, celui-ci bloque l'acc√®s aux ressources de l'API car l'origine du site malicieux est diff√©rente de l'origine de l'API.\n\nLes **CORS** permettent de rel√¢cher la s√©curit√©, afin notamment, dans le sc√©nario √©voqu√©, d'autoriser l'origine **`https://my-bank.com`** √† acc√©der √† l'origine **`https://api.my-bank.com`**. En effet, c'est ce que le site de la banque souhaite.  \nPar contre, si la banque poss√®de des d√©veloppeurs nuls au niveau s√©curit√© et que ceux-ci autorisent toutes les origines √† interroger l'API, l√†, nous pourrions arriver au hacking d√©crit ci-dessus.\n\nDans ce cours, nous allons voir comment nous pouvons communiquer entre un frontend et une API fonctionnant sous deux origines diff√©rentes, √† l'aide de deux techniques diff√©rentes :\n- **`proxy`** : le frontend communique avec un serveur qui lui est associ√©, et ce serveur communique avec l'API. Le serveur 'proxy' est donc un interm√©diaire entre le frontend et l'API. Nous allons voir cela dans la suite.\n- **`CORS`** : l'API autorise explicitement le frontend √† communiquer avec elle. Cela sera vu plus tard, de mani√®re optionnelle, dans la partie 3 de ce cours.\n\n\n# <InternalPageTitle> Simulation d'une m√™me origine via un proxy </InternalPageTitle>\n\nIl est possible de mettre en place un proxy au niveau du frontend afin de faire croire au browser que l'API et le frontend ont la m√™me origine.\n\nVeuillez d√©marrer l'API qui n'autorise aucune autre origine : [services](https://github.com/e-vinci/ts-demos/tree/main/back/api/services)).\n\nNous allons mettre en place un m√©canisme au niveau du frontend pour faire passer toutes les requ√™tes √† destination de l'API par un proxy ; le proxy aura la m√™me origine que le serveur de fichiers statiques ayant offert le frontend.\n\nPour ce tutoriel, veuillez cr√©er une copie du tutoriel `async-await`, si n√©cessaire voici le code du tutoriel [async-await](https://github.com/e-vinci/ts-demos/tree/main/front/async-await), et l'appeler `fetch-proxy`. Changez le nom du projet dans `package.json`.\n\nLe menu des pizzas ne s'affiche pas et nous avons le probl√®me d√©j√† rencontr√© (`...has been blocked by CORS policy`).\n\n\nVoici le workflow que nous allons appliquer √† notre site g√©rant la pizzeria :\n- Lors du premier appel de notre browser au serveur de d√©veloppement de Vite : on r√©cup√®re notre SPA, c'est √† dire `index.html` & tous les assets associ√©s.\n- A chaque fetch, une requ√™te est faite au proxy sur la m√™me origine que le serveur de d√©veloppement qui a offert les fichiers associ√©s √† la SPA.\n- Le proxy s'occupe de transf√©rer la requ√™te HTTP √† l'API, puis de renvoyer la r√©ponse au browser.\n- Ainsi, pour le browser, il n'y a qu'une seule origine : )\n\nLe serveur de d√©veloppement de `Vite` met √† disposition un proxy. Pour utiliser ce proxy, vous devez configurer `Vite`. Veuillez mettre √† jour le fichier `vite.config.ts` :\n\n```ts numbered highlighting=\"12-20\"\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react-swc\";\nimport checker from \"vite-plugin-checker\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    checker({\n      typescript: true,\n    }),\n  ],\n  server: {\n    proxy: {\n      \"/api\": {\n        target: \"http://localhost:3000\",\n        changeOrigin: true,\n        rewrite: (path) => path.replace(/^\\/api/, \"\"),\n      },\n    },\n  },\n});\n```\n\nCela signifie qu'√† chaque fois qu'une requ√™te sera faite sur **`/api`** (on reste sur la m√™me origine que le serveur de fichiers statiques : **`5173`** est le port par d√©faut d'une application `Vite`), celle-ci sera redirig√©e vers le port **`3000`**, le port de l'API.\nLe `rewrite` permet de ne pas reprendre **`/api`** dans l'URL de la redirection :\n**`GET /api/pizzas`** devient **`GET http://localhost:3000/pizzas`**.\n\nPour rappel, pour ajouter les probl√®mes de linter dans le browser ainsi que dans le terminal, apr√®s la transpilation/compilation, vous pouvez utiliser le plugin **`vite-plugin-checker`** (lignes 8 √† 10 ci-dessus, et ligne 3 pour l'import).\nPour cela, il ne faut pas oublier d'installer le plugin :\n```bash\nnpm i vite-plugin-checker -D\n```\n\n\nIl nous reste √† mettre √† jour les `fetch` au sein de `App` :\n\n```ts numbered highlighting=\"3,29\"\nasync function getAllPizzas() {\n    try {\n      const response = await fetch(\"/api/pizzas\");\n\n      if (!response.ok)\n        throw new Error(\n          `fetch error : ${response.status} : ${response.statusText}`\n        );\n\n      const pizzas = await response.json();\n\n      return pizzas;\n    } catch (err) {\n      console.error(\"getAllPizzas::error: \", err);\n      throw err;\n    }\n  }\n\n  const addPizza = async (newPizza: NewPizza) => {\n    try {\n      const options = {\n        method: \"POST\",\n        body: JSON.stringify(newPizza),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      };\n\n      const response = await fetch(\"/api/pizzas\", options); // fetch retourne une \"promise\" => on attend la r√©ponse\n\n      if (!response.ok)\n        throw new Error(\n          `fetch error : ${response.status} : ${response.statusText}`\n        );\n\n      const createdPizza = await response.json(); // json() retourne une \"promise\" => on attend les donn√©es\n\n      setPizzas([...pizzas, createdPizza]);\n    } catch (err) {\n      console.error(\"AddPizzaPage::error: \", err);\n    }\n  };\n```\n\nA ce stade-ci, tout devrait fonctionner : le menu des pizzas est affich√© suite √† l'appel √† notre RESTful API ne relaxant pas la s√©curit√© !\n\nüç¨ Voici quelques infos non capitales pour ce cours-ci :\n\n- Il existe une multitude de proxy pour un environnement de d√©veloppement : **`Vite development server`** et son proxy, **`VS Code proxy`**, proxy l√©ger de **`Node`** directement configurable via **`package.json`** (**`\"proxy\": \"http://localhost:3000\",`**), ...\n- Il existe par exemple un proxy complet sous Node : **`http-proxy-middleware`**.\n- Pour la production, lorsque vous d√©ployez une application web sur le cloud, il faudra trouver les instructions de votre provider pour voir comment configurer le proxy.  \nPar exemple, pour configurer un **static file server** et son **proxy** sous **heroku** (provider de services d'h√©bergements sur le cloud), il faut configurer le fichier **`/static.json`**.\n\nSi n√©cessaire, vous pouvez trouver le code associ√© √† ce tutoriel ici : [fetch-proxy](https://github.com/e-vinci/ts-demos/tree/main/front/fetch-proxy).\n\n# <InternalPageTitle> Exercice 2.15 : Proxy & async / await </InternalPageTitle>\n\nVeuillez partir d'une copie de l'exercice (`/exercises/2.10-11-12`) pour cr√©er un nouveau projet nomm√© `exercises/2.15` afin de compl√©ter l'application `myMovies`.\n\nNous souhaitons maintenant que toutes les donn√©es de films soient fournies par une API que vous avez d√©velopp√©es lors des premi√®res semaines de cours. Cette API se trouve normalement dans votre repo git, dans le dossier `/exercises/1.8`. Pensez √† d√©marrer cette API.  \nPour la page pr√©sentant les cin√©mas, vous pouvez continuer √† utiliser les donn√©es en dur. Pour toutes les autres pages, vous devez utiliser l'API de films.\n\nNB : Si vous n'avez pas r√©alis√© l'exercice de cr√©ation d'une API de films, vous pouvez utiliser l'API de films fournie ici : https://github.com/e-vinci/ts-exercises/tree/main/ex1.8\n\nA l'aide d'un proxy, et de async / await, veuillez consommer votre API de films afin :\n- de lire tous les films offerts par votre API et les afficher dans votre frontend ;\n- de cr√©er des films. Une fois un film cr√©√©, vous devez faire un appel √† votre API pour r√©cup√©rer tous les films et les afficher dans votre frontend.\n\nüí≠ Une fois un film ajout√©, pourquoi faire un appel √† l'API afin d'obtenir tous les films et les afficher ? Pourquoi ne pas se satisfaire de simplement consid√©rer tous les films comme √©tant le r√©sultat du fetch pr√©c√©dent l'ajout en y ajoutant le film renvoy√© par l'API lors de l'op√©ration d'ajout ?\n\nUne fois tout fonctionnel, veuillez faire un commit avec le message suivant : **`new:ex2.15`**.\n\n# <InternalPageTitle> Exercice 2.15b : async / await : effacer une ressource </InternalPageTitle>\n\nVeuillez partir d'une copie de l'exercice (`/exercises/2.15`) pour cr√©er un nouveau projet nomm√© `exercises/2.15b` afin de compl√©ter l'application `myMovies`.\n\nDans la page affichant les films favoris, nous souhaitons offrir la possibilit√© d'effacer un film. Pour ce faire, veuillez ajouter un bouton pour chaque film favori, qui, lorsqu'il est cliqu√©, efface le film de la liste des films favoris.\n\nAttention, pour effacer un film, il faut faire une requ√™te de type **`DELETE`** √† l'API ; )\n\nDe m√™me, lorsque dans la HomePage l'utilisateur a s√©lectionn√© un film, la page affichant ce film doit afficher un bouton pour effacer le film.\n\nUne fois tout fonctionnel, veuillez faire un commit avec le message suivant : **`new:ex2.15b`**.\n\n#### üç¨ Challenge\nPensez √† ajouter une ic√¥ne de poubelle pour chaque film favori, afin de rendre l'interface plus intuitive (et plus jolie) ; )\n\nAinsi, vous pouvez retirer le bouton **`Delete`** et le remplacer par une ic√¥ne de poubelle.\n\n#### Tips\n- N'h√©sitez pas √† utiliser ce site qui offre des ic√¥nes sans qu'aucune installation ne soit n√©cessaire : https://heroicons.com/\n\nUne fois tout fonctionnel, veuillez faire un commit avec le message suivant : **`new:ex2.15b+`**.","fields":{"slug":"/part2/fetch/"},"frontmatter":{"title":"Requ√™tes & promises","date":null,"navbarExtraStyles":"","headerImage":"","featuredImage":"","description":"SPA, les requ√™tes et les promises en React","autoMargin":true}},"allImages":{"edges":[{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/19c44353d690d2192603058b13677c32/050f3/ex2-16-questions.png","srcSet":"/js2/static/19c44353d690d2192603058b13677c32/050f3/ex2-16-questions.png 370w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/19c44353d690d2192603058b13677c32/89e9c/ex2-16-questions.webp 370w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.908108108108108}},"base":"ex2-16-questions.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/7746eb8f2da2b173501f76b41b709419/31045/ex2-16-score.png","srcSet":"/js2/static/7746eb8f2da2b173501f76b41b709419/31045/ex2-16-score.png 268w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/7746eb8f2da2b173501f76b41b709419/adc83/ex2-16-score.webp 268w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.49253731343283585}},"base":"ex2-16-score.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#683898","images":{"fallback":{"src":"/js2/static/53aa06cf17e4239d0dba6ffd09854e02/0cbce/icon.png","srcSet":"/js2/static/53aa06cf17e4239d0dba6ffd09854e02/0cbce/icon.png 512w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/53aa06cf17e4239d0dba6ffd09854e02/cc23f/icon.webp 512w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}},"base":"icon.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8e848","images":{"fallback":{"src":"/js2/static/94e78cdb1293988b357eb1e6074279d9/8cffc/join.png","srcSet":"/js2/static/94e78cdb1293988b357eb1e6074279d9/8cffc/join.png 26w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/94e78cdb1293988b357eb1e6074279d9/2705a/join.webp 26w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.0769230769230769}},"base":"join.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/js2/static/309e0fb8b4416829acfed4f7a501206b/98149/logo_vinci.png","srcSet":"/js2/static/309e0fb8b4416829acfed4f7a501206b/98149/logo_vinci.png 544w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/309e0fb8b4416829acfed4f7a501206b/5eade/logo_vinci.webp 544w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.9044117647058824}},"base":"logo_vinci.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8e848","images":{"fallback":{"src":"/js2/static/814c6001016da3a407035f4cfb117ea5/61ec1/quit.png","srcSet":"/js2/static/814c6001016da3a407035f4cfb117ea5/61ec1/quit.png 28w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/814c6001016da3a407035f4cfb117ea5/fad8c/quit.webp 28w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.9285714285714286}},"base":"quit.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/e5078/authorizeNOK.png","srcSet":"/js2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/8770b/authorizeNOK.png 750w,\n/js2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/e5078/authorizeNOK.png 809w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/35881/authorizeNOK.webp 750w,\n/js2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/a88f0/authorizeNOK.webp 809w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6093943139678616}},"base":"authorizeNOK.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8d8d8","images":{"fallback":{"src":"/js2/static/02183504e2708ac3e446f29003c8d7bc/60bc5/hacked.png","srcSet":"/js2/static/02183504e2708ac3e446f29003c8d7bc/60bc5/hacked.png 744w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/02183504e2708ac3e446f29003c8d7bc/67170/hacked.webp 744w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4206989247311828}},"base":"hacked.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/13b65def72e9840d86bcf161d0140f2d/487a4/places.png","srcSet":"/js2/static/13b65def72e9840d86bcf161d0140f2d/8d835/places.png 750w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/9b397/places.png 1080w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/c1308/places.png 1366w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/487a4/places.png 1599w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/13b65def72e9840d86bcf161d0140f2d/25f33/places.webp 750w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/f7d3e/places.webp 1080w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/cab24/places.webp 1366w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/e838a/places.webp 1599w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.35709818636647905}},"base":"places.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8e8e8","images":{"fallback":{"src":"/js2/static/cd7a86517cd86bf67e97a9455782f61e/3a7c2/errors.png","srcSet":"/js2/static/cd7a86517cd86bf67e97a9455782f61e/3a7c2/errors.png 589w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/cd7a86517cd86bf67e97a9455782f61e/8d14e/errors.webp 589w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.43803056027164683}},"base":"errors.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/a0a9be40f52062756989e43e359b5c44/4ca31/liveServerFrontSPA.png","srcSet":"/js2/static/a0a9be40f52062756989e43e359b5c44/96859/liveServerFrontSPA.png 750w,\n/js2/static/a0a9be40f52062756989e43e359b5c44/4ca31/liveServerFrontSPA.png 751w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/a0a9be40f52062756989e43e359b5c44/3f918/liveServerFrontSPA.webp 750w,\n/js2/static/a0a9be40f52062756989e43e359b5c44/61905/liveServerFrontSPA.webp 751w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4274300932090546}},"base":"liveServerFrontSPA.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/718a6/cors-issue.png","srcSet":"/js2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/3b3b8/cors-issue.png 750w,\n/js2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/718a6/cors-issue.png 1031w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/148ba/cors-issue.webp 750w,\n/js2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/53c8e/cors-issue.webp 1031w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.29582929194956353}},"base":"cors-issue.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/9482be8bcc11374b223c4bff1aaa7cef/6c4d1/movies.png","srcSet":"/js2/static/9482be8bcc11374b223c4bff1aaa7cef/44ede/movies.png 750w,\n/js2/static/9482be8bcc11374b223c4bff1aaa7cef/c97ea/movies.png 1080w,\n/js2/static/9482be8bcc11374b223c4bff1aaa7cef/6c4d1/movies.png 1268w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/9482be8bcc11374b223c4bff1aaa7cef/9378c/movies.webp 750w,\n/js2/static/9482be8bcc11374b223c4bff1aaa7cef/6e0c3/movies.webp 1080w,\n/js2/static/9482be8bcc11374b223c4bff1aaa7cef/498dd/movies.webp 1268w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.38564668769716093}},"base":"movies.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/04662f2f0ed1b78bd5ead2c3dec85482/36714/readPizzas.png","srcSet":"/js2/static/04662f2f0ed1b78bd5ead2c3dec85482/36714/readPizzas.png 523w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/04662f2f0ed1b78bd5ead2c3dec85482/dfd8f/readPizzas.webp 523w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.7304015296367113}},"base":"readPizzas.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/8eb2b12643e10670a4e4234ccd8a844e/3d704/xss.png","srcSet":"/js2/static/8eb2b12643e10670a4e4234ccd8a844e/613e6/xss.png 750w,\n/js2/static/8eb2b12643e10670a4e4234ccd8a844e/103d4/xss.png 1080w,\n/js2/static/8eb2b12643e10670a4e4234ccd8a844e/3d704/xss.png 1108w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/8eb2b12643e10670a4e4234ccd8a844e/18c9f/xss.webp 750w,\n/js2/static/8eb2b12643e10670a4e4234ccd8a844e/51d3a/xss.webp 1080w,\n/js2/static/8eb2b12643e10670a4e4234ccd8a844e/88976/xss.webp 1108w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.2842960288808664}},"base":"xss.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/4af4b8ccca63d0a981c68a20bb9658e1/cc4c8/techno-course.png","srcSet":"/js2/static/4af4b8ccca63d0a981c68a20bb9658e1/cc4c8/techno-course.png 721w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/4af4b8ccca63d0a981c68a20bb9658e1/7f7c1/techno-course.webp 721w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5575589459084604}},"base":"techno-course.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#c8e8d8","images":{"fallback":{"src":"/js2/static/5c1c4cd476b1911739976c74d5457e03/60e67/middlewares.jpg","srcSet":"/js2/static/5c1c4cd476b1911739976c74d5457e03/60e67/middlewares.jpg 638w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/5c1c4cd476b1911739976c74d5457e03/f273c/middlewares.webp 638w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.7288401253918495}},"base":"middlewares.jpg"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/dbf7fef0d0623475d157204fd950008e/cbf92/techno.png","srcSet":"/js2/static/dbf7fef0d0623475d157204fd950008e/cbf92/techno.png 586w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/dbf7fef0d0623475d157204fd950008e/09c5a/techno.webp 586w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8464163822525598}},"base":"techno.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/945336ab536627610c9e7fa03999caa2/746ba/proxy.png","srcSet":"/js2/static/945336ab536627610c9e7fa03999caa2/746ba/proxy.png 691w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/945336ab536627610c9e7fa03999caa2/03d38/proxy.webp 691w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6353111432706222}},"base":"proxy.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/js2/static/14110746b5f49459429c355815cd77b3/10f52/express-flow.png","srcSet":"/js2/static/14110746b5f49459429c355815cd77b3/eb8cd/express-flow.png 750w,\n/js2/static/14110746b5f49459429c355815cd77b3/10f52/express-flow.png 800w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/14110746b5f49459429c355815cd77b3/4e646/express-flow.webp 750w,\n/js2/static/14110746b5f49459429c355815cd77b3/130b6/express-flow.webp 800w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3825}},"base":"express-flow.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#0878b8","images":{"fallback":{"src":"/js2/static/216c8f19b48a13e3af5020937c6495fe/3f056/deployment.png","srcSet":"/js2/static/216c8f19b48a13e3af5020937c6495fe/f74f0/deployment.png 750w,\n/js2/static/216c8f19b48a13e3af5020937c6495fe/3f056/deployment.png 881w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/216c8f19b48a13e3af5020937c6495fe/00e18/deployment.webp 750w,\n/js2/static/216c8f19b48a13e3af5020937c6495fe/73e10/deployment.webp 881w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5811577752553916}},"base":"deployment.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/df999928d139b76e4624212deb47afa1/c60dc/ajax.png","srcSet":"/js2/static/df999928d139b76e4624212deb47afa1/c60dc/ajax.png 569w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/df999928d139b76e4624212deb47afa1/9f538/ajax.webp 569w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8927943760984183}},"base":"ajax.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/cd56be61925d779c9a23f9ecdea56e09/fb68f/login.png","srcSet":"/js2/static/cd56be61925d779c9a23f9ecdea56e09/e56fa/login.png 750w,\n/js2/static/cd56be61925d779c9a23f9ecdea56e09/fb68f/login.png 879w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/cd56be61925d779c9a23f9ecdea56e09/5510b/login.webp 750w,\n/js2/static/cd56be61925d779c9a23f9ecdea56e09/da356/login.webp 879w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5017064846416383}},"base":"login.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/7019197416b607b814455c5cde2bfd8d/8a955/authorizeOK.png","srcSet":"/js2/static/7019197416b607b814455c5cde2bfd8d/8a955/authorizeOK.png 747w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/7019197416b607b814455c5cde2bfd8d/b344d/authorizeOK.webp 747w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6666666666666666}},"base":"authorizeOK.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/5033887241592124140462a48f880b31/4c60e/independentFrontBackSPA2.png","srcSet":"/js2/static/5033887241592124140462a48f880b31/57832/independentFrontBackSPA2.png 750w,\n/js2/static/5033887241592124140462a48f880b31/4c60e/independentFrontBackSPA2.png 852w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/5033887241592124140462a48f880b31/73ed4/independentFrontBackSPA2.webp 750w,\n/js2/static/5033887241592124140462a48f880b31/fa338/independentFrontBackSPA2.webp 852w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5762910798122066}},"base":"independentFrontBackSPA2.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/368b66a6c71ce7ae5149f7fe124c67b4/dedcf/independentFrontBackSPA.png","srcSet":"/js2/static/368b66a6c71ce7ae5149f7fe124c67b4/aa4e8/independentFrontBackSPA.png 750w,\n/js2/static/368b66a6c71ce7ae5149f7fe124c67b4/dedcf/independentFrontBackSPA.png 914w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/368b66a6c71ce7ae5149f7fe124c67b4/54e6a/independentFrontBackSPA.webp 750w,\n/js2/static/368b66a6c71ce7ae5149f7fe124c67b4/d4860/independentFrontBackSPA.webp 914w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.48468271334792123}},"base":"independentFrontBackSPA.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/8c454120ed3743524b977a50efee14ae/75d45/architecture.png","srcSet":"/js2/static/8c454120ed3743524b977a50efee14ae/c33b9/architecture.png 750w,\n/js2/static/8c454120ed3743524b977a50efee14ae/75d45/architecture.png 859w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/8c454120ed3743524b977a50efee14ae/013ea/architecture.webp 750w,\n/js2/static/8c454120ed3743524b977a50efee14ae/3c3f0/architecture.webp 859w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6030267753201397}},"base":"architecture.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/4cf8132263a3922a81198d62fa668e8c/8af70/monolithicSPA.png","srcSet":"/js2/static/4cf8132263a3922a81198d62fa668e8c/9fdee/monolithicSPA.png 750w,\n/js2/static/4cf8132263a3922a81198d62fa668e8c/8af70/monolithicSPA.png 758w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/4cf8132263a3922a81198d62fa668e8c/e02a2/monolithicSPA.webp 750w,\n/js2/static/4cf8132263a3922a81198d62fa668e8c/1677e/monolithicSPA.webp 758w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.712401055408971}},"base":"monolithicSPA.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/593d65b45ead31d08b777b977530fbb0/257c8/form.png","srcSet":"/js2/static/593d65b45ead31d08b777b977530fbb0/257c8/form.png 182w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/593d65b45ead31d08b777b977530fbb0/aa09a/form.webp 182w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.1868131868131868}},"base":"form.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/a4d45cc8f767378935f1a47c6a814bff/c4448/table.png","srcSet":"/js2/static/a4d45cc8f767378935f1a47c6a814bff/c4448/table.png 219w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/a4d45cc8f767378935f1a47c6a814bff/5ce26/table.webp 219w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.547945205479452}},"base":"table.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#282828","images":{"fallback":{"src":"/js2/static/995b19933afe2efc8abdad9e056f7eb0/c35a8/terminal-1.png","srcSet":"/js2/static/995b19933afe2efc8abdad9e056f7eb0/c35a8/terminal-1.png 481w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/995b19933afe2efc8abdad9e056f7eb0/8a064/terminal-1.webp 481w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.2390852390852392}},"base":"terminal-1.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#181818","images":{"fallback":{"src":"/js2/static/ec94e10b96163ba7dff989c8073526c9/e4d4e/terminal-2.png","srcSet":"/js2/static/ec94e10b96163ba7dff989c8073526c9/d328f/terminal-2.png 750w,\n/js2/static/ec94e10b96163ba7dff989c8073526c9/e4d4e/terminal-2.png 933w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/ec94e10b96163ba7dff989c8073526c9/dea86/terminal-2.webp 750w,\n/js2/static/ec94e10b96163ba7dff989c8073526c9/92d06/terminal-2.webp 933w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.2722400857449089}},"base":"terminal-2.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/ff2054d2907d5ebd494875c12fe16a3d/d40cb/middleware-function.png","srcSet":"/js2/static/ff2054d2907d5ebd494875c12fe16a3d/7cb90/middleware-function.png 750w,\n/js2/static/ff2054d2907d5ebd494875c12fe16a3d/d40cb/middleware-function.png 944w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/ff2054d2907d5ebd494875c12fe16a3d/4ffb0/middleware-function.webp 750w,\n/js2/static/ff2054d2907d5ebd494875c12fe16a3d/6c417/middleware-function.webp 944w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.298728813559322}},"base":"middleware-function.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/d5538808d9455e309732cc72d3c16094/5a8ae/bom.png","srcSet":"/js2/static/d5538808d9455e309732cc72d3c16094/5a8ae/bom.png 361w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/d5538808d9455e309732cc72d3c16094/44051/bom.webp 361w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8531855955678671}},"base":"bom.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/js2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/05d72/browser.png","srcSet":"/js2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/e81f3/browser.png 750w,\n/js2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/05d72/browser.png 815w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/7c1ed/browser.webp 750w,\n/js2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/9c789/browser.webp 815w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6269938650306749}},"base":"browser.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#e8e8e8","images":{"fallback":{"src":"/js2/static/d0eb9efdef86cf105b8020519b702c01/f6ece/pizza2.jpg","srcSet":"/js2/static/d0eb9efdef86cf105b8020519b702c01/e1af2/pizza2.jpg 750w,\n/js2/static/d0eb9efdef86cf105b8020519b702c01/f6ece/pizza2.jpg 800w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/d0eb9efdef86cf105b8020519b702c01/7f694/pizza2.webp 750w,\n/js2/static/d0eb9efdef86cf105b8020519b702c01/4447d/pizza2.webp 800w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6675}},"base":"pizza2.jpg"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/815bb84493b798e20f6e050fe7d4f297/8ac59/bytes.heif","srcSet":"/js2/static/815bb84493b798e20f6e050fe7d4f297/8ac59/bytes.heif 730w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/815bb84493b798e20f6e050fe7d4f297/fa94f/bytes.webp 730w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8041095890410959}},"base":"bytes.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/8336698fa5a4150652bf24675d81d450/b818d/console.png","srcSet":"/js2/static/8336698fa5a4150652bf24675d81d450/b818d/console.png 584w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/8336698fa5a4150652bf24675d81d450/2cd0a/console.webp 584w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5941780821917808}},"base":"console.PNG"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#181818","images":{"fallback":{"src":"/js2/static/a2704f93c050f1b8f0af184bca0784e5/bfbd8/copy.png","srcSet":"/js2/static/a2704f93c050f1b8f0af184bca0784e5/bfbd8/copy.png 41w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/a2704f93c050f1b8f0af184bca0784e5/54421/copy.webp 41w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.048780487804878}},"base":"copy.PNG"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/20e0138ec54042c9ab8df2df718b51c7/ad8b1/cssom.heif","srcSet":"/js2/static/20e0138ec54042c9ab8df2df718b51c7/ad8b1/cssom.heif 730w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/20e0138ec54042c9ab8df2df718b51c7/4fc4f/cssom.webp 730w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3136986301369863}},"base":"cssom.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/7c8ef3e05614d0f1331eb1622972209f/ad8b1/dom.heif","srcSet":"/js2/static/7c8ef3e05614d0f1331eb1622972209f/ad8b1/dom.heif 730w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/7c8ef3e05614d0f1331eb1622972209f/4fc4f/dom.webp 730w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3136986301369863}},"base":"dom.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/2c0e805dbcef0b4210fddd87f2fdcd0b/7d9c5/dom2.gif","srcSet":"/js2/static/2c0e805dbcef0b4210fddd87f2fdcd0b/7d9c5/dom2.gif 486w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/2c0e805dbcef0b4210fddd87f2fdcd0b/3b54a/dom2.webp 486w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5473251028806584}},"base":"dom2.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/11b64c3a36326f1301636f365163fa87/487a4/carousel.png","srcSet":"/js2/static/11b64c3a36326f1301636f365163fa87/8d835/carousel.png 750w,\n/js2/static/11b64c3a36326f1301636f365163fa87/9b397/carousel.png 1080w,\n/js2/static/11b64c3a36326f1301636f365163fa87/c1308/carousel.png 1366w,\n/js2/static/11b64c3a36326f1301636f365163fa87/487a4/carousel.png 1599w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/11b64c3a36326f1301636f365163fa87/25f33/carousel.webp 750w,\n/js2/static/11b64c3a36326f1301636f365163fa87/f7d3e/carousel.webp 1080w,\n/js2/static/11b64c3a36326f1301636f365163fa87/cab24/carousel.webp 1366w,\n/js2/static/11b64c3a36326f1301636f365163fa87/e838a/carousel.webp 1599w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.35709818636647905}},"base":"carousel.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8d818","images":{"fallback":{"src":"/js2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/efde9/js-logo.png","srcSet":"/js2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/27b15/js-logo.png 750w,\n/js2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/efde9/js-logo.png 768w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/cfe1c/js-logo.webp 750w,\n/js2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/ea3b7/js-logo.webp 768w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}},"base":"js-logo.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/9f49136562a5d771c51d7600430566b1/38d9f/eventflow.png","srcSet":"/js2/static/9f49136562a5d771c51d7600430566b1/38d9f/eventflow.png 480w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/9f49136562a5d771c51d7600430566b1/cd74b/eventflow.webp 480w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.1666666666666667}},"base":"eventflow.png"}},{"node":{"childImageSharp":null,"base":"red-light.gif"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/283b4c657f5c4a706c3e29d0a08fd451/7edf3/render.heif","srcSet":"/js2/static/283b4c657f5c4a706c3e29d0a08fd451/7edf3/render.heif 730w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/283b4c657f5c4a706c3e29d0a08fd451/29aef/render.webp 730w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4383561643835616}},"base":"render.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#282828","images":{"fallback":{"src":"/js2/static/302e83d40f9486ab7ea528e217821223/d5cd3/start.png","srcSet":"/js2/static/302e83d40f9486ab7ea528e217821223/d5cd3/start.png 511w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/302e83d40f9486ab7ea528e217821223/02192/start.webp 511w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.40117416829745595}},"base":"start.PNG"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#484848","images":{"fallback":{"src":"/js2/static/d500a235cf91fee0cec65a112a3fd9a8/a166b/backend-frameworks.png","srcSet":"/js2/static/d500a235cf91fee0cec65a112a3fd9a8/a166b/backend-frameworks.png 634w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/d500a235cf91fee0cec65a112a3fd9a8/de393/backend-frameworks.webp 634w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5394321766561514}},"base":"backend-frameworks.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#d88848","images":{"fallback":{"src":"/js2/static/c4a1984e0b0ce60b9f9f72756293a96e/50940/frontend-technos.jpg","srcSet":"/js2/static/c4a1984e0b0ce60b9f9f72756293a96e/50940/frontend-technos.jpg 461w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/c4a1984e0b0ce60b9f9f72756293a96e/9d85c/frontend-technos.webp 461w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5553145336225597}},"base":"frontend-technos.jpg"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/852194cf7727296de1adabc80b737b1d/52ccc/critere-eval.jpg","srcSet":"/js2/static/852194cf7727296de1adabc80b737b1d/24844/critere-eval.jpg 750w,\n/js2/static/852194cf7727296de1adabc80b737b1d/52ccc/critere-eval.jpg 844w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/852194cf7727296de1adabc80b737b1d/ba934/critere-eval.webp 750w,\n/js2/static/852194cf7727296de1adabc80b737b1d/f361e/critere-eval.webp 844w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.2890995260663507}},"base":"critere-eval.jpg"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/4231407aeb2eab1eb26748522a49f119/1daa6/js-evolution.png","srcSet":"/js2/static/4231407aeb2eab1eb26748522a49f119/1daa6/js-evolution.png 505w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/4231407aeb2eab1eb26748522a49f119/1d9c9/js-evolution.webp 505w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3702970297029703}},"base":"js-evolution.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#a8c888","images":{"fallback":{"src":"/js2/static/62895fac28825996f4895ee798c3c5da/964cf/modules-breakdown.png","srcSet":"/js2/static/62895fac28825996f4895ee798c3c5da/ddebf/modules-breakdown.png 750w,\n/js2/static/62895fac28825996f4895ee798c3c5da/964cf/modules-breakdown.png 1056w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/62895fac28825996f4895ee798c3c5da/f59f5/modules-breakdown.webp 750w,\n/js2/static/62895fac28825996f4895ee798c3c5da/280c1/modules-breakdown.webp 1056w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3759469696969697}},"base":"modules-breakdown.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#283848","images":{"fallback":{"src":"/js2/static/79637217dd57af31bd8a8860191ab8d8/dbdf5/most-pop-programming.png","srcSet":"/js2/static/79637217dd57af31bd8a8860191ab8d8/dbdf5/most-pop-programming.png 715w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/79637217dd57af31bd8a8860191ab8d8/349ed/most-pop-programming.webp 715w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8139860139860139}},"base":"most-pop-programming.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/js2/static/fa47b7868326f417638155af9c4e1131/a19b7/mpa-api.png","srcSet":"/js2/static/fa47b7868326f417638155af9c4e1131/1f5ea/mpa-api.png 750w,\n/js2/static/fa47b7868326f417638155af9c4e1131/a19b7/mpa-api.png 847w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/fa47b7868326f417638155af9c4e1131/98a4a/mpa-api.webp 750w,\n/js2/static/fa47b7868326f417638155af9c4e1131/b3688/mpa-api.webp 847w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4628099173553719}},"base":"mpa-api.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/js2/static/0db4cabf70d03ffdaba26ad2279a1f03/36fe5/mpa.png","srcSet":"/js2/static/0db4cabf70d03ffdaba26ad2279a1f03/36fe5/mpa.png 540w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/0db4cabf70d03ffdaba26ad2279a1f03/94f16/mpa.webp 540w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.7259259259259259}},"base":"mpa.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/97447aabc0c3f79a34494e5fa4b0b55d/cd171/planning.png","srcSet":"/js2/static/97447aabc0c3f79a34494e5fa4b0b55d/08018/planning.png 750w,\n/js2/static/97447aabc0c3f79a34494e5fa4b0b55d/b5d65/planning.png 1080w,\n/js2/static/97447aabc0c3f79a34494e5fa4b0b55d/cd171/planning.png 1088w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/97447aabc0c3f79a34494e5fa4b0b55d/f7070/planning.webp 750w,\n/js2/static/97447aabc0c3f79a34494e5fa4b0b55d/6949f/planning.webp 1080w,\n/js2/static/97447aabc0c3f79a34494e5fa4b0b55d/9af3a/planning.webp 1088w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.59375}},"base":"planning.PNG"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/df3eb96d3792fedc90e824b9ff4ee666/9aa96/spa-monolithic.png","srcSet":"/js2/static/df3eb96d3792fedc90e824b9ff4ee666/9aa96/spa-monolithic.png 541w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/df3eb96d3792fedc90e824b9ff4ee666/65253/spa-monolithic.webp 541w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.7245841035120149}},"base":"spa-monolithic.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/e927b7d4c1aab1dd521632761a53f1b6/a19b7/spa.png","srcSet":"/js2/static/e927b7d4c1aab1dd521632761a53f1b6/1f5ea/spa.png 750w,\n/js2/static/e927b7d4c1aab1dd521632761a53f1b6/a19b7/spa.png 847w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/e927b7d4c1aab1dd521632761a53f1b6/98a4a/spa.webp 750w,\n/js2/static/e927b7d4c1aab1dd521632761a53f1b6/b3688/spa.webp 847w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4628099173553719}},"base":"spa.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#283848","images":{"fallback":{"src":"/js2/static/633de32074a1d0717540f1ac88bb3e95/dbdf5/web-frameworks.png","srcSet":"/js2/static/633de32074a1d0717540f1ac88bb3e95/dbdf5/web-frameworks.png 715w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/633de32074a1d0717540f1ac88bb3e95/349ed/web-frameworks.webp 715w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8139860139860139}},"base":"web-frameworks.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/js2/static/e795fd2fb63aea24f1a6ec7e3b46dc57/b749b/JSdude.png","srcSet":"/js2/static/e795fd2fb63aea24f1a6ec7e3b46dc57/27b15/JSdude.png 750w,\n/js2/static/e795fd2fb63aea24f1a6ec7e3b46dc57/b749b/JSdude.png 1024w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/e795fd2fb63aea24f1a6ec7e3b46dc57/cfe1c/JSdude.webp 750w,\n/js2/static/e795fd2fb63aea24f1a6ec7e3b46dc57/5e515/JSdude.webp 1024w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}},"base":"JSdude.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#d8d8e8","images":{"fallback":{"src":"/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/87754/pizza.jpg","srcSet":"/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/b3dd7/pizza.jpg 750w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/870fe/pizza.jpg 1080w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/f640e/pizza.jpg 1366w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/87754/pizza.jpg 1920w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/2daa0/pizza.webp 750w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/1aa4f/pizza.webp 1080w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/8647b/pizza.webp 1366w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/902b5/pizza.webp 1920w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.5}},"base":"pizza.jpg"}}]}},"pageContext":{"slug":"/part2/fetch/","frontmatter":{"title":"Requ√™tes & promises","description":"SPA, les requ√™tes et les promises en React"}}},"staticQueryHashes":["1696221415","2461182183","3028011774","3458129946","501654901","575455071"],"slicesMap":{}}