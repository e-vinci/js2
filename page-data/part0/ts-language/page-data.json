{"componentChunkName":"component---src-templates-mdx-pages-js-content-file-path-src-mdx-pages-part-0-ts-language-fr-mdx","path":"/part0/ts-language/","result":{"data":{"mdx":{"id":"f1bc9cf6-c28d-5e80-8ba2-8b29e5024e40","body":"\n# c) Introduction au TS\n\n<InternalPageMenu>\n  <PathViewer>\n    <PathViewerItem to=\"/\"> web2course </PathViewerItem>\n    <PathViewerItem to=\"/part0\" > Partie 0 </PathViewerItem>\n    <PathViewerItem selected> c) TS </PathViewerItem>\n  </PathViewer>\n  <InternalPageMenuItem> Le TS, c'est quoi ? </InternalPageMenuItem>\n  <InternalPageMenuItem> A quel moment le TS intervient ? </InternalPageMenuItem>\n    <InternalPageMenuItem> Quand d√©finir les types ? </InternalPageMenuItem>\n<InternalPageMenuItem> Comment d√©finir les types ? </InternalPageMenuItem> \n  <InternalPageMenuItem> Comment contr√¥ler le flux en TS ? </InternalPageMenuItem> \n  <InternalPageMenuItem> R√©duction de type plus avanc√©e </InternalPageMenuItem> \n  <InternalPageMenuItem> Comment en savoir plus sur TS ? </InternalPageMenuItem> \n\n</InternalPageMenu>\n\n# <InternalPageTitle> Le TS, c'est quoi ? </InternalPageTitle>\n\n **Le TypeScript est du JavaScript avec des types**. Ainsi, toute la syntaxe d√©crite dans l'[introduction du JS](../js-language) est valable pour le TS.\n\nLe TS s'√©crit tant dans un browser que dans un environnement serveur.  \nOn √©crira du TS conforme au standard que l'on souhaite voir associ√© √† JS : **`ECMAScript`**, **`CommonJS`**...\n\nComme le monde de l'entreprise va de plus en plus vers `ECMAScript 6` (ou `ES6`), nous avons choisi `ECMAScript` comme standard pour ce cours.\n\nNous allons voir dans cette partie les sp√©cificit√©s utiles du TS.\n\nNotons que le TS permet d'am√©liorer l'orient√© objet en JS, mais nous ne verrons pas ces aspects dans ce cours sauf pour quelques exceptions. Nous estimons que le d√©veloppement web moderne ne n√©cessite pas de ma√Ætriser l'orient√© objet en JS ; il nous semble plus int√©ressant de faire de la programmation fonctionnelle, tout en manipulant des objets et des types.\n\n# <InternalPageTitle> A quel moment le TS intervient ? </InternalPageTitle>\n\nEn TypeScript, l'intervention se fait principalement au moment de la **transpilation** (on parle aussi de compilation par abus de langage) :\n- **Type Checking**: TypeScript intervient lors de la transpilation, v√©rifiant les types et s'assurant que le code respecte les d√©finitions de types fournies. Cela permet de d√©tecter les erreurs de type avant l'ex√©cution. \n- **Type Safety** : TypeScript aide √† maintenir la s√©curit√© des types en obligeant √† d√©finir des types pr√©cis pour les variables, les fonctions, etc. Cela √©vite l'utilisation du type `any`, qui d√©sactive les v√©rifications de type, et r√©duit les risques d'erreurs li√©es aux pointeurs nuls (null pointers).\n- Le code TypeScript est transpil√© en JavaScript. Les annotations de type sont supprim√©es et le **code r√©sultant est du pur JavaScript**.\n\nIl y a d'autres aspects importants o√π TypeScript peut intervenir, principalement : \n- **Intellisense** : Les √©diteurs de code et IDE qui supportent TypeScript (comme Visual Studio Code) utilisent les informations de type pour fournir des suggestions de code, auto-compl√©ter les noms de variables et de fonctions, et offrir des informations sur les signatures de fonctions.\n- **Erreurs en temps r√©el** : Pendant l'√©criture du code, les √©diteurs peuvent afficher des erreurs de type en temps r√©el, avant m√™me que le code ne soit compil√©.\n- **Documentation** : Les annotations de type servent de documentation vivante, aidant les d√©veloppeurs √† comprendre les interfaces et les attentes des fonctions.\n- **Refactoring** : Les outils de refactoring utilisent les informations de type pour effectuer des transformations de code de mani√®re s√©curis√©e (comme par exemple le `Quick Fix...` de VS Code).\n- **Linting** : Les outils comme ESLint utilisent les types pour imposer des r√®gles de style et de bonnes pratiques de code.\n- **Tests** : Les frameworks de tests peuvent utiliser les types pour g√©n√©rer des cas de test ou v√©rifier les types des donn√©es manipul√©es.\n- **Runtime (indirectement)** : M√™me si TypeScript ne v√©rifie pas les types √† l'ex√©cution, les d√©veloppeurs peuvent utiliser des gardes de type (type guards) et des assertions pour v√©rifier les types √† l'ex√©cution, ce qui ajoute une couche suppl√©mentaire de s√©curit√©.\n\n# <InternalPageTitle> Quand d√©finir les types ? </InternalPageTitle>\n\n## Introduction\n\nPour maintenir la s√©curit√© des types, il est important d'√©viter que TypeScript inf√®re le type `any` pour les variables, les fonctions, les param√®tres, etc.\n\nIl y a beaucoup de cas o√π TS est capable d'inf√©rer le type d'une variable, d'une fonction, etc. sans que l'on ait besoin de le sp√©cifier explicitement. \n\n## Cas o√π il est inutile de sp√©cifier le type\n\nüëç Lorsque l'inf√©rence de type est claire et √©vidente, ou lorsque l'annotation (de type) n'apporte pas de valeur ajout√©e significative en termes de lisibilit√© ou de documentation, il n'est pas recommand√© de sp√©cifier le type explicitement. Cela peut rendre le code plus verbeux et moins lisible.\n\nVoici quelques exemples o√π il est inutile de sp√©cifier le type :\n  \n  ```ts \n  const x = 10; // TypeScript inf√®re que x est de type number\n  const y = 'hello'; // TypeScript inf√®re que y est de type string\n  const z = [1, 2, 3]; // TypeScript inf√®re que z est de type number[]\n\n  function greet(name: string) { \n    return `Hello, ${name}!`; // Le type string est √©vident ici\n  }\n  ```\n\n## Cas o√π il est important de sp√©cifier le type\n\n### Type Checking\n\nüëç Il est recommand√© de sp√©cifier le type lorsque TypeScript ne peut pas inf√©rer le type correctement, ou lorsque l'inf√©rence de type peut entra√Æner des erreurs potentielles difficiles √† d√©tecter.\n\nVoici un exemple concret o√π il est recommand√© de sp√©cifier le type :\n\n  ```ts\n  let value; // TypeScript inf√®re que value est de type any\n\nfunction setValue(newValue) { \n    value = newValue; \n}\n\nsetValue(42);\n\n// Plus tard dans le code\nconsole.log(value.toFixed(2)); // Erreur √† la compilation/transpilation : toFixed n'est pas une fonction sur type 'any'\n  ```\n\nTypeScript d√©tectera l'erreur lors de la transpilation/compilation, car value est de type `any` et n'a pas de m√©thode `toFixed`.\nC'est l'√©diteur de code qui indiquera cette erreur avant que le code ne soit transpil√© en JavaScript.\n\nPour √©viter ce probl√®me, voici comment on peut sp√©cifier le type de `value` :\n\n```ts\nlet value: number;\n\nfunction setValue(newValue: number) {\n    value = newValue;\n}\n\nsetValue(42);\n\n// Maintenant, TypeScript sait que value est de type number\nconsole.log(value.toFixed(2)); // Correct : affiche '42.00'\n```\n\nEn sp√©cifiant `value` comme √©tant de type `number`, TypeScript peut v√©rifier statiquement que les op√©rations ult√©rieures sur `value` (comme `toFixed(2)`) sont appropri√©es et √©viter les erreurs potentielles qui seraient r√©v√©l√©es √† l'ex√©cution.\n\n### Documentation & lisibilit√©\n\nüëç Pour l'aspect documentation et lisibilit√©, il est recommand√© de sp√©cifier le type des param√®tres de fonction. Concernant les valeurs de retour, m√™me si TypeScript peut les inf√©rer correctement, il est conseill√© de sp√©cifier le type de retour lorsque le corps de la fonction est volumineux. Cela rend le code plus explicite et aide les autres d√©veloppeurs √† comprendre comment utiliser la fonction sans avoir √† lire son impl√©mentation.\n\nVoici un exemple d'une fonction assez volumineuse o√π il est recommand√© de sp√©cifier le type de retour :\n\n```ts\nfunction processData(data: string[]): { averageLength: number, maxLength: number } {\n    let totalLength = 0;\n    let maxLength = 0;\n\n    for (let item of data) {\n        totalLength += item.length;\n        if (item.length > maxLength) {\n            maxLength = item.length;\n        }\n    }\n\n    const averageLength = data.length > 0 ? totalLength / data.length : 0;\n\n    return { averageLength, maxLength };\n}\n```\nEn sp√©cifiant le type de retour `{ averageLength: number, maxLength: number }`, on documente clairement que la fonction processData produit un objet avec ces deux propri√©t√©s. Cela rend le code plus explicite et facilite la compr√©hension pour les autres d√©veloppeurs qui utilisent ou maintiennent cette fonction.\n\n### Maintenabilit√© \n\nüëç Dans le cas o√π le type de retour est complexe ou utilis√© √† plusieurs endroits dans le code, il est int√©ressant de d√©finir une interface ou un type pour ce type de retour. Cela permet de r√©utiliser le type de retour dans d'autres parties du code et de garantir la coh√©rence des types. \n\nVoici ce que √ßa donnerait pour notre exemple :\n  \n  ```ts\n  interface DataProcessingResult {\n    averageLength: number;\n    maxLength: number;\n}\n\nfunction processData(data: string[]): DataProcessingResult {\n    let totalLength = 0;\n    let maxLength = 0;\n\n    for (let item of data) {\n        totalLength += item.length;\n        if (item.length > maxLength) {\n            maxLength = item.length;\n        }\n    }\n\n    const averageLength = data.length > 0 ? totalLength / data.length : 0;\n\n    return { averageLength, maxLength };\n}\n  ```\n  \nEn d√©finissant l'interface `DataProcessingResult`, on peut r√©utiliser ce type de retour dans d'autres parties du code, ce qui rend le code plus maintenable et √©vite les erreurs de type.\n\n# <InternalPageTitle> Comment d√©finir les types ? </InternalPageTitle>\n\nIl existe plusieurs fa√ßons de d√©finir des types en TypeScript. Voici les principales m√©thodes :\n\n## Les annotations de type\n\nLes annotations de type sont des instructions qui indiquent au compilateur TypeScript le type d'une variable, d'un param√®tre de fonction, d'une valeur de retour, etc. Les annotations de type sont plac√©es apr√®s le nom de la variable, du param√®tre ou de la fonction, suivies de deux points **`:`** et du type souhait√©.\n\nVoici quelques exemples d'annotations de type :\n\n```ts\nlet x: number; // x est de type number\nlet y: string; // y est de type string\nlet z: number[]; // z est de type number[]\nconst numbers: number[] = [1, 2, 3]; // numbers est de type number[]\nlet isActive: boolean; // isActive est de type boolean\nlet greet: (name: string) => string; \n// greet est une fonction qui prend un param√®tre de type string et retourne une valeur de type string\nconst person: { name: string, age: number } = { name: \"Alice\", age: 30 };\n```\n\n## Les interfaces\n\nLes interfaces sont des contrats qui d√©finissent la structure des objets en TypeScript. Elles permettent de d√©finir des types personnalis√©s pour les objets, les fonctions, les classes, etc. Les interfaces sont largement utilis√©es pour d√©finir des types complexes et r√©utilisables.\n\nVoici un exemple d'interface pour d√©finir un type de donn√©es :\n\n```ts\ninterface Person {\n    readonly id: number; // Propri√©t√© en lecture seule\n    name: string;\n    age: number;\n    email?: string; // Propri√©t√© optionnelle\n}\n\nconst alice: Person = { id:1, name: \"Alice\", age: 30 };\nconst bob: Person = { id:2, name: \"Bob\", age: 25, email: \"bob@vinci.be\" };\n\n// Tentative de modification d'une propri√©t√© en lecture seule (erreur)\n// alice.id = 3; // Erreur: Cannot assign to 'id' because it is a read-only property.\n```\n\nNotons qu'une interface peut √©tendre un type d√©fini ou une autre interface. Voici un exemple d'interface qui √©tend un type d√©fini:\n  \n  ```ts\n  type Employee = { // fonctionne aussi avec une interface (interface Employee { ... })\n    name: string;\n    age: number;\n};\n\ninterface Manager extends Employee {\n    department: string;\n    manageTeam(): void;\n}\n\nconst manager: Manager = {\n    name: \"Bob\",\n    age: 35,\n    department: \"HR\",\n    manageTeam() {\n        console.log(\"Managing team...\");\n    }\n};\n  ```\n\n## Les types\n\nLes types sont similaires aux interfaces, mais ils peuvent √©galement √™tre utilis√©s pour d√©finir des types primitifs, des unions, des intersections, des tuples, etc. \n\nVoici un exemple de type pour d√©finir un type de donn√©es :\n\n```ts\ntype Person = {\n    name: string;\n    age: number;\n    email?: string; // Propri√©t√© optionnelle\n    readonly id: number; // Propri√©t√© en lecture seule\n}\n\nconst person: Person = {\n    name: \"Alice\",\n    age: 30,\n    id: 1\n    // email est optionnel et peut √™tre omis si n√©cessaire\n};\n```\n\nNotons que les types peuvent √™tre utilis√©s pour d√©finir des types primitifs, des unions, des intersections, des tuples, etc. :\n\n```ts\ntype ID = string | number; // Unions type\n\ntype Printable = {\n    print(): void;\n};\n\ntype Loggable = {\n    log(): void;\n};\n\ntype LoggableAndPrintable = Printable & Loggable; // Intersections de type\n\n// Utilisation du type intersection\nlet obj: LoggableAndPrintable = {\n    print() {\n        console.log(\"Printing...\");\n    },\n    log() {\n        console.log(\"Logging...\");\n    }\n};\n\nfunction readPizzaById(id: number): Pizza | undefined {\n  const pizzas = parse(jsonDbPath, defaultPizzas);\n  return pizzas.find((pizza) => pizza.id === id);\n} // Fonction qui retourne un type Pizza ou undefined\n```\n\n## Les classes\n\nLes classes en TypeScript peuvent √©galement √™tre utilis√©es pour d√©finir des types. Les classes peuvent √™tre utilis√©es pour d√©finir des types d'objets avec des propri√©t√©s et des m√©thodes.\n\nVoici un exemple de classe pour d√©finir un type de donn√©es :\n\n```ts\nclass Person {\n    name: string;\n    age: number;\n    email?: string; // Propri√©t√© optionnelle\n\n    constructor(name: string, age: number, email?: string) {\n        this.name = name;\n        this.age = age;\n        this.email = email;\n    }\n}\n``` \nüëç Dans ce cours, nous avons volontairement choisi de ne pas faire d'orient√© objet en JS/TS. Nous vous recommandons de ne pas utiliser les classes pour d√©finir des types, mais plut√¥t d'utiliser des interfaces ou des types.\n\n## Les enums\n\nLes √©num√©rations (enums) sont des types de donn√©es qui permettent de d√©finir un ensemble de valeurs nomm√©es. Les √©num√©rations sont largement utilis√©es pour d√©finir des types de donn√©es avec des valeurs pr√©d√©finies.\n\nVoici un exemple d'√©num√©ration pour d√©finir un type de donn√©es :\n\n```ts\nenum Color {\n    Red = 'red',\n    Green = 'green',\n    Blue = 'blue'\n}\n\nconst color: Color = Color.Red;\n\nif (color === Color.Red) {\n    console.log(\"It's red!\");\n}\n```\n\n## Generics\n\nLes g√©n√©riques (generics) sont des types de donn√©es param√©tr√©s qui permettent de d√©finir des types r√©utilisables et flexibles. Les g√©n√©riques sont utilis√©s pour d√©finir des types de donn√©es qui peuvent accepter diff√©rents types de param√®tres.  \n\nVoici un exemple de g√©n√©rique pour d√©finir un type de donn√©es :\n\n```ts\n// D√©finition d'une interface g√©n√©rique\ninterface Box<T> {\n    value: T;\n}\n\n// Utilisation de l'interface g√©n√©rique\nconst box1: Box<number> = { value: 10 };\nconst box2: Box<string> = { value: \"Hello, TypeScript!\" };\nconst box3: Box = { value: true }; // le type de T est inf√©r√© comme boolean\n\nconsole.log(box1.value); // Output: 10\nconsole.log(box2.value); // Output: \"Hello, TypeScript!\"\nconsole.log(box3.value); // Output: true\n```\n\n## Interfaces vs Types\n\nLes interfaces et les types sont deux fa√ßons de d√©finir des types en TypeScript. Les interfaces sont principalement utilis√©es pour d√©finir des structures d'objets (et leur contrat), tandis que les types sont utilis√©s pour d√©finir des types primitifs, des unions, des intersections...\n\nüëç Dans ce cours, nous vous recommandons d'utiliser les interfaces pour d√©finir des types d'objets.\n\nVoici un exemple :\n  \n  ```ts\ninterface Pizza {\n  id: number;\n  title: string;\n  content: string;\n}\n\nconst pizza: Pizza = {\n  id: 1,\n  title: \"Margherita\",\n  content: \"Tomato, mozzarella, basilique\"\n};\n```\n\n\nüëç Dans ce cours, nous vous recommandons d'utiliser les types pour d√©finir des types primitifs, des unions et des intersections, des types sur base d'interfaces...\n\nVoici quelques exemples :\n  \n  ```ts\n  interface AuthenticatedUser {\n  username: string;\n  token: string;\n}\n\n  type MaybeAuthenticatedUser = AuthenticatedUser | undefined; // Union type\n\n\n  interface Pizza {\n  id: number;\n  title: string;\n  content: string;\n}\n\n  type NewPizza = Omit<Pizza, \"id\">;  // Omet la propri√©t√© \"id\" de l'interface Pizza\n\n  function updatePizza(\n  id: number,\n  updatedPizza: Partial<NewPizza> // Partial permet de rendre les propri√©t√©s de NewPizza optionnelles\n): Pizza {\n  // ...\n}\n```\n\n`Omit` est un utilitaire TS qui permet de cr√©er un nouveau type en omettant certaines propri√©t√©s d'un type existant.\n\n`Partial` est un utilitaire TS qui permet de rendre toutes les propri√©t√©s d'un type optionnel.\n\n# <InternalPageTitle> Comment contr√¥ler le flux en TS ? </InternalPageTitle>\n\n## Introduction\n\nLe contr√¥le de flux vise √† garantir la s√©curit√© et la pr√©cision des types en fonction des chemins d'ex√©cution possibles. \n\nLe contr√¥le de flux en TypeScript se r√©f√®re g√©n√©ralement √† l'ensemble des m√©canismes par lesquels le transpilateur/compilateur analyse les chemins d'ex√©cution possibles d'un programme pour d√©terminer les types des variables. Cela inclut les v√©rifications de type conditionnelles telles que `if`, `else`, `switch`, ainsi que les op√©rateurs de v√©rification de type comme `typeof`, `instanceof`, `in`, et les assertions de type via `as`.\n\n## V√©rification de type conditionnelle\n\nLa v√©rification de type conditionnelle est une technique courante pour garantir la s√©curit√© des types en fonction des conditions. TypeScript utilise les instructions `if`, `else`, `switch` pour effectuer des v√©rifications de type conditionnelles.\n\nVoici un exemple d'utilisation de la v√©rification de type conditionnelle avec `if` :\n\n```ts\nfunction greet(name: string | undefined) {\n    if (name) { // TypeScript sait que name est de type string ici\n        console.log(`Hello, ${name}!`); \n    } else { // TypeScript sait que name est de type undefined ici\n        console.log(\"Hello, stranger!\");\n    }\n}\n```\n\nDans cet exemple, TypeScript inf√®re que `name` est de type `string | undefined`. La v√©rification `if (name)` permet de v√©rifier si `name` est d√©fini (non `undefined`) avant d'afficher le message de salutation.\n\n## Op√©rateurs de v√©rification de type\n\nLes op√©rateurs de v√©rification de type sont des outils puissants pour garantir la s√©curit√© des types en TypeScript. Ces op√©rateurs permettent de v√©rifier le type d'une variable ou d'une expression √† l'ex√©cution.\n\nVoici quelques exemples d'op√©rateurs de v√©rification de type :\n\n### `typeof`\n\nL'op√©rateur `typeof` permet de v√©rifier le type d'une variable ou d'une expression √† l'ex√©cution. TypeScript utilise `typeof` pour effectuer des v√©rifications de type sur les variables.\n\n```ts \nfunction logType(value: unknown) {\n    if (typeof value === \"string\") {  // V√©rifie si value est une string\n        console.log(\"It's a string!\");\n    } else if (typeof value === \"number\") {\n        console.log(\"It's a number!\");\n    } else {\n        console.log(\"Unknown type!\");\n    }\n}\n```\n\nDans cet exemple, TypeScript utilise `typeof` pour v√©rifier le type de `value` et afficher un message en fonction du type d√©tect√©.\n\n### `instanceof`\n\nL'op√©rateur `instanceof` permet de v√©rifier si un objet est une instance d'une classe.\n\nVoici un exemple :\n  \n  ```ts\nclass Person {\n    name: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n\nfunction greet(person: Person | unknown) {\n    if (person instanceof Person) { // V√©rifie si person est une instance de Person\n        console.log(`Hello, ${person.name}!`);\n    } else {\n        console.log(\"Hello, stranger!\");\n    }\n}\n```\nDans cet exemple, TypeScript utilise `instanceof` pour v√©rifier si `person` est une instance de `Person` avant d'afficher le message de salutation. Vous ne verrez pas ce genre de code dans ce cours, car nous ne faisons pas d'orient√© objet en JS/TS.\n\n### `in`\n\nL'op√©rateur `in` permet de v√©rifier si une propri√©t√© existe dans un objet. TypeScript utilise `in` pour effectuer des v√©rifications de type sur les propri√©t√©s d'un objet.\n\nVoici un exemple avec une interface `Person` :\n  \n  ```ts\ninterface Person {\n  name: string;\n  age: number;\n}\n\nfunction greet(person: Person | unknown) {\n  if (person && typeof person === \"object\"  && \"name\" in person) {\n      console.log(`Hello, ${person.name}!`);\n  } else {\n      console.log(\"Hello, stranger!\");\n  }\n}\n  ```\n\nDans cet exemple, TypeScript utilise `in` pour v√©rifier si la propri√©t√© `name` existe dans `person` avant d'afficher le message de salutation.\n\n### Assertions de type\n\nLes assertions de type (type assertions) permettent de forcer le type d'une variable ou d'une expression √† un type sp√©cifique. TypeScript utilise les assertions de type pour effectuer des v√©rifications de type manuelles.\n\nAttention, les assertions de type ne changent pas le comportement √† l'ex√©cution de votre code ! Il est donc important d'utiliser les assertions de type que quand vous √™tes s√ªr du type de la variable ! A utiliser avec pr√©caution et parcimonie.\n\n#### Assertions de type avec `as`\n\nVoici un exemple d'assertion de type avec `as` :\n  \n  ```ts\n interface Person {\n  id: number;\n  username: string;\n  email: string;\n}\n\n// Exemple de donn√©es re√ßues de l'API (simplifi√©)\nconst apiResponse: unknown = {\n  id: 1,\n  username: \"john_doe\",\n  email: \"john.doe@example.com\",\n  // D'autres propri√©t√©s qui ne nous int√©ressent pas pour cet exemple\n};\n\n// V√©rification de type pour garantir que 'apiResponse' est bien de type 'User'\nif (\n  apiResponse &&\n  typeof apiResponse === \"object\" &&\n  \"id\" in apiResponse &&\n  \"username\" in apiResponse &&\n  \"email\" in apiResponse\n) {\n  const user: Person = {\n    id: apiResponse.id as number, // Assertion de type pour 'id'\n    username: apiResponse.username as string,   // Assertion de type pour 'username'\n    email: apiResponse.email as string,  // Assertion de type pour 'email'\n  };\n\n  console.log(user);\n}\n  ```\n\nDans cet exemple, TypeScript utilise des assertions de type avec `as` pour forcer le type des propri√©t√©s de `apiResponse` √† `number` et `string` respectivement. Cela garantit que `user` est de type `Person` et √©vite les erreurs de type potentielles √† la transpilation.\n\n#### Assertion de type non-null\n\nL'assertion de type non-null (`!`) affirme (au transpiler et aux lecteurs du code) que la valeur d'une variable n'est pas `null` ou `undefined` (on dit \"nullish\").\n\nVoici un exemple d'assertion de type non-null :\n  \n  ```ts\nlet value: string | undefined = \"Hello, TypeScript!\";\nconst length = value!.length; // Assertion de type non-null(ish)\nconsole.log(length); // Output: 17\n  ```\nDans cet exemple, TypeScript utilise l'assertion de type non-null (`!`) pour garantir que `value` n'est pas `null` avant d'acc√©der √† sa propri√©t√© `length`.\n\n\n\n## Conclusion\n\nLe contr√¥le de flux en TypeScript est un outil puissant pour garantir la s√©curit√© des types en fonction des chemins d'ex√©cution possibles. En utilisant des v√©rifications de type conditionnelles, des op√©rateurs de v√©rification de type et des assertions de type, les d√©veloppeurs peuvent s'assurer que leur code respecte les d√©finitions de types fournies et √©viter les erreurs de type potentielles.\n\nNous avons vu les fa√ßons les plus directes de contr√¥ler le flux en TS ; il existe d'autre fa√ßons (type guards, assertion functions), mais nous ne les verrons pas dans ce cours. \n\n# <InternalPageTitle> R√©duction de type plus avanc√©e </InternalPageTitle>\n\n## Introduction\n\nEn TypeScript, la **r√©duction de type** (\"type narrowing\") permet de contr√¥ler le flux d'ex√©cution (vu √† la section pr√©c√©dente) en ajustant dynamiquement le type des variables, facilitant ainsi des d√©cisions conditionnelles bas√©es sur des types pr√©cis dans le code.\n\nLa **r√©duction de type** (\"type narrowing\") en TypeScript fait r√©f√©rence au processus par lequel TypeScript restreint le type d'une variable ou d'une expression √† un sous-type plus sp√©cifique. Cela se produit g√©n√©ralement apr√®s une v√©rification de type, ce qui permet au compilateur TypeScript de savoir plus pr√©cis√©ment quel type de valeur vous manipulez √† un moment donn√© dans votre code.\n\nNous allons voir quelques exemples courants de **r√©duction de type** plus avanc√© en TypeScript dans une application Express.\n\n## Tentative n¬∞1 de r√©duction de type du body d'une requ√™te : assertion de type\n\nEn TS, lorsqu'on utilise Express, le type du `body` d'une requ√™te est `any` par d√©faut. Cela peut √™tre probl√©matique, car cela signifie que le type du `body` n'est pas v√©rifi√© par TypeScript. \n\nPour r√©duire le type du body √† un type plus sp√©cifique, on pourrait utiliser une assertion de type :\n\n```ts numbered highlighting=\"2\"\nrouter.post(\"/\", (req, res) => {\n  const { title, content } = req.body as NewPizza;\n\n  if (\n    !title ||\n    !content ||\n    !isString(title) ||\n    !isString(content) ||\n    !title.trim() ||\n    !content.trim()\n  ) {\n    return res.sendStatus(400);\n  }\n\n  const pizzas = parse(jsonDbPath, defaultPizzas);\n  // Use reduce() to find the highest id in the pizzas array\n  const nextId =\n    pizzas.reduce((maxId, pizza) => (pizza.id > maxId ? pizza.id : maxId), 0) +\n    1; // 0 is the initial value of maxId\n\n  const addedPizza: Pizza = {\n    id: nextId,\n    title,\n    content,\n  };\n\n  pizzas.push(addedPizza);\n\n  serialize(jsonDbPath, pizzas);\n\n  return res.json(addedPizza);\n});\n```\n\nN√©anmoins, cette approche n'est pas optimale, car il est impossible d'assurer que le type du `body` est bien `NewPizza`. En effet, une API n'a pas d'influence sur ce que les clients d√©cident d'envoyer.\n\nPour des raisons de robustesse de l'API, on se doit de valider le type du `body` avant de l'utiliser. Cela sera fait √† l'ex√©cution ici (lignes 4 √† 13) via des v√©rifications de type, mais on prend le risque d'oublier une validation qui pourrait √™tre d√©tect√©e √† la transpilation/compilation.\n\nüëé D√®s lors, nous vous d√©conseillons d'utiliser l'assertion de type (avec `as`) pour r√©duire le type du `body` d'une requ√™te Express.  \nM√™me si le code est tr√®s concis, √ßa n'est pas une bonne pratique de faire des v√©rifications de type apr√®s avoir utilis√© une assertion de type juste pour se simplifier la vie en TS.\n\n## Tentative n¬∞2 de r√©duction de type du body d'une requ√™te : v√©rification de type uniquement\n\nPour r√©duire le type du `body` √† un type plus sp√©cifique, on pourrait tenter d'utiliser une v√©rification de type :\n\n```ts highlighting=\"9-10\"\nrouter.post(\"/\", (req, res) => {\n  if (\n      !req.body ||\n      typeof req.body !== 'object' ||\n      !(\"title\" in req.body) || \n      !(\"content\" in req.body) ||\n      typeof req.body.title !== 'string' ||\n      typeof req.body.content !== 'string' ||\n      !req.body.title.trim() || // Unsafe call of an `any` typed value.\n      !req.body.content.trim() // Unsafe call of an `any` typed value.\n    ) {\n      return res.sendStatus(400);\n    }\n    //... \n```\n\n‚ö°Ô∏è Ici, `req.body` est de type `any`. TS ne reconna√Æt pas la r√©duction de type pour une variable de type `any`. Ce code ne peut donc pas transpiler/ compiler !  \nAinsi, il est n√©cessaire de typer la variable `req.body` pour que TS puisse reconna√Ætre les propri√©t√©s `title` et `content` et les types de ces propri√©t√©s.\n\n## R√©duction de type du body d'une requ√™te : assertion de type avec `unknown`\n\nNous allons cr√©er une variable de type `unknown` qui est une forme plus strictement typ√©e d'`any`, car TypeScript n√©cessite que vous effectuiez une v√©rification de type avant d'acc√©der √† ses propri√©t√©s ou de l'assigner √† un autre type :\n\n```ts numbered highlighting=\"2\"\nrouter.post(\"/\", (req, res) => {\n  const body: unknown = req.body;\n  if (\n    !body ||\n    typeof body !== \"object\" ||\n    !(\"title\" in body) ||\n    !(\"content\" in body) ||\n    typeof body.title !== \"string\" ||\n    typeof body.content !== \"string\" ||\n    !body.title.trim() ||\n    !body.content.trim()\n  ) {\n    return res.sendStatus(400);\n  }\n\nconst { title, content } = body;\n//...\n```\n\nüëç Ici, `title` et `content` sont reconnues par TypeScript comme de type `string` apr√®s la v√©rification de type. C'est donc une solution robuste qui peut √™tre utilis√©e dans ce cours.\n\nüí≠  Notons ici que pour TS, le type de `body` est : `object & Record<\"title\", unknown> & Record<\"content\", unknown>`. C'est un type tr√®s complexe, mais qui permet de garantir que `title` et `content` sont bien des propri√©t√©s de `body`.\n\nLe type `Record<\"title\", unknown>` repr√©sente un objet qui a une propri√©t√© obligatoire nomm√©e `title` avec une valeur de type inconnu (`unknown`). De m√™me pour `content`.  \nPourtant, TS d√©tecte que le type de `title` est `string`... Mais au niveau de l'objet `body`, √ßa n'est pas le cas...  \nOn peut retenir cela : **en TS, la r√©duction de type des propri√©t√©s d'un objet ne r√©duit pas le type de l'objet lui-m√™me.**\n\nNous ne pourrions pas √©crire :\n  \n```ts numbered highlighting=\"16\"\nrouter.post(\"/\", (req, res) => {\n  const body: unknown = req.body;\n  if (\n    !body ||\n    typeof body !== \"object\" ||\n    !(\"title\" in body) ||\n    !(\"content\" in body) ||\n    typeof body.title !== \"string\" ||\n    typeof body.content !== \"string\" ||\n    !body.title.trim() ||\n    !body.content.trim()\n  ) {\n    return res.sendStatus(400);\n  }\n\nconst { title, content } : NewPizza = body;\n//...\n```\n\nCe code ne transpile pas car TS ne peut pas garantir que `title` et `content` sont bien de type `string` apr√®s la v√©rification de type. Comme vu pr√©c√©demment, `body` est complexe et TS ne peut pas r√©duire le type de `body` √† `NewPizza`.\n\nD√®s lors, dans ce cas, comme on est s√ªr du type, on pourrait utiliser une assertion de type pour r√©duire le type de `body` √† un type plus sp√©cifique :\n\n```ts numbered highlighting=\"16\"\nrouter.post(\"/\", (req, res) => {\n  const body: unknown = req.body;\n  if (\n    !body ||\n    typeof body !== \"object\" ||\n    !(\"title\" in body) ||\n    !(\"content\" in body) ||\n    typeof body.title !== \"string\" ||\n    typeof body.content !== \"string\" ||\n    !body.title.trim() ||\n    !body.content.trim()\n  ) {\n    return res.sendStatus(400);\n  }\n\n  const { title, content } = body as NewPizza;\n  //...\n```\n\nüëç Ici, `body` est r√©duit √† `NewPizza` via une assertion de type. C'est une solution robuste qui peut aussi √™tre utilis√©e dans ce cours. L'avantage par rapport au m√™me code mais sans l'assertion de type (`as NewPizza`), c'est que TS informera le d√©veloppeur si `body` n'est plus de type `NewPizza` √† la transpilation/compilation.  \n\nüí≠ En effet, si le type `NewPizza` venait √† changer (si l'on ajoutait une propri√©t√© par exemple), alors le linter afficherait qu'il manque une propri√©t√© partout o√π ce type est utilis√©.  \nPar exemple, si on ajoute une propri√©t√© `price` √† `NewPizza`, alors TS afficherait une erreur √† la ligne 16 car `body` n'a pas de propri√©t√© `price`.\n\n## üç¨ R√©duction de type du body d'une requ√™te : fonction de type \"guard\"\n\nParfois, on souhaiterait que TypeScript puisse inf√©rer le type de `req.body` sans avoir √† le typer explicitement (avec `as`).\n\nLa seule fa√ßon actuelle de le faire est de cr√©er une **fonction de type \"guard\"** qui permet de v√©rifier si un objet a les propri√©t√©s `title` et `content` et que ces propri√©t√©s sont des cha√Ænes de caract√®res non vides.\n\nUne **fonction de type \"guard\"** retourne un type qui est un \"predicate\", un type qui permet de v√©rifier si une valeur est d'un certain type.\n\nPar exemple, on pourrait cr√©er une fonction `isNewPizza` qui v√©rifie si un objet a les propri√©t√©s `title` et `content` et que ces propri√©t√©s sont des cha√Ænes de caract√®res non vides.  \n`isNewPizza` retournerait un type pr√©dicat `body is NewPizza` qui  permettrait √† TypeScript de reconna√Ætre que `req.body` est de type `NewPizza`. Imaginez cette fonction d√©finie dans un fichier `/src/utils/type-guards.ts` :\n  ```ts \n  const isNewPizza = (body: unknown): body is NewPizza => {\n  if (\n    !body ||\n    typeof body !== \"object\" ||\n    !(\"title\" in body) ||\n    !(\"content\" in body) ||\n    body.title !== \"string\" ||\n    body.content !== \"string\" ||\n    !body.title.trim() ||\n    !body.content.trim()\n  ) {\n    return false;\n  }\n\n  return true;\n};\n```\n\nEnsuite, on pourrait utiliser cette fonction pour r√©duire le type de `req.body` √† `NewPizza` :\n\n```ts numbered highlighting=\"2\"\nrouter.post(\"/\", (req, res) => {\n  if(!isNewPizza(req.body)) return res.sendStatus(400);\n  const { title, content } : NewPizza = body;\n  //...\n```\n\nPour ce cours, nous avons choisi de ne pas mettre les fonctions de type guard en avant car m√™me si cela offre un code concis et lisible, cela implique une compr√©hension approfondie de TS qui d√©passe les objectifs de ce cours.\n\n# <InternalPageTitle> Comment en savoir plus sur TS ? </InternalPageTitle>\n\nSi vous souhaitez en savoir plus sur ce langage, nous vous recommandons de consulter la documentation en ligne de [typescriptlang.org](https://www.typescriptlang.org).\n\n","fields":{"slug":"/part0/ts-language/"},"frontmatter":{"title":"Language TS","date":null,"navbarExtraStyles":"","headerImage":"","featuredImage":"","description":"Introduction au langage TypeScript, apprentissage de la syntaxe","autoMargin":true}},"allImages":{"edges":[{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/19c44353d690d2192603058b13677c32/050f3/ex2-16-questions.png","srcSet":"/js2/static/19c44353d690d2192603058b13677c32/050f3/ex2-16-questions.png 370w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/19c44353d690d2192603058b13677c32/89e9c/ex2-16-questions.webp 370w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.908108108108108}},"base":"ex2-16-questions.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/7746eb8f2da2b173501f76b41b709419/31045/ex2-16-score.png","srcSet":"/js2/static/7746eb8f2da2b173501f76b41b709419/31045/ex2-16-score.png 268w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/7746eb8f2da2b173501f76b41b709419/adc83/ex2-16-score.webp 268w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.49253731343283585}},"base":"ex2-16-score.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#683898","images":{"fallback":{"src":"/js2/static/53aa06cf17e4239d0dba6ffd09854e02/0cbce/icon.png","srcSet":"/js2/static/53aa06cf17e4239d0dba6ffd09854e02/0cbce/icon.png 512w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/53aa06cf17e4239d0dba6ffd09854e02/cc23f/icon.webp 512w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}},"base":"icon.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8e848","images":{"fallback":{"src":"/js2/static/94e78cdb1293988b357eb1e6074279d9/8cffc/join.png","srcSet":"/js2/static/94e78cdb1293988b357eb1e6074279d9/8cffc/join.png 26w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/94e78cdb1293988b357eb1e6074279d9/2705a/join.webp 26w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.0769230769230769}},"base":"join.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8e848","images":{"fallback":{"src":"/js2/static/814c6001016da3a407035f4cfb117ea5/61ec1/quit.png","srcSet":"/js2/static/814c6001016da3a407035f4cfb117ea5/61ec1/quit.png 28w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/814c6001016da3a407035f4cfb117ea5/fad8c/quit.webp 28w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.9285714285714286}},"base":"quit.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/13b65def72e9840d86bcf161d0140f2d/487a4/places.png","srcSet":"/js2/static/13b65def72e9840d86bcf161d0140f2d/8d835/places.png 750w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/9b397/places.png 1080w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/c1308/places.png 1366w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/487a4/places.png 1599w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/13b65def72e9840d86bcf161d0140f2d/25f33/places.webp 750w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/f7d3e/places.webp 1080w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/cab24/places.webp 1366w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/e838a/places.webp 1599w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.35709818636647905}},"base":"places.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#0878b8","images":{"fallback":{"src":"/js2/static/216c8f19b48a13e3af5020937c6495fe/3f056/deployment.png","srcSet":"/js2/static/216c8f19b48a13e3af5020937c6495fe/f74f0/deployment.png 750w,\n/js2/static/216c8f19b48a13e3af5020937c6495fe/3f056/deployment.png 881w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/216c8f19b48a13e3af5020937c6495fe/00e18/deployment.webp 750w,\n/js2/static/216c8f19b48a13e3af5020937c6495fe/73e10/deployment.webp 881w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5811577752553916}},"base":"deployment.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/e5078/authorizeNOK.png","srcSet":"/js2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/8770b/authorizeNOK.png 750w,\n/js2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/e5078/authorizeNOK.png 809w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/35881/authorizeNOK.webp 750w,\n/js2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/a88f0/authorizeNOK.webp 809w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6093943139678616}},"base":"authorizeNOK.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8d8d8","images":{"fallback":{"src":"/js2/static/02183504e2708ac3e446f29003c8d7bc/60bc5/hacked.png","srcSet":"/js2/static/02183504e2708ac3e446f29003c8d7bc/60bc5/hacked.png 744w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/02183504e2708ac3e446f29003c8d7bc/67170/hacked.webp 744w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4206989247311828}},"base":"hacked.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/7019197416b607b814455c5cde2bfd8d/8a955/authorizeOK.png","srcSet":"/js2/static/7019197416b607b814455c5cde2bfd8d/8a955/authorizeOK.png 747w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/7019197416b607b814455c5cde2bfd8d/b344d/authorizeOK.webp 747w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6666666666666666}},"base":"authorizeOK.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/cd56be61925d779c9a23f9ecdea56e09/fb68f/login.png","srcSet":"/js2/static/cd56be61925d779c9a23f9ecdea56e09/e56fa/login.png 750w,\n/js2/static/cd56be61925d779c9a23f9ecdea56e09/fb68f/login.png 879w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/cd56be61925d779c9a23f9ecdea56e09/5510b/login.webp 750w,\n/js2/static/cd56be61925d779c9a23f9ecdea56e09/da356/login.webp 879w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5017064846416383}},"base":"login.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/js2/static/e795fd2fb63aea24f1a6ec7e3b46dc57/b749b/JSdude.png","srcSet":"/js2/static/e795fd2fb63aea24f1a6ec7e3b46dc57/27b15/JSdude.png 750w,\n/js2/static/e795fd2fb63aea24f1a6ec7e3b46dc57/b749b/JSdude.png 1024w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/e795fd2fb63aea24f1a6ec7e3b46dc57/cfe1c/JSdude.webp 750w,\n/js2/static/e795fd2fb63aea24f1a6ec7e3b46dc57/5e515/JSdude.webp 1024w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}},"base":"JSdude.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/df999928d139b76e4624212deb47afa1/c60dc/ajax.png","srcSet":"/js2/static/df999928d139b76e4624212deb47afa1/c60dc/ajax.png 569w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/df999928d139b76e4624212deb47afa1/9f538/ajax.webp 569w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8927943760984183}},"base":"ajax.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/718a6/cors-issue.png","srcSet":"/js2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/3b3b8/cors-issue.png 750w,\n/js2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/718a6/cors-issue.png 1031w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/148ba/cors-issue.webp 750w,\n/js2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/53c8e/cors-issue.webp 1031w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.29582929194956353}},"base":"cors-issue.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/11b64c3a36326f1301636f365163fa87/487a4/carousel.png","srcSet":"/js2/static/11b64c3a36326f1301636f365163fa87/8d835/carousel.png 750w,\n/js2/static/11b64c3a36326f1301636f365163fa87/9b397/carousel.png 1080w,\n/js2/static/11b64c3a36326f1301636f365163fa87/c1308/carousel.png 1366w,\n/js2/static/11b64c3a36326f1301636f365163fa87/487a4/carousel.png 1599w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/11b64c3a36326f1301636f365163fa87/25f33/carousel.webp 750w,\n/js2/static/11b64c3a36326f1301636f365163fa87/f7d3e/carousel.webp 1080w,\n/js2/static/11b64c3a36326f1301636f365163fa87/cab24/carousel.webp 1366w,\n/js2/static/11b64c3a36326f1301636f365163fa87/e838a/carousel.webp 1599w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.35709818636647905}},"base":"carousel.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8e8e8","images":{"fallback":{"src":"/js2/static/cd7a86517cd86bf67e97a9455782f61e/3a7c2/errors.png","srcSet":"/js2/static/cd7a86517cd86bf67e97a9455782f61e/3a7c2/errors.png 589w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/cd7a86517cd86bf67e97a9455782f61e/8d14e/errors.webp 589w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.43803056027164683}},"base":"errors.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/368b66a6c71ce7ae5149f7fe124c67b4/dedcf/independentFrontBackSPA.png","srcSet":"/js2/static/368b66a6c71ce7ae5149f7fe124c67b4/aa4e8/independentFrontBackSPA.png 750w,\n/js2/static/368b66a6c71ce7ae5149f7fe124c67b4/dedcf/independentFrontBackSPA.png 914w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/368b66a6c71ce7ae5149f7fe124c67b4/54e6a/independentFrontBackSPA.webp 750w,\n/js2/static/368b66a6c71ce7ae5149f7fe124c67b4/d4860/independentFrontBackSPA.webp 914w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.48468271334792123}},"base":"independentFrontBackSPA.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/a0a9be40f52062756989e43e359b5c44/4ca31/liveServerFrontSPA.png","srcSet":"/js2/static/a0a9be40f52062756989e43e359b5c44/96859/liveServerFrontSPA.png 750w,\n/js2/static/a0a9be40f52062756989e43e359b5c44/4ca31/liveServerFrontSPA.png 751w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/a0a9be40f52062756989e43e359b5c44/3f918/liveServerFrontSPA.webp 750w,\n/js2/static/a0a9be40f52062756989e43e359b5c44/61905/liveServerFrontSPA.webp 751w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4274300932090546}},"base":"liveServerFrontSPA.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/5033887241592124140462a48f880b31/4c60e/independentFrontBackSPA2.png","srcSet":"/js2/static/5033887241592124140462a48f880b31/57832/independentFrontBackSPA2.png 750w,\n/js2/static/5033887241592124140462a48f880b31/4c60e/independentFrontBackSPA2.png 852w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/5033887241592124140462a48f880b31/73ed4/independentFrontBackSPA2.webp 750w,\n/js2/static/5033887241592124140462a48f880b31/fa338/independentFrontBackSPA2.webp 852w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5762910798122066}},"base":"independentFrontBackSPA2.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/4cf8132263a3922a81198d62fa668e8c/8af70/monolithicSPA.png","srcSet":"/js2/static/4cf8132263a3922a81198d62fa668e8c/9fdee/monolithicSPA.png 750w,\n/js2/static/4cf8132263a3922a81198d62fa668e8c/8af70/monolithicSPA.png 758w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/4cf8132263a3922a81198d62fa668e8c/e02a2/monolithicSPA.webp 750w,\n/js2/static/4cf8132263a3922a81198d62fa668e8c/1677e/monolithicSPA.webp 758w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.712401055408971}},"base":"monolithicSPA.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/9482be8bcc11374b223c4bff1aaa7cef/6c4d1/movies.png","srcSet":"/js2/static/9482be8bcc11374b223c4bff1aaa7cef/44ede/movies.png 750w,\n/js2/static/9482be8bcc11374b223c4bff1aaa7cef/c97ea/movies.png 1080w,\n/js2/static/9482be8bcc11374b223c4bff1aaa7cef/6c4d1/movies.png 1268w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/9482be8bcc11374b223c4bff1aaa7cef/9378c/movies.webp 750w,\n/js2/static/9482be8bcc11374b223c4bff1aaa7cef/6e0c3/movies.webp 1080w,\n/js2/static/9482be8bcc11374b223c4bff1aaa7cef/498dd/movies.webp 1268w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.38564668769716093}},"base":"movies.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/945336ab536627610c9e7fa03999caa2/746ba/proxy.png","srcSet":"/js2/static/945336ab536627610c9e7fa03999caa2/746ba/proxy.png 691w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/945336ab536627610c9e7fa03999caa2/03d38/proxy.webp 691w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6353111432706222}},"base":"proxy.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/js2/static/309e0fb8b4416829acfed4f7a501206b/98149/logo_vinci.png","srcSet":"/js2/static/309e0fb8b4416829acfed4f7a501206b/98149/logo_vinci.png 544w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/309e0fb8b4416829acfed4f7a501206b/5eade/logo_vinci.webp 544w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.9044117647058824}},"base":"logo_vinci.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/04662f2f0ed1b78bd5ead2c3dec85482/36714/readPizzas.png","srcSet":"/js2/static/04662f2f0ed1b78bd5ead2c3dec85482/36714/readPizzas.png 523w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/04662f2f0ed1b78bd5ead2c3dec85482/dfd8f/readPizzas.webp 523w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.7304015296367113}},"base":"readPizzas.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/8c454120ed3743524b977a50efee14ae/75d45/architecture.png","srcSet":"/js2/static/8c454120ed3743524b977a50efee14ae/c33b9/architecture.png 750w,\n/js2/static/8c454120ed3743524b977a50efee14ae/75d45/architecture.png 859w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/8c454120ed3743524b977a50efee14ae/013ea/architecture.webp 750w,\n/js2/static/8c454120ed3743524b977a50efee14ae/3c3f0/architecture.webp 859w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6030267753201397}},"base":"architecture.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/js2/static/14110746b5f49459429c355815cd77b3/10f52/express-flow.png","srcSet":"/js2/static/14110746b5f49459429c355815cd77b3/eb8cd/express-flow.png 750w,\n/js2/static/14110746b5f49459429c355815cd77b3/10f52/express-flow.png 800w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/14110746b5f49459429c355815cd77b3/4e646/express-flow.webp 750w,\n/js2/static/14110746b5f49459429c355815cd77b3/130b6/express-flow.webp 800w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3825}},"base":"express-flow.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/8eb2b12643e10670a4e4234ccd8a844e/3d704/xss.png","srcSet":"/js2/static/8eb2b12643e10670a4e4234ccd8a844e/613e6/xss.png 750w,\n/js2/static/8eb2b12643e10670a4e4234ccd8a844e/103d4/xss.png 1080w,\n/js2/static/8eb2b12643e10670a4e4234ccd8a844e/3d704/xss.png 1108w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/8eb2b12643e10670a4e4234ccd8a844e/18c9f/xss.webp 750w,\n/js2/static/8eb2b12643e10670a4e4234ccd8a844e/51d3a/xss.webp 1080w,\n/js2/static/8eb2b12643e10670a4e4234ccd8a844e/88976/xss.webp 1108w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.2842960288808664}},"base":"xss.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#c8e8d8","images":{"fallback":{"src":"/js2/static/5c1c4cd476b1911739976c74d5457e03/60e67/middlewares.jpg","srcSet":"/js2/static/5c1c4cd476b1911739976c74d5457e03/60e67/middlewares.jpg 638w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/5c1c4cd476b1911739976c74d5457e03/f273c/middlewares.webp 638w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.7288401253918495}},"base":"middlewares.jpg"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/4af4b8ccca63d0a981c68a20bb9658e1/cc4c8/techno-course.png","srcSet":"/js2/static/4af4b8ccca63d0a981c68a20bb9658e1/cc4c8/techno-course.png 721w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/4af4b8ccca63d0a981c68a20bb9658e1/7f7c1/techno-course.webp 721w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5575589459084604}},"base":"techno-course.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/ff2054d2907d5ebd494875c12fe16a3d/d40cb/middleware-function.png","srcSet":"/js2/static/ff2054d2907d5ebd494875c12fe16a3d/7cb90/middleware-function.png 750w,\n/js2/static/ff2054d2907d5ebd494875c12fe16a3d/d40cb/middleware-function.png 944w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/ff2054d2907d5ebd494875c12fe16a3d/4ffb0/middleware-function.webp 750w,\n/js2/static/ff2054d2907d5ebd494875c12fe16a3d/6c417/middleware-function.webp 944w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.298728813559322}},"base":"middleware-function.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/dbf7fef0d0623475d157204fd950008e/cbf92/techno.png","srcSet":"/js2/static/dbf7fef0d0623475d157204fd950008e/cbf92/techno.png 586w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/dbf7fef0d0623475d157204fd950008e/09c5a/techno.webp 586w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8464163822525598}},"base":"techno.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/593d65b45ead31d08b777b977530fbb0/257c8/form.png","srcSet":"/js2/static/593d65b45ead31d08b777b977530fbb0/257c8/form.png 182w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/593d65b45ead31d08b777b977530fbb0/aa09a/form.webp 182w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.1868131868131868}},"base":"form.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/a4d45cc8f767378935f1a47c6a814bff/c4448/table.png","srcSet":"/js2/static/a4d45cc8f767378935f1a47c6a814bff/c4448/table.png 219w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/a4d45cc8f767378935f1a47c6a814bff/5ce26/table.webp 219w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.547945205479452}},"base":"table.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#282828","images":{"fallback":{"src":"/js2/static/995b19933afe2efc8abdad9e056f7eb0/c35a8/terminal-1.png","srcSet":"/js2/static/995b19933afe2efc8abdad9e056f7eb0/c35a8/terminal-1.png 481w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/995b19933afe2efc8abdad9e056f7eb0/8a064/terminal-1.webp 481w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.2390852390852392}},"base":"terminal-1.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#e8e8e8","images":{"fallback":{"src":"/js2/static/d0eb9efdef86cf105b8020519b702c01/f6ece/pizza2.jpg","srcSet":"/js2/static/d0eb9efdef86cf105b8020519b702c01/e1af2/pizza2.jpg 750w,\n/js2/static/d0eb9efdef86cf105b8020519b702c01/f6ece/pizza2.jpg 800w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/d0eb9efdef86cf105b8020519b702c01/7f694/pizza2.webp 750w,\n/js2/static/d0eb9efdef86cf105b8020519b702c01/4447d/pizza2.webp 800w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6675}},"base":"pizza2.jpg"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#181818","images":{"fallback":{"src":"/js2/static/ec94e10b96163ba7dff989c8073526c9/e4d4e/terminal-2.png","srcSet":"/js2/static/ec94e10b96163ba7dff989c8073526c9/d328f/terminal-2.png 750w,\n/js2/static/ec94e10b96163ba7dff989c8073526c9/e4d4e/terminal-2.png 933w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/ec94e10b96163ba7dff989c8073526c9/dea86/terminal-2.webp 750w,\n/js2/static/ec94e10b96163ba7dff989c8073526c9/92d06/terminal-2.webp 933w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.2722400857449089}},"base":"terminal-2.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/js2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/05d72/browser.png","srcSet":"/js2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/e81f3/browser.png 750w,\n/js2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/05d72/browser.png 815w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/7c1ed/browser.webp 750w,\n/js2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/9c789/browser.webp 815w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6269938650306749}},"base":"browser.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/d5538808d9455e309732cc72d3c16094/5a8ae/bom.png","srcSet":"/js2/static/d5538808d9455e309732cc72d3c16094/5a8ae/bom.png 361w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/d5538808d9455e309732cc72d3c16094/44051/bom.webp 361w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8531855955678671}},"base":"bom.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/815bb84493b798e20f6e050fe7d4f297/8ac59/bytes.heif","srcSet":"/js2/static/815bb84493b798e20f6e050fe7d4f297/8ac59/bytes.heif 730w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/815bb84493b798e20f6e050fe7d4f297/fa94f/bytes.webp 730w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8041095890410959}},"base":"bytes.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/8336698fa5a4150652bf24675d81d450/b818d/console.png","srcSet":"/js2/static/8336698fa5a4150652bf24675d81d450/b818d/console.png 584w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/8336698fa5a4150652bf24675d81d450/2cd0a/console.webp 584w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5941780821917808}},"base":"console.PNG"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#181818","images":{"fallback":{"src":"/js2/static/a2704f93c050f1b8f0af184bca0784e5/bfbd8/copy.png","srcSet":"/js2/static/a2704f93c050f1b8f0af184bca0784e5/bfbd8/copy.png 41w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/a2704f93c050f1b8f0af184bca0784e5/54421/copy.webp 41w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.048780487804878}},"base":"copy.PNG"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/20e0138ec54042c9ab8df2df718b51c7/ad8b1/cssom.heif","srcSet":"/js2/static/20e0138ec54042c9ab8df2df718b51c7/ad8b1/cssom.heif 730w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/20e0138ec54042c9ab8df2df718b51c7/4fc4f/cssom.webp 730w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3136986301369863}},"base":"cssom.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/7c8ef3e05614d0f1331eb1622972209f/ad8b1/dom.heif","srcSet":"/js2/static/7c8ef3e05614d0f1331eb1622972209f/ad8b1/dom.heif 730w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/7c8ef3e05614d0f1331eb1622972209f/4fc4f/dom.webp 730w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3136986301369863}},"base":"dom.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/2c0e805dbcef0b4210fddd87f2fdcd0b/7d9c5/dom2.gif","srcSet":"/js2/static/2c0e805dbcef0b4210fddd87f2fdcd0b/7d9c5/dom2.gif 486w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/2c0e805dbcef0b4210fddd87f2fdcd0b/3b54a/dom2.webp 486w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5473251028806584}},"base":"dom2.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8d818","images":{"fallback":{"src":"/js2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/efde9/js-logo.png","srcSet":"/js2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/27b15/js-logo.png 750w,\n/js2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/efde9/js-logo.png 768w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/cfe1c/js-logo.webp 750w,\n/js2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/ea3b7/js-logo.webp 768w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}},"base":"js-logo.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/9f49136562a5d771c51d7600430566b1/38d9f/eventflow.png","srcSet":"/js2/static/9f49136562a5d771c51d7600430566b1/38d9f/eventflow.png 480w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/9f49136562a5d771c51d7600430566b1/cd74b/eventflow.webp 480w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.1666666666666667}},"base":"eventflow.png"}},{"node":{"childImageSharp":null,"base":"red-light.gif"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/283b4c657f5c4a706c3e29d0a08fd451/7edf3/render.heif","srcSet":"/js2/static/283b4c657f5c4a706c3e29d0a08fd451/7edf3/render.heif 730w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/283b4c657f5c4a706c3e29d0a08fd451/29aef/render.webp 730w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4383561643835616}},"base":"render.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#282828","images":{"fallback":{"src":"/js2/static/302e83d40f9486ab7ea528e217821223/d5cd3/start.png","srcSet":"/js2/static/302e83d40f9486ab7ea528e217821223/d5cd3/start.png 511w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/302e83d40f9486ab7ea528e217821223/02192/start.webp 511w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.40117416829745595}},"base":"start.PNG"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#484848","images":{"fallback":{"src":"/js2/static/d500a235cf91fee0cec65a112a3fd9a8/a166b/backend-frameworks.png","srcSet":"/js2/static/d500a235cf91fee0cec65a112a3fd9a8/a166b/backend-frameworks.png 634w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/d500a235cf91fee0cec65a112a3fd9a8/de393/backend-frameworks.webp 634w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5394321766561514}},"base":"backend-frameworks.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#d88848","images":{"fallback":{"src":"/js2/static/c4a1984e0b0ce60b9f9f72756293a96e/50940/frontend-technos.jpg","srcSet":"/js2/static/c4a1984e0b0ce60b9f9f72756293a96e/50940/frontend-technos.jpg 461w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/c4a1984e0b0ce60b9f9f72756293a96e/9d85c/frontend-technos.webp 461w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5553145336225597}},"base":"frontend-technos.jpg"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/852194cf7727296de1adabc80b737b1d/52ccc/critere-eval.jpg","srcSet":"/js2/static/852194cf7727296de1adabc80b737b1d/24844/critere-eval.jpg 750w,\n/js2/static/852194cf7727296de1adabc80b737b1d/52ccc/critere-eval.jpg 844w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/852194cf7727296de1adabc80b737b1d/ba934/critere-eval.webp 750w,\n/js2/static/852194cf7727296de1adabc80b737b1d/f361e/critere-eval.webp 844w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.2890995260663507}},"base":"critere-eval.jpg"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/4231407aeb2eab1eb26748522a49f119/1daa6/js-evolution.png","srcSet":"/js2/static/4231407aeb2eab1eb26748522a49f119/1daa6/js-evolution.png 505w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/4231407aeb2eab1eb26748522a49f119/1d9c9/js-evolution.webp 505w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3702970297029703}},"base":"js-evolution.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#a8c888","images":{"fallback":{"src":"/js2/static/62895fac28825996f4895ee798c3c5da/964cf/modules-breakdown.png","srcSet":"/js2/static/62895fac28825996f4895ee798c3c5da/ddebf/modules-breakdown.png 750w,\n/js2/static/62895fac28825996f4895ee798c3c5da/964cf/modules-breakdown.png 1056w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/62895fac28825996f4895ee798c3c5da/f59f5/modules-breakdown.webp 750w,\n/js2/static/62895fac28825996f4895ee798c3c5da/280c1/modules-breakdown.webp 1056w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3759469696969697}},"base":"modules-breakdown.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#283848","images":{"fallback":{"src":"/js2/static/79637217dd57af31bd8a8860191ab8d8/dbdf5/most-pop-programming.png","srcSet":"/js2/static/79637217dd57af31bd8a8860191ab8d8/dbdf5/most-pop-programming.png 715w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/79637217dd57af31bd8a8860191ab8d8/349ed/most-pop-programming.webp 715w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8139860139860139}},"base":"most-pop-programming.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/js2/static/fa47b7868326f417638155af9c4e1131/a19b7/mpa-api.png","srcSet":"/js2/static/fa47b7868326f417638155af9c4e1131/1f5ea/mpa-api.png 750w,\n/js2/static/fa47b7868326f417638155af9c4e1131/a19b7/mpa-api.png 847w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/fa47b7868326f417638155af9c4e1131/98a4a/mpa-api.webp 750w,\n/js2/static/fa47b7868326f417638155af9c4e1131/b3688/mpa-api.webp 847w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4628099173553719}},"base":"mpa-api.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/js2/static/0db4cabf70d03ffdaba26ad2279a1f03/36fe5/mpa.png","srcSet":"/js2/static/0db4cabf70d03ffdaba26ad2279a1f03/36fe5/mpa.png 540w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/0db4cabf70d03ffdaba26ad2279a1f03/94f16/mpa.webp 540w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.7259259259259259}},"base":"mpa.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/df3eb96d3792fedc90e824b9ff4ee666/9aa96/spa-monolithic.png","srcSet":"/js2/static/df3eb96d3792fedc90e824b9ff4ee666/9aa96/spa-monolithic.png 541w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/df3eb96d3792fedc90e824b9ff4ee666/65253/spa-monolithic.webp 541w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.7245841035120149}},"base":"spa-monolithic.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/97447aabc0c3f79a34494e5fa4b0b55d/cd171/planning.png","srcSet":"/js2/static/97447aabc0c3f79a34494e5fa4b0b55d/08018/planning.png 750w,\n/js2/static/97447aabc0c3f79a34494e5fa4b0b55d/b5d65/planning.png 1080w,\n/js2/static/97447aabc0c3f79a34494e5fa4b0b55d/cd171/planning.png 1088w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/97447aabc0c3f79a34494e5fa4b0b55d/f7070/planning.webp 750w,\n/js2/static/97447aabc0c3f79a34494e5fa4b0b55d/6949f/planning.webp 1080w,\n/js2/static/97447aabc0c3f79a34494e5fa4b0b55d/9af3a/planning.webp 1088w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.59375}},"base":"planning.PNG"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/e927b7d4c1aab1dd521632761a53f1b6/a19b7/spa.png","srcSet":"/js2/static/e927b7d4c1aab1dd521632761a53f1b6/1f5ea/spa.png 750w,\n/js2/static/e927b7d4c1aab1dd521632761a53f1b6/a19b7/spa.png 847w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/e927b7d4c1aab1dd521632761a53f1b6/98a4a/spa.webp 750w,\n/js2/static/e927b7d4c1aab1dd521632761a53f1b6/b3688/spa.webp 847w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4628099173553719}},"base":"spa.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#283848","images":{"fallback":{"src":"/js2/static/633de32074a1d0717540f1ac88bb3e95/dbdf5/web-frameworks.png","srcSet":"/js2/static/633de32074a1d0717540f1ac88bb3e95/dbdf5/web-frameworks.png 715w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/633de32074a1d0717540f1ac88bb3e95/349ed/web-frameworks.webp 715w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8139860139860139}},"base":"web-frameworks.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#d8d8e8","images":{"fallback":{"src":"/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/87754/pizza.jpg","srcSet":"/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/b3dd7/pizza.jpg 750w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/870fe/pizza.jpg 1080w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/f640e/pizza.jpg 1366w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/87754/pizza.jpg 1920w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/2daa0/pizza.webp 750w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/1aa4f/pizza.webp 1080w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/8647b/pizza.webp 1366w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/902b5/pizza.webp 1920w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.5}},"base":"pizza.jpg"}}]}},"pageContext":{"slug":"/part0/ts-language/","frontmatter":{"title":"Language TS","description":"Introduction au langage TypeScript, apprentissage de la syntaxe"}}},"staticQueryHashes":["1696221415","2461182183","3028011774","3458129946","501654901","575455071"],"slicesMap":{}}