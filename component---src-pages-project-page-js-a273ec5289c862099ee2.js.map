{"version":3,"file":"component---src-pages-project-page-js-a273ec5289c862099ee2.js","mappings":"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","sources":["webpack://myjscourse/./src/components/content-editable/content-editable.js","webpack://myjscourse/./src/components/context/projects/project-data-context.js","webpack://myjscourse/./src/components/file/link-file.js","webpack://myjscourse/./src/components/spinner/spinner.js","webpack://myjscourse/./src/components/projects/project-card.js","webpack://myjscourse/./src/components/projects/projects-view.js","webpack://myjscourse/./src/components/projects/project-management.js","webpack://myjscourse/./src/pages/project-page.js","webpack://myjscourse/./src/utils/api/fetch.js","webpack://myjscourse/./src/utils/auths/use-id-token.js","webpack://myjscourse/./src/utils/string/string.js"],"sourcesContent":["import React, { useState } from 'react';\nimport he from 'he';\n\n/**\n * Make a div editable with text (could also be some HTML if needed).\n * @param {startContent} String to be used when the content is being updated\n * @param {children} React elements to be used when the content is not being updated\n * @returns\n */\n\nconst ContentEditable = ({\n  className,\n  isBeingEdited,\n  onChange,\n  startContent,\n  id,\n  isInline,\n  children,\n}) => {\n  //const [content, setContent] = useState(startContent);\n\n  const handleChange = (e) => {\n    const propUpdated = {};\n    propUpdated[id] = e.currentTarget.textContent;\n    // set state at parent level\n    onChange(propUpdated);\n  };\n\n  let currentContent;\n  if (isBeingEdited)\n    currentContent = startContent\n      ? he.decode(startContent)\n      : ''; \n  else if (children) currentContent = children;\n  else if (startContent)\n    currentContent = startContent ? he.decode(startContent) : '';\n\n  let allClasses;\n  allClasses = className ? className : '';\n  if (isBeingEdited)\n    allClasses += ' index__card__content__description--is-being-edited';\n  if (isInline) allClasses += ' index__card__content__description--is-inline';\n\n  return (\n    <div\n      className={allClasses}\n      contentEditable={isBeingEdited ? true : false}\n      onInput={handleChange}\n      suppressContentEditableWarning={true}\n    >\n      {currentContent}\n    </div>\n  );\n};\n\nexport default ContentEditable;\n","import React, { useContext, useState } from 'react';\nimport callAPI from '../../../utils/api/fetch';\nimport { useMsal } from '@azure/msal-react';\nimport { getAsyncIdToken } from '../../../utils/auths/use-id-token';\n\nconst ProjectDataContext = React.createContext([\n  {},\n  () => {},\n  {},\n  () => {},\n  {},\n  () => {},\n  {},\n  () => {},\n]);\n\nconst ProjectDataProvider = ({ children }) => {\n  const [projectGroupData, setProjectGroupData] = useState(undefined);\n  const [userData, setUserData] = useState(undefined);\n  const [projectData, setProjectData] = useState(undefined);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  return (\n    <ProjectDataContext.Provider\n      value={[\n        projectGroupData,\n        setProjectGroupData,\n        userData,\n        setUserData,\n        projectData,\n        setProjectData,\n        isLoaded,\n        setIsLoaded,\n      ]}\n    >\n      {children}\n    </ProjectDataContext.Provider>\n  );\n};\n\nconst useProjectData = () => {\n  const { instance, accounts } = useMsal();\n\n  const [\n    projectGroupData,\n    setProjectGroupData,\n    userData,\n    setUserData,\n    projectData,\n    setProjectData,\n    isLoaded,\n    setIsLoaded,\n  ] = useContext(ProjectDataContext);\n\n  const updateProjectGroupData = async (associatedProjectGroupName) => {\n    try {\n      const idToken = await getAsyncIdToken(accounts, instance);\n      const tempProjectGroup = await callAPI(\n        `projectgroups/${associatedProjectGroupName}`,\n        'get',\n        idToken,\n        undefined\n      );\n      setProjectGroupData(tempProjectGroup);\n      console.log('STATE NOW ????', tempProjectGroup);\n      return tempProjectGroup;\n    } catch (err) {\n      console.error('useProjectData:error:', err);\n    }\n  };\n\n  const updateUserData = async (associatedProjectGroupName) => {\n    try {\n      const idToken = await getAsyncIdToken(accounts, instance);\n      const tempUser = await callAPI(\n        `users/role/?projectgroupname=${associatedProjectGroupName}`,\n        'get',\n        idToken,\n        undefined\n      );\n      setUserData(tempUser);\n      return tempUser;\n    } catch (err) {\n      console.error('useProjectData:updateUserData:error:', err);\n    }\n  };\n\n  const updateProjectData = async (projectGroupName) => {\n    try {\n      const idToken = await getAsyncIdToken(accounts, instance);\n      setIsLoaded(false);\n      let tempProject = await callAPI(\n        'projects/projectgroups/' + projectGroupName,\n        'get',\n        idToken,\n        undefined\n      );\n      setProjectData(tempProject);\n      console.log('project array updated', tempProject);\n      setIsLoaded(true);\n      return tempProject;\n    } catch (err) {\n      console.error('useProjectData:updateProjectDataerror:', err);\n    }\n  };\n\n  /**\n   * Add one project to an existing projectGroupName !\n   * @param {*} projectGroupName\n   */\n  const addOneProject = async (projectGroupName) => {\n    try {\n      const idToken = await getAsyncIdToken(accounts, instance);\n      const newProject = await callAPI('projects', 'post', idToken, {\n        projectGroupName,\n      });\n      //return await updateProjectData(projectGroupName);\n      return newProject;\n    } catch (err) {\n      console.error('useProjectData:addOneProject:error:', err);\n    }\n  };\n\n  const deleteOneProject = async (project) => {\n    try {\n      const idToken = await getAsyncIdToken(accounts, instance);\n      const deletedProject = await callAPI(\n        'projects/' + project._id,\n        'DELETE',\n        idToken,\n        undefined\n      );\n      //return await updateProjectData(projectGroupName);\n      return deletedProject;\n    } catch (err) {\n      console.error('useProjectData:deleteOneProject:error:', err);\n    }\n  };\n\n  const addMemberToProject = async (project) => {\n    try {\n      const idToken = await getAsyncIdToken(accounts, instance);\n      const projectUpdated = await callAPI(\n        'projects/' + project._id + '/member',\n        'POST',\n        idToken,\n        undefined\n      );\n\n      return projectUpdated;\n    } catch (err) {\n      console.error('useProjectData:addMemberToProject:error:', err);\n    }\n  };\n\n  const deleteMemberFromProject = async (project) => {\n    try {\n      const idToken = await getAsyncIdToken(accounts, instance);\n      const projectUpdated = await callAPI(\n        'projects/' + project._id + '/member',\n        'DELETE',\n        idToken,\n        undefined\n      );\n\n      return projectUpdated;\n    } catch (err) {\n      console.error('useProjectData:deleteMemberFromProject:error:', err);\n    }\n  };\n\n  const updateProject = async (data, id) => {\n    console.log('project to be updated:', data);\n    try {\n      const idToken = await getAsyncIdToken(accounts, instance);\n      const projectUpdated = await callAPI(\n        'projects/' + id,\n        'PATCH',\n        idToken,\n        data\n      );\n\n      console.log('project updated:', projectUpdated);\n      return projectUpdated;\n    } catch (err) {\n      console.error('useProjectData:updateProject:error:', err);\n    }\n  };\n\n  return {\n    ...{\n      projectGroupData,\n      updateProjectGroupData,\n      userData,\n      updateUserData,\n      projectData,\n      updateProjectData,\n      addOneProject,\n      deleteOneProject,\n      addMemberToProject,\n      deleteMemberFromProject,\n      updateProject,\n      isLoaded,\n      setIsLoaded,\n    },\n  };\n};\n\nexport { ProjectDataProvider, useProjectData };\n","import React from \"react\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport { GatsbyImage, StaticImage } from \"gatsby-plugin-image\";\n\n/**\n * Based on a name of a file (WARNING : there cannot be duplicates), provide a link to this file\n *\n * It is also possible to provide as name the source of an external file that shall contain\n * http:// or https:// to get an external link.\n * @param {*} param0\n * @returns\n */\nconst LinkFile = ({ children, name, ...other }) => {\n  const data = useStaticQuery(graphql`\n    {\n      allFile {\n        edges {\n          node {\n            relativePath\n            publicURL\n            base\n          }\n        }\n      }\n    }\n  `);\n\n  if (\n    (name && name.toLowerCase().includes(\"http://\")) ||\n    (name && name.toLowerCase().includes(\"https://\"))\n  )\n    return (\n      <a href={name} {...other}>\n        {children}\n      </a>\n    );\n\n  const requiredFile = data.allFile.edges.find(\n    (file) => file.node.base === name\n  );\n  if (!requiredFile) {\n    return (\n      <div>\n        <h3 style={{ color: \"red\" }}>The file {name} does not exist !</h3>\n        {children}\n      </div>\n    );\n  }\n\n  return (\n    <a href={requiredFile.node.publicURL} {...other}>\n      {children}\n    </a>\n  );\n};\n\nexport default LinkFile;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { fas, faSpinner } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Spinner = () => {\n  return (\n    <div className=\"spinner\">\n      <div className=\"spinner__overlay\"></div>\n      <div className=\"spinner__animation\">\n        <FontAwesomeIcon icon={faSpinner} className=\"fa-3x fa-spin\" />\n      </div>\n    </div>\n  );\n};\n\nexport default Spinner;\n","import React, { useState } from \"react\";\nimport { Link, useStaticQuery } from \"gatsby\";\nimport YoutubeImage from \"../image/youtube-image.js\";\nimport he from \"he\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faEdit,\n  faTrashAlt,\n  faUserPlus,\n  faUserTimes,\n  faSave,\n  faTimes,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { getNamesFromEmail } from \"../../utils/string/string\";\nimport { useProjectData } from \"../context/projects/project-data-context\";\nimport ContentEditable from \"../content-editable/content-editable.js\";\n\nconst ProjectCard = ({ project, setFilteredContents }) => {\n  const [isBeingEdited, setIsBeingEdited] = useState(false);\n  const [isPublic, setIsPublic] = useState(project.isPublic);\n  const [projectUpdateState, setProjectUpdateState] = useState({});\n  // Get state management functions from the provider\n  const {\n    deleteOneProject,\n    updateProjectData,\n    addMemberToProject,\n    deleteMemberFromProject,\n    updateProject,\n    userData,\n    projectGroupData,\n    projectData,\n  } = useProjectData();\n  // Deal with events\n  const onProjectDelete = async () => {\n    //console.log(\"projectId: endpoint:\", \"DELETE /api/projects/\" + projectId);\n    await deleteOneProject(project);\n    await updateProjectData(project.projectGroupName);\n    setFilteredContents(undefined);\n  };\n\n  const onAddMemberToProject = async () => {\n    const updatedProject = await addMemberToProject(project);\n    console.log(\"onAddMemberToProject:\", updatedProject);\n    if (updateProjectData) {\n      await updateProjectData(project.projectGroupName);\n      setFilteredContents(undefined);\n    }\n  };\n\n  const onDeleteMemberFromProject = async () => {\n    const updatedProject = await deleteMemberFromProject(project);\n    console.log(\"onDeleteMemberFromProject:\", updatedProject);\n    if (updateProjectData) {\n      await updateProjectData(project.projectGroupName);\n      setFilteredContents(undefined);\n    }\n  };\n\n  const onProjectUpdateRequest = () => {\n    setIsBeingEdited(true);\n  };\n\n  const onQuitProjectUpdateRequest = () => {\n    setIsBeingEdited(false);\n    // clear the update state\n    setProjectUpdateState({});\n  };\n\n  const onProjectSave = async () => {\n    // save the updated state via the API\n    if (projectUpdateState) {\n      const updatedProject = await updateProject(\n        projectUpdateState,\n        project._id\n      );\n      // clear the project update state\n      setProjectUpdateState({});\n      setIsBeingEdited(false);\n      // re-render all projects\n      if (updatedProject) {\n        await updateProjectData(project.projectGroupName);\n        setFilteredContents(undefined);\n      }\n    }\n  };\n\n  // deal with modification of content\n  const handleChange = (propChanged) => {\n    // update the projectState\n    setProjectUpdateState((previousState) => {\n      return { ...previousState, ...propChanged };\n    });\n  };\n\n  const onSetPublic = (e) => {\n    setIsPublic(!isPublic);\n    setProjectUpdateState({\n      ...projectUpdateState,\n      ...{ isPublic: !isPublic },\n    });\n  };\n\n  console.log(\"projStateUpdated:\", projectUpdateState);\n\n  if (!project) return null;\n\n  return (\n    <div\n      className={\n        \"index__card\" + (isBeingEdited ? \" index__card--is-being-edited\" : \"\")\n      }\n      key={project.shortId}\n      id={project.shortId}\n    >\n      <div className=\"index__card__header\">\n        <span>{\"Projet N° \" + project.shortId + \" : \"}</span>\n        <ContentEditable\n          isBeingEdited={isBeingEdited}\n          id=\"name\"\n          onChange={handleChange}\n          startContent={project.name}\n          isInline\n        />\n      </div>\n\n      <div className=\"index__card__description\">\n        {\n          /* DELETE icon only if user isAdmin (admin or manager) */\n          userData.isAdmin && (\n            <FontAwesomeIcon icon={faTrashAlt} onClick={onProjectDelete} />\n          )\n        }\n\n        {\n          /* UPDATE PROJECT : visible only if \n          (user is Admin (admin or manager) OR\n          user is a member of this project AND \n          project group status is not \"end\" ) AND\n          project is not being edited\n          */\n          (userData.isAdmin ||\n            (project.projectMembers.includes(userData.userName) &&\n              projectGroupData.status !== \"end\")) &&\n          !isBeingEdited ? (\n            <FontAwesomeIcon icon={faEdit} onClick={onProjectUpdateRequest} />\n          ) : (\n            \"\"\n          )\n        }\n\n        {\n          /* ADD MEMBER TO PROJECT : Visible only if :\n        project group status is \"init\" AND\n        userName has not already joined a project AND\n        number of members is < maximum number */\n          projectGroupData.status === \"init\" &&\n            !projectData.find((project) =>\n              project.projectMembers.includes(userData.userName)\n            ) &&\n            project.projectMembers.length <\n              projectGroupData.maximumProjectMembers && (\n              <FontAwesomeIcon\n                icon={faUserPlus}\n                onClick={onAddMemberToProject}\n              />\n            )\n        }\n        {\n          /*REMOVE MEMBER FROM PROJECT : Visible only if :\n        project group status is \"init\" AND\n        userName is already a member of this project\n        */\n          projectGroupData.status === \"init\" &&\n            project.projectMembers.includes(userData.userName) && (\n              <FontAwesomeIcon\n                icon={faUserTimes}\n                onClick={onDeleteMemberFromProject}\n              />\n            )\n        }\n        {\n          /*SAVE PROJECT : Visible only if :\n        project is being edited       \n        */\n          isBeingEdited && (\n            <FontAwesomeIcon icon={faSave} onClick={onProjectSave} />\n          )\n        }\n\n        {\n          /*QUIT PROJECT UPDATE: Visible only if :\n        project is being edited       \n        */\n          isBeingEdited && (\n            <FontAwesomeIcon\n              icon={faTimes}\n              onClick={onQuitProjectUpdateRequest}\n            />\n          )\n        }\n      </div>\n\n      <div className=\"index__card__content\">\n        {project.description !== undefined ? (\n          <>\n            <div className=\"index__card__content__title\">Description</div>\n            <ContentEditable\n              className=\"index__card__content__description\"\n              isBeingEdited={isBeingEdited}\n              id=\"description\"\n              startContent={project.description}\n              onChange={handleChange}\n            />\n          </>\n        ) : (\n          \"\"\n        )}\n      </div>\n\n      <div className=\"index__card__content\">\n        {project.presentationUrl !== undefined ? (\n          <>\n            <div className=\"index__card__content__title\">\n              Vidéo de présentation\n            </div>\n            <ContentEditable\n              className=\"index__card__content__description\"\n              isBeingEdited={isBeingEdited}\n              id=\"presentationUrl\"\n              startContent={project.presentationUrl}\n              onChange={handleChange}\n            >\n              <YoutubeImage src={project.presentationUrl} />\n            </ContentEditable>\n          </>\n        ) : (\n          \"\"\n        )}\n      </div>\n\n      <div className=\"index__card__content\">\n        {project.frontendProductionUrl !== undefined ? (\n          <>\n            <div className=\"index__card__content__title\">URL du site</div>\n            <ContentEditable\n              className=\"index__card__content__description\"\n              isBeingEdited={isBeingEdited}\n              id=\"frontendProductionUrl\"\n              startContent={project.frontendProductionUrl}\n              onChange={handleChange}\n            >\n              <a href={project.frontendProductionUrl} target=\"_blank\">\n                {project.frontendProductionUrl}\n              </a>\n            </ContentEditable>\n          </>\n        ) : (\n          \"\"\n        )}\n      </div>\n\n      <div className=\"index__card__content\">\n        {project.frontendRepo !== undefined ? (\n          <>\n            <div className=\"index__card__content__title\">Repo frontend</div>\n            <ContentEditable\n              className=\"index__card__content__description\"\n              isBeingEdited={isBeingEdited}\n              id=\"frontendRepo\"\n              startContent={project.frontendRepo}\n              onChange={handleChange}\n            >\n              <a href={project.frontendRepo} target=\"_blank\">\n                {project.frontendRepo}\n              </a>\n            </ContentEditable>\n          </>\n        ) : (\n          \"\"\n        )}\n      </div>\n\n      <div className=\"index__card__content\">\n        {project.backendRepo !== undefined ? (\n          <>\n            <div className=\"index__card__content__title\">Repo backend</div>\n            <ContentEditable\n              className=\"index__card__content__description\"\n              isBeingEdited={isBeingEdited}\n              id=\"backendRepo\"\n              startContent={project.backendRepo}\n              onChange={handleChange}\n            >\n              <a href={project.backendRepo} target=\"_blank\">\n                {project.backendRepo}\n              </a>\n            </ContentEditable>\n          </>\n        ) : (\n          \"\"\n        )}\n      </div>\n\n      {/* Deal with project members */}\n      <div className=\"index__card__content\">\n        {project.projectMembers !== undefined &&\n        project.projectMembers.length > 0 ? (\n          <>\n            <div className=\"index__card__content__title\">Membres du projet</div>\n            <div className=\"index__card__content__description\">\n              {project.projectMembers\n                .map((member) => getNamesFromEmail(member))\n                .join(\", \")}\n            </div>\n          </>\n        ) : (\n          \"\"\n        )}\n      </div>\n\n      <div className=\"index__card__content\">\n        {project.isPublic !== undefined ? (\n          <>\n            <div className=\"index__card__content__title\">Public ?</div>\n            <div className=\"index__card__content__description\">\n              <input\n                type=\"checkbox\"\n                checked={isPublic}\n                disabled={isBeingEdited ? false : true}\n                onClick={onSetPublic}\n              />\n            </div>\n          </>\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectCard;\n","import React from \"react\";\nimport { Link, useStaticQuery } from \"gatsby\";\nimport YoutubeImage from \"../image/youtube-image.js\";\nimport ProjectCard from \"./project-card.js\";\nimport he from \"he\";\n\nconst ProjectsView = ({ projects , setFilteredContents}) => {\n  console.log(\"PROJECTSVIEW\", projects);\n  if (!projects || projects.length <= 0) return null;\n\n  return (\n    <>\n      {projects.map((project) => (\n        <ProjectCard {...{ project, setFilteredContents }} />\n      ))}\n    </>\n  );\n};\n\nexport default ProjectsView;\n","import React, { useState, useEffect } from 'react';\nimport ProjectsView from './projects-view';\nimport Spinner from '../spinner/spinner';\n\nimport { useProjectData } from '../context/projects/project-data-context';\nimport LinkFile from '../file/link-file';\n\nconst ProjectManagement = ({ associatedProjectGroupName, projectDocument }) => {\n  // Get state from the provider\n  const {\n    projectGroupData,\n    updateProjectGroupData,\n    userData,\n    updateUserData,\n    isLoaded,\n    projectData,\n    addOneProject,\n    updateProjectData,\n  } = useProjectData();\n\n  const [filteredContents, setFilteredContents] = useState(undefined);\n  const [query, setQuery] = useState('');\n\n  console.log(\"projectDocument : \", projectDocument);\n\n  const handleInputChange = (e) => {\n    // Get project data from Context\n    //const { projectData } = useProjectData();\n\n    const inputText = e.target.value;\n    setQuery(e.target.value);\n\n    console.log('handleInputChange::ProjectData', projectData);\n    const filteredData = projectData.filter((content) => {\n      // destructure data from post frontmatter\n      const { shortId, name, description } = content;\n      return (\n        // standardize data with .toLowerCase()\n        // return true if the subject, skills...\n        // contains the query string\n        name.toLowerCase().includes(inputText.toLowerCase()) ||\n        description.toLowerCase().includes(inputText.toLowerCase()) ||\n        (inputText.length > 0 && parseInt(inputText) === shortId)\n      );\n    });\n\n    if (filteredData && filteredData.length > 0)\n      setFilteredContents(filteredData);\n    else setFilteredContents(undefined);\n  };\n\n  const onProjectAdd = async () => {\n    console.log('add and', projectGroupData._id);\n    await addOneProject(projectGroupData._id);\n    const newListOfProjects = await updateProjectData(projectGroupData._id);\n    setFilteredContents(undefined);\n  };\n\n  useEffect(() => {\n    // get data from APIs\n    getData();\n  }, []);\n\n  const getData = async () => {\n    try {\n      // Deal with project group data\n      const group = await updateProjectGroupData(associatedProjectGroupName);\n      // Deal with user role data {role:..., isAdmin:...}\n      const user = await updateUserData(associatedProjectGroupName);\n      // Deal with project data\n      const temp = await updateProjectData(group._id);\n    } catch (error) {\n      console.error('getData:error', error);\n    }\n  };\n\n  return (\n    <>\n      {!isLoaded && <Spinner />}\n      {projectGroupData === undefined ? (\n        ''\n      ) : (\n        // deal with project view\n        <div className=\"pl-3 pt-3 pb-3 pr-3\">\n          <h3 className=\"\">Projets des groupes de {projectGroupData?._id}</h3>\n          {/* Deal with potential project document to print*/}\n          {projectDocument && (\n            <LinkFile name={projectDocument}>\n              Consignes & template du projet\n            </LinkFile>\n          )}\n          <div className=\"index\">\n            <input\n              type=\"text\"\n              aria-label=\"Search\"\n              placeholder=\"Filtrez les contenus...\"\n              onChange={handleInputChange}\n              className=\"index__search\"\n            />\n            {filteredContents && filteredContents.length > 0 ? (\n              <ProjectsView\n                projects={filteredContents}\n                setFilteredContents={setFilteredContents}\n              ></ProjectsView>\n            ) : (\n              <ProjectsView\n                projects={projectData}\n                setFilteredContents={setFilteredContents}\n              ></ProjectsView>\n            )}\n          </div>\n\n          {/* // deal with add a project button */}\n          {userData === undefined || !userData.isAdmin ? (\n            ''\n          ) : (\n            <button className=\"index__button\" onClick={onProjectAdd}>\n              Ajouter projet\n            </button>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\nexport default ProjectManagement;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport { useStaticQuery } from 'gatsby';\n\nimport MainLayout from '../components/main-layout';\n\nimport { withAuthentication } from '../components/hoc/hoc';\nimport { ProjectDataProvider } from '../components/context/projects/project-data-context';\n\nimport ProjectManagement from '../components/projects/project-management';\n\nconst ProjectPage = () => {\n  const data = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            defaultAssociatedProjectGroupName,\n            projectDocument\n          }\n        }\n      }\n    `\n  );\n\n  const {\n    defaultAssociatedProjectGroupName: associatedProjectGroupName,\n    projectDocument,\n  } = data?.site.siteMetadata;\n\n  console.log(\"document:\", projectDocument);\n\n  return (\n    <ProjectDataProvider>\n      <MainLayout>\n        <ProjectManagement\n          {...{ associatedProjectGroupName, projectDocument }}\n        />\n      </MainLayout>\n    </ProjectDataProvider>\n  );\n};\n\nconst ProjectPageProtected = withAuthentication(ProjectPage);\nexport default ProjectPageProtected;\n","// Helper function to call our API\n// using authorization bearer token scheme\nexport default async function callAPI(endpoint, method = \"get\", token, data) {\n  let headers = new Headers();\n  let options = {};\n  options.method = method;\n\n  console.log(\"token :\", token);\n\n  if (token) {\n    const bearer = `Bearer ${token}`;\n    headers.append(\"Authorization\", bearer);\n  }\n\n  if (data) {\n    options.body = JSON.stringify(data);\n  }\n\n  if (\n    method.toLowerCase() === \"post\" ||\n    method.toLowerCase() === \"patch\" ||\n    method.toLowerCase() === \"put\"\n  )\n    headers.append(\"Content-Type\", \"application/json\");\n  options.headers = headers;  \n  const url = process.env.GATSBY_API_URL + endpoint;\n  console.log(\n    \"request made to API at: \" + new Date().toString(),\n    \"URL:\",\n    url,\n    \"Options:\",\n    options\n  );\n  try {\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n      let fullErrorMessage =\n        \" Error code : \" +\n        response.status +\n        \" : \" +\n        response.statusText +\n        \"/nMessage : \";\n      const textResponse = await response.text();\n      fullErrorMessage += textResponse;\n      console.error(\"fetch() error\", fullErrorMessage);\n      // deal with token expiration\n      if (fullErrorMessage.search(\"expired\") > -1) {\n        console.log(\"token expired\");\n      }\n      throw new Error(fullErrorMessage);\n    }\n    return await response.json();\n  } catch (error) {\n    console.log(\"error:\", error);\n    throw error;\n  }\n}\n\n","import { InteractionRequiredAuthError } from \"@azure/msal-browser\";\n\nasync function getAsyncIdToken(accounts, instance) {\n  if (accounts.length > 0) {\n    const request = {\n      scopes: [\"openid\"],\n      account: accounts[0],\n    };\n\n    try {\n      const response = await instance.acquireTokenSilent(request);\n      return response.idToken;\n    } catch (error) {\n      // acquireTokenSilent can fail for a number of reasons, fallback to interaction\n      if (error instanceof InteractionRequiredAuthError) {\n        const response2 = await instance.acquireTokenRedirect(request);\n        return response2.idToken;\n      }\n    }\n  }\n}\n\nexport { getAsyncIdToken };\n","const getNamesFromEmail = (email) => {\n  let names = email.substring(0, email.indexOf(\"@\"));\n  let firstname = names.substring(0, names.indexOf(\".\"));\n  let lastname = names.substring(names.indexOf(\".\") + 1);\n  firstname = firstname.charAt(0).toUpperCase() + firstname.slice(1);\n  lastname = lastname.charAt(0).toUpperCase() + lastname.slice(1);\n  // deal with cases where Extra info is added to the name, when there is a second dot\n  if (lastname.indexOf(\".\") >= 0) {\n    lastname = lastname.substring(lastname.indexOf(\".\") + 1);\n    lastname = lastname.charAt(0).toUpperCase() + lastname.slice(1);\n  }\n  return firstname + \" \" + lastname;\n};\n\nexport { getNamesFromEmail };\n"],"names":["_ref","className","isBeingEdited","onChange","startContent","id","isInline","children","currentContent","allClasses","he","React","contentEditable","onInput","e","propUpdated","currentTarget","textContent","suppressContentEditableWarning","ProjectDataContext","ProjectDataProvider","projectGroupData","setProjectGroupData","useState","undefined","userData","setUserData","projectData","setProjectData","isLoaded","setIsLoaded","Provider","value","useProjectData","instance","accounts","useMsal","useContext","updateProjectGroupData","async","idToken","getAsyncIdToken","tempProjectGroup","callAPI","associatedProjectGroupName","err","console","error","updateUserData","tempUser","updateProjectData","tempProject","projectGroupName","addOneProject","deleteOneProject","project","_id","addMemberToProject","deleteMemberFromProject","updateProject","data","name","other","useStaticQuery","toLowerCase","includes","Object","assign","href","requiredFile","allFile","edges","find","file","node","base","publicURL","style","color","Spinner","FontAwesomeIcon","icon","faSpinner","setFilteredContents","setIsBeingEdited","isPublic","setIsPublic","projectUpdateState","setProjectUpdateState","handleChange","propChanged","previousState","key","shortId","ContentEditable","isAdmin","faTrashAlt","onClick","projectMembers","userName","status","faEdit","onProjectUpdateRequest","length","maximumProjectMembers","faUserPlus","faUserTimes","faSave","updatedProject","faTimes","onQuitProjectUpdateRequest","description","presentationUrl","YoutubeImage","src","frontendProductionUrl","target","frontendRepo","backendRepo","map","member","getNamesFromEmail","join","type","checked","disabled","projects","ProjectCard","projectDocument","filteredContents","query","setQuery","useEffect","getData","group","LinkFile","placeholder","inputText","filteredData","filter","content","parseInt","ProjectsView","withAuthentication","ProjectPage","defaultAssociatedProjectGroupName","site","siteMetadata","MainLayout","ProjectManagement","endpoint","method","token","headers","Headers","options","bearer","append","body","JSON","stringify","url","process","response","fetch","ok","fullErrorMessage","statusText","text","search","Error","json","request","scopes","account","acquireTokenSilent","InteractionRequiredAuthError","acquireTokenRedirect","email","names","substring","indexOf","firstname","lastname","charAt","toUpperCase","slice"],"sourceRoot":""}