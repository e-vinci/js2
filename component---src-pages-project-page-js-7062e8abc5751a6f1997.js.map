{"version":3,"file":"component---src-pages-project-page-js-7062e8abc5751a6f1997.js","mappings":"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","sources":["webpack://myjscourse/./src/components/content-editable/content-editable.js","webpack://myjscourse/./src/components/context/projects/project-data-context.js","webpack://myjscourse/./src/components/file/link-file.js","webpack://myjscourse/./src/components/spinner/spinner.js","webpack://myjscourse/./src/components/projects/project-card.js","webpack://myjscourse/./src/components/projects/projects-view.js","webpack://myjscourse/./src/components/projects/project-management.js","webpack://myjscourse/./src/pages/project-page.js","webpack://myjscourse/./src/utils/api/fetch.js","webpack://myjscourse/./src/utils/auths/use-id-token.js","webpack://myjscourse/./src/utils/string/string.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport he from 'he';\r\n\r\n/**\r\n * Make a div editable with text (could also be some HTML if needed).\r\n * @param {startContent} String to be used when the content is being updated\r\n * @param {children} React elements to be used when the content is not being updated\r\n * @returns\r\n */\r\n\r\nconst ContentEditable = ({\r\n  className,\r\n  isBeingEdited,\r\n  onChange,\r\n  startContent,\r\n  id,\r\n  isInline,\r\n  children,\r\n}) => {\r\n  //const [content, setContent] = useState(startContent);\r\n\r\n  const handleChange = (e) => {\r\n    const propUpdated = {};\r\n    propUpdated[id] = e.currentTarget.textContent;\r\n    // set state at parent level\r\n    onChange(propUpdated);\r\n  };\r\n\r\n  let currentContent;\r\n  if (isBeingEdited)\r\n    currentContent = startContent\r\n      ? he.decode(startContent)\r\n      : ''; \r\n  else if (children) currentContent = children;\r\n  else if (startContent)\r\n    currentContent = startContent ? he.decode(startContent) : '';\r\n\r\n  let allClasses;\r\n  allClasses = className ? className : '';\r\n  if (isBeingEdited)\r\n    allClasses += ' index__card__content__description--is-being-edited';\r\n  if (isInline) allClasses += ' index__card__content__description--is-inline';\r\n\r\n  return (\r\n    <div\r\n      className={allClasses}\r\n      contentEditable={isBeingEdited ? true : false}\r\n      onInput={handleChange}\r\n      suppressContentEditableWarning={true}\r\n    >\r\n      {currentContent}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContentEditable;\r\n","import React, { useContext, useState } from 'react';\r\nimport callAPI from '../../../utils/api/fetch';\r\nimport { useMsal } from '@azure/msal-react';\r\nimport { getAsyncIdToken } from '../../../utils/auths/use-id-token';\r\n\r\nconst ProjectDataContext = React.createContext([\r\n  {},\r\n  () => {},\r\n  {},\r\n  () => {},\r\n  {},\r\n  () => {},\r\n  {},\r\n  () => {},\r\n]);\r\n\r\nconst ProjectDataProvider = ({ children }) => {\r\n  const [projectGroupData, setProjectGroupData] = useState(undefined);\r\n  const [userData, setUserData] = useState(undefined);\r\n  const [projectData, setProjectData] = useState(undefined);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  return (\r\n    <ProjectDataContext.Provider\r\n      value={[\r\n        projectGroupData,\r\n        setProjectGroupData,\r\n        userData,\r\n        setUserData,\r\n        projectData,\r\n        setProjectData,\r\n        isLoaded,\r\n        setIsLoaded,\r\n      ]}\r\n    >\r\n      {children}\r\n    </ProjectDataContext.Provider>\r\n  );\r\n};\r\n\r\nconst useProjectData = () => {\r\n  const { instance, accounts } = useMsal();\r\n\r\n  const [\r\n    projectGroupData,\r\n    setProjectGroupData,\r\n    userData,\r\n    setUserData,\r\n    projectData,\r\n    setProjectData,\r\n    isLoaded,\r\n    setIsLoaded,\r\n  ] = useContext(ProjectDataContext);\r\n\r\n  const updateProjectGroupData = async (associatedProjectGroupName) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const tempProjectGroup = await callAPI(\r\n        `projectgroups/${associatedProjectGroupName}`,\r\n        'get',\r\n        idToken,\r\n        undefined\r\n      );\r\n      setProjectGroupData(tempProjectGroup);\r\n      console.log('STATE NOW ????', tempProjectGroup);\r\n      return tempProjectGroup;\r\n    } catch (err) {\r\n      console.error('useProjectData:error:', err);\r\n    }\r\n  };\r\n\r\n  const updateUserData = async (associatedProjectGroupName) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const tempUser = await callAPI(\r\n        `users/role/?projectgroupname=${associatedProjectGroupName}`,\r\n        'get',\r\n        idToken,\r\n        undefined\r\n      );\r\n      setUserData(tempUser);\r\n      return tempUser;\r\n    } catch (err) {\r\n      console.error('useProjectData:updateUserData:error:', err);\r\n    }\r\n  };\r\n\r\n  const updateProjectData = async (projectGroupName) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      setIsLoaded(false);\r\n      let tempProject = await callAPI(\r\n        'projects/projectgroups/' + projectGroupName,\r\n        'get',\r\n        idToken,\r\n        undefined\r\n      );\r\n      setProjectData(tempProject);\r\n      console.log('project array updated', tempProject);\r\n      setIsLoaded(true);\r\n      return tempProject;\r\n    } catch (err) {\r\n      console.error('useProjectData:updateProjectDataerror:', err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Add one project to an existing projectGroupName !\r\n   * @param {*} projectGroupName\r\n   */\r\n  const addOneProject = async (projectGroupName) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const newProject = await callAPI('projects', 'post', idToken, {\r\n        projectGroupName,\r\n      });\r\n      //return await updateProjectData(projectGroupName);\r\n      return newProject;\r\n    } catch (err) {\r\n      console.error('useProjectData:addOneProject:error:', err);\r\n    }\r\n  };\r\n\r\n  const deleteOneProject = async (project) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const deletedProject = await callAPI(\r\n        'projects/' + project._id,\r\n        'DELETE',\r\n        idToken,\r\n        undefined\r\n      );\r\n      //return await updateProjectData(projectGroupName);\r\n      return deletedProject;\r\n    } catch (err) {\r\n      console.error('useProjectData:deleteOneProject:error:', err);\r\n    }\r\n  };\r\n\r\n  const addMemberToProject = async (project) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const projectUpdated = await callAPI(\r\n        'projects/' + project._id + '/member',\r\n        'POST',\r\n        idToken,\r\n        undefined\r\n      );\r\n\r\n      return projectUpdated;\r\n    } catch (err) {\r\n      console.error('useProjectData:addMemberToProject:error:', err);\r\n    }\r\n  };\r\n\r\n  const deleteMemberFromProject = async (project) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const projectUpdated = await callAPI(\r\n        'projects/' + project._id + '/member',\r\n        'DELETE',\r\n        idToken,\r\n        undefined\r\n      );\r\n\r\n      return projectUpdated;\r\n    } catch (err) {\r\n      console.error('useProjectData:deleteMemberFromProject:error:', err);\r\n    }\r\n  };\r\n\r\n  const updateProject = async (data, id) => {\r\n    console.log('project to be updated:', data);\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const projectUpdated = await callAPI(\r\n        'projects/' + id,\r\n        'PATCH',\r\n        idToken,\r\n        data\r\n      );\r\n\r\n      console.log('project updated:', projectUpdated);\r\n      return projectUpdated;\r\n    } catch (err) {\r\n      console.error('useProjectData:updateProject:error:', err);\r\n    }\r\n  };\r\n\r\n  return {\r\n    ...{\r\n      projectGroupData,\r\n      updateProjectGroupData,\r\n      userData,\r\n      updateUserData,\r\n      projectData,\r\n      updateProjectData,\r\n      addOneProject,\r\n      deleteOneProject,\r\n      addMemberToProject,\r\n      deleteMemberFromProject,\r\n      updateProject,\r\n      isLoaded,\r\n      setIsLoaded,\r\n    },\r\n  };\r\n};\r\n\r\nexport { ProjectDataProvider, useProjectData };\r\n","import React from \"react\";\r\nimport { graphql, useStaticQuery } from \"gatsby\";\r\nimport { GatsbyImage, StaticImage } from \"gatsby-plugin-image\";\r\n\r\n/**\r\n * Based on a name of a file (WARNING : there cannot be duplicates), provide a link to this file\r\n *\r\n * It is also possible to provide as name the source of an external file that shall contain\r\n * http:// or https:// to get an external link.\r\n * @param {*} param0\r\n * @returns\r\n */\r\nconst LinkFile = ({ children, name, ...other }) => {\r\n  const data = useStaticQuery(graphql`\r\n    {\r\n      allFile {\r\n        edges {\r\n          node {\r\n            relativePath\r\n            publicURL\r\n            base\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  if (\r\n    (name && name.toLowerCase().includes(\"http://\")) ||\r\n    (name && name.toLowerCase().includes(\"https://\"))\r\n  )\r\n    return (\r\n      <a href={name} {...other}>\r\n        {children}\r\n      </a>\r\n    );\r\n\r\n  const requiredFile = data.allFile.edges.find(\r\n    (file) => file.node.base === name\r\n  );\r\n  if (!requiredFile) {\r\n    return (\r\n      <div>\r\n        <h3 style={{ color: \"red\" }}>The file {name} does not exist !</h3>\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <a href={requiredFile.node.publicURL} {...other}>\r\n      {children}\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default LinkFile;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { fas, faSpinner } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinner\">\r\n      <div className=\"spinner__overlay\"></div>\r\n      <div className=\"spinner__animation\">\r\n        <FontAwesomeIcon icon={faSpinner} className=\"fa-3x fa-spin\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useState } from \"react\";\r\nimport { Link, useStaticQuery } from \"gatsby\";\r\nimport YoutubeImage from \"../image/youtube-image.js\";\r\nimport he from \"he\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faEdit,\r\n  faTrashAlt,\r\n  faUserPlus,\r\n  faUserTimes,\r\n  faSave,\r\n  faTimes,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { getNamesFromEmail } from \"../../utils/string/string\";\r\nimport { useProjectData } from \"../context/projects/project-data-context\";\r\nimport ContentEditable from \"../content-editable/content-editable.js\";\r\n\r\nconst ProjectCard = ({ project, setFilteredContents }) => {\r\n  const [isBeingEdited, setIsBeingEdited] = useState(false);\r\n  const [isPublic, setIsPublic] = useState(project.isPublic);\r\n  const [projectUpdateState, setProjectUpdateState] = useState({});\r\n  // Get state management functions from the provider\r\n  const {\r\n    deleteOneProject,\r\n    updateProjectData,\r\n    addMemberToProject,\r\n    deleteMemberFromProject,\r\n    updateProject,\r\n    userData,\r\n    projectGroupData,\r\n    projectData,\r\n  } = useProjectData();\r\n  // Deal with events\r\n  const onProjectDelete = async () => {\r\n    //console.log(\"projectId: endpoint:\", \"DELETE /api/projects/\" + projectId);\r\n    await deleteOneProject(project);\r\n    await updateProjectData(project.projectGroupName);\r\n    setFilteredContents(undefined);\r\n  };\r\n\r\n  const onAddMemberToProject = async () => {\r\n    const updatedProject = await addMemberToProject(project);\r\n    console.log(\"onAddMemberToProject:\", updatedProject);\r\n    if (updateProjectData) {\r\n      await updateProjectData(project.projectGroupName);\r\n      setFilteredContents(undefined);\r\n    }\r\n  };\r\n\r\n  const onDeleteMemberFromProject = async () => {\r\n    const updatedProject = await deleteMemberFromProject(project);\r\n    console.log(\"onDeleteMemberFromProject:\", updatedProject);\r\n    if (updateProjectData) {\r\n      await updateProjectData(project.projectGroupName);\r\n      setFilteredContents(undefined);\r\n    }\r\n  };\r\n\r\n  const onProjectUpdateRequest = () => {\r\n    setIsBeingEdited(true);\r\n  };\r\n\r\n  const onQuitProjectUpdateRequest = () => {\r\n    setIsBeingEdited(false);\r\n    // clear the update state\r\n    setProjectUpdateState({});\r\n  };\r\n\r\n  const onProjectSave = async () => {\r\n    // save the updated state via the API\r\n    if (projectUpdateState) {\r\n      const updatedProject = await updateProject(\r\n        projectUpdateState,\r\n        project._id\r\n      );\r\n      // clear the project update state\r\n      setProjectUpdateState({});\r\n      setIsBeingEdited(false);\r\n      // re-render all projects\r\n      if (updatedProject) {\r\n        await updateProjectData(project.projectGroupName);\r\n        setFilteredContents(undefined);\r\n      }\r\n    }\r\n  };\r\n\r\n  // deal with modification of content\r\n  const handleChange = (propChanged) => {\r\n    // update the projectState\r\n    setProjectUpdateState((previousState) => {\r\n      return { ...previousState, ...propChanged };\r\n    });\r\n  };\r\n\r\n  const onSetPublic = (e) => {\r\n    setIsPublic(!isPublic);\r\n    setProjectUpdateState({\r\n      ...projectUpdateState,\r\n      ...{ isPublic: !isPublic },\r\n    });\r\n  };\r\n\r\n  console.log(\"projStateUpdated:\", projectUpdateState);\r\n\r\n  if (!project) return null;\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        \"index__card\" + (isBeingEdited ? \" index__card--is-being-edited\" : \"\")\r\n      }\r\n      key={project.shortId}\r\n      id={project.shortId}\r\n    >\r\n      <div className=\"index__card__header\">\r\n        <span>{\"Projet N° \" + project.shortId + \" : \"}</span>\r\n        <ContentEditable\r\n          isBeingEdited={isBeingEdited}\r\n          id=\"name\"\r\n          onChange={handleChange}\r\n          startContent={project.name}\r\n          isInline\r\n        />\r\n      </div>\r\n\r\n      <div className=\"index__card__description\">\r\n        {\r\n          /* DELETE icon only if user isAdmin (admin or manager) */\r\n          userData.isAdmin && (\r\n            <FontAwesomeIcon icon={faTrashAlt} onClick={onProjectDelete} />\r\n          )\r\n        }\r\n\r\n        {\r\n          /* UPDATE PROJECT : visible only if \r\n          (user is Admin (admin or manager) OR\r\n          user is a member of this project AND \r\n          project group status is not \"end\" ) AND\r\n          project is not being edited\r\n          */\r\n          (userData.isAdmin ||\r\n            (project.projectMembers.includes(userData.userName) &&\r\n              projectGroupData.status !== \"end\")) &&\r\n          !isBeingEdited ? (\r\n            <FontAwesomeIcon icon={faEdit} onClick={onProjectUpdateRequest} />\r\n          ) : (\r\n            \"\"\r\n          )\r\n        }\r\n\r\n        {\r\n          /* ADD MEMBER TO PROJECT : Visible only if :\r\n        project group status is \"init\" AND\r\n        userName has not already joined a project AND\r\n        number of members is < maximum number */\r\n          projectGroupData.status === \"init\" &&\r\n            !projectData.find((project) =>\r\n              project.projectMembers.includes(userData.userName)\r\n            ) &&\r\n            project.projectMembers.length <\r\n              projectGroupData.maximumProjectMembers && (\r\n              <FontAwesomeIcon\r\n                icon={faUserPlus}\r\n                onClick={onAddMemberToProject}\r\n              />\r\n            )\r\n        }\r\n        {\r\n          /*REMOVE MEMBER FROM PROJECT : Visible only if :\r\n        project group status is \"init\" AND\r\n        userName is already a member of this project\r\n        */\r\n          projectGroupData.status === \"init\" &&\r\n            project.projectMembers.includes(userData.userName) && (\r\n              <FontAwesomeIcon\r\n                icon={faUserTimes}\r\n                onClick={onDeleteMemberFromProject}\r\n              />\r\n            )\r\n        }\r\n        {\r\n          /*SAVE PROJECT : Visible only if :\r\n        project is being edited       \r\n        */\r\n          isBeingEdited && (\r\n            <FontAwesomeIcon icon={faSave} onClick={onProjectSave} />\r\n          )\r\n        }\r\n\r\n        {\r\n          /*QUIT PROJECT UPDATE: Visible only if :\r\n        project is being edited       \r\n        */\r\n          isBeingEdited && (\r\n            <FontAwesomeIcon\r\n              icon={faTimes}\r\n              onClick={onQuitProjectUpdateRequest}\r\n            />\r\n          )\r\n        }\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.description !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Description</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"description\"\r\n              startContent={project.description}\r\n              onChange={handleChange}\r\n            />\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.presentationUrl !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">\r\n              Vidéo de présentation\r\n            </div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"presentationUrl\"\r\n              startContent={project.presentationUrl}\r\n              onChange={handleChange}\r\n            >\r\n              <YoutubeImage src={project.presentationUrl} />\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.frontendProductionUrl !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">URL du site</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"frontendProductionUrl\"\r\n              startContent={project.frontendProductionUrl}\r\n              onChange={handleChange}\r\n            >\r\n              <a href={project.frontendProductionUrl} target=\"_blank\">\r\n                {project.frontendProductionUrl}\r\n              </a>\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.frontendRepo !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Repo frontend</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"frontendRepo\"\r\n              startContent={project.frontendRepo}\r\n              onChange={handleChange}\r\n            >\r\n              <a href={project.frontendRepo} target=\"_blank\">\r\n                {project.frontendRepo}\r\n              </a>\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.backendRepo !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Repo backend</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"backendRepo\"\r\n              startContent={project.backendRepo}\r\n              onChange={handleChange}\r\n            >\r\n              <a href={project.backendRepo} target=\"_blank\">\r\n                {project.backendRepo}\r\n              </a>\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      {/* Deal with project members */}\r\n      <div className=\"index__card__content\">\r\n        {project.projectMembers !== undefined &&\r\n        project.projectMembers.length > 0 ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Membres du projet</div>\r\n            <div className=\"index__card__content__description\">\r\n              {project.projectMembers\r\n                .map((member) => getNamesFromEmail(member))\r\n                .join(\", \")}\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.isPublic !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Public ?</div>\r\n            <div className=\"index__card__content__description\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={isPublic}\r\n                disabled={isBeingEdited ? false : true}\r\n                onClick={onSetPublic}\r\n              />\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectCard;\r\n","import React from \"react\";\r\nimport { Link, useStaticQuery } from \"gatsby\";\r\nimport YoutubeImage from \"../image/youtube-image.js\";\r\nimport ProjectCard from \"./project-card.js\";\r\nimport he from \"he\";\r\n\r\nconst ProjectsView = ({ projects , setFilteredContents}) => {\r\n  console.log(\"PROJECTSVIEW\", projects);\r\n  if (!projects || projects.length <= 0) return null;\r\n\r\n  return (\r\n    <>\r\n      {projects.map((project) => (\r\n        <ProjectCard {...{ project, setFilteredContents }} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProjectsView;\r\n","import React, { useState, useEffect } from 'react';\r\nimport ProjectsView from './projects-view';\r\nimport Spinner from '../spinner/spinner';\r\n\r\nimport { useProjectData } from '../context/projects/project-data-context';\r\nimport LinkFile from '../file/link-file';\r\n\r\nconst ProjectManagement = ({ associatedProjectGroupName, projectDocument }) => {\r\n  // Get state from the provider\r\n  const {\r\n    projectGroupData,\r\n    updateProjectGroupData,\r\n    userData,\r\n    updateUserData,\r\n    isLoaded,\r\n    projectData,\r\n    addOneProject,\r\n    updateProjectData,\r\n  } = useProjectData();\r\n\r\n  const [filteredContents, setFilteredContents] = useState(undefined);\r\n  const [query, setQuery] = useState('');\r\n\r\n  console.log(\"projectDocument : \", projectDocument);\r\n\r\n  const handleInputChange = (e) => {\r\n    // Get project data from Context\r\n    //const { projectData } = useProjectData();\r\n\r\n    const inputText = e.target.value;\r\n    setQuery(e.target.value);\r\n\r\n    console.log('handleInputChange::ProjectData', projectData);\r\n    const filteredData = projectData.filter((content) => {\r\n      // destructure data from post frontmatter\r\n      const { shortId, name, description } = content;\r\n      return (\r\n        // standardize data with .toLowerCase()\r\n        // return true if the subject, skills...\r\n        // contains the query string\r\n        name.toLowerCase().includes(inputText.toLowerCase()) ||\r\n        description.toLowerCase().includes(inputText.toLowerCase()) ||\r\n        (inputText.length > 0 && parseInt(inputText) === shortId)\r\n      );\r\n    });\r\n\r\n    if (filteredData && filteredData.length > 0)\r\n      setFilteredContents(filteredData);\r\n    else setFilteredContents(undefined);\r\n  };\r\n\r\n  const onProjectAdd = async () => {\r\n    console.log('add and', projectGroupData._id);\r\n    await addOneProject(projectGroupData._id);\r\n    const newListOfProjects = await updateProjectData(projectGroupData._id);\r\n    setFilteredContents(undefined);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // get data from APIs\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = async () => {\r\n    try {\r\n      // Deal with project group data\r\n      const group = await updateProjectGroupData(associatedProjectGroupName);\r\n      // Deal with user role data {role:..., isAdmin:...}\r\n      const user = await updateUserData(associatedProjectGroupName);\r\n      // Deal with project data\r\n      const temp = await updateProjectData(group._id);\r\n    } catch (error) {\r\n      console.error('getData:error', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!isLoaded && <Spinner />}\r\n      {projectGroupData === undefined ? (\r\n        ''\r\n      ) : (\r\n        // deal with project view\r\n        <div className=\"pl-3 pt-3 pb-3 pr-3\">\r\n          <h3 className=\"\">Projets des groupes de {projectGroupData?._id}</h3>\r\n          {/* Deal with potential project document to print*/}\r\n          {projectDocument && (\r\n            <LinkFile name={projectDocument}>\r\n              Consignes & template du projet\r\n            </LinkFile>\r\n          )}\r\n          <div className=\"index\">\r\n            <input\r\n              type=\"text\"\r\n              aria-label=\"Search\"\r\n              placeholder=\"Filtrez les contenus...\"\r\n              onChange={handleInputChange}\r\n              className=\"index__search\"\r\n            />\r\n            {filteredContents && filteredContents.length > 0 ? (\r\n              <ProjectsView\r\n                projects={filteredContents}\r\n                setFilteredContents={setFilteredContents}\r\n              ></ProjectsView>\r\n            ) : (\r\n              <ProjectsView\r\n                projects={projectData}\r\n                setFilteredContents={setFilteredContents}\r\n              ></ProjectsView>\r\n            )}\r\n          </div>\r\n\r\n          {/* // deal with add a project button */}\r\n          {userData === undefined || !userData.isAdmin ? (\r\n            ''\r\n          ) : (\r\n            <button className=\"index__button\" onClick={onProjectAdd}>\r\n              Ajouter projet\r\n            </button>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default ProjectManagement;\r\n","import React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport { useStaticQuery } from 'gatsby';\r\n\r\nimport MainLayout from '../components/main-layout';\r\n\r\nimport { withAuthentication } from '../components/hoc/hoc';\r\nimport { ProjectDataProvider } from '../components/context/projects/project-data-context';\r\n\r\nimport ProjectManagement from '../components/projects/project-management';\r\n\r\nconst ProjectPage = () => {\r\n  const data = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            defaultAssociatedProjectGroupName,\r\n            projectDocument\r\n          }\r\n        }\r\n      }\r\n    `\r\n  );\r\n\r\n  const {\r\n    defaultAssociatedProjectGroupName: associatedProjectGroupName,\r\n    projectDocument,\r\n  } = data?.site.siteMetadata;\r\n\r\n  console.log(\"document:\", projectDocument);\r\n\r\n  return (\r\n    <ProjectDataProvider>\r\n      <MainLayout>\r\n        <ProjectManagement\r\n          {...{ associatedProjectGroupName, projectDocument }}\r\n        />\r\n      </MainLayout>\r\n    </ProjectDataProvider>\r\n  );\r\n};\r\n\r\nconst ProjectPageProtected = withAuthentication(ProjectPage);\r\nexport default ProjectPageProtected;\r\n","// Helper function to call our API\r\n// using authorization bearer token scheme\r\nexport default async function callAPI(endpoint, method = \"get\", token, data) {\r\n  let headers = new Headers();\r\n  let options = {};\r\n  options.method = method;\r\n\r\n  console.log(\"token :\", token);\r\n\r\n  if (token) {\r\n    const bearer = `Bearer ${token}`;\r\n    headers.append(\"Authorization\", bearer);\r\n  }\r\n\r\n  if (data) {\r\n    options.body = JSON.stringify(data);\r\n  }\r\n\r\n  if (\r\n    method.toLowerCase() === \"post\" ||\r\n    method.toLowerCase() === \"patch\" ||\r\n    method.toLowerCase() === \"put\"\r\n  )\r\n    headers.append(\"Content-Type\", \"application/json\");\r\n  options.headers = headers;  \r\n  const url = process.env.GATSBY_API_URL + endpoint;\r\n  console.log(\r\n    \"request made to API at: \" + new Date().toString(),\r\n    \"URL:\",\r\n    url,\r\n    \"Options:\",\r\n    options\r\n  );\r\n  try {\r\n    const response = await fetch(url, options);\r\n\r\n    if (!response.ok) {\r\n      let fullErrorMessage =\r\n        \" Error code : \" +\r\n        response.status +\r\n        \" : \" +\r\n        response.statusText +\r\n        \"/nMessage : \";\r\n      const textResponse = await response.text();\r\n      fullErrorMessage += textResponse;\r\n      console.error(\"fetch() error\", fullErrorMessage);\r\n      // deal with token expiration\r\n      if (fullErrorMessage.search(\"expired\") > -1) {\r\n        console.log(\"token expired\");\r\n      }\r\n      throw new Error(fullErrorMessage);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.log(\"error:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n","import { InteractionRequiredAuthError } from \"@azure/msal-browser\";\r\n\r\nasync function getAsyncIdToken(accounts, instance) {\r\n  if (accounts.length > 0) {\r\n    const request = {\r\n      scopes: [\"openid\"],\r\n      account: accounts[0],\r\n    };\r\n\r\n    try {\r\n      const response = await instance.acquireTokenSilent(request);\r\n      return response.idToken;\r\n    } catch (error) {\r\n      // acquireTokenSilent can fail for a number of reasons, fallback to interaction\r\n      if (error instanceof InteractionRequiredAuthError) {\r\n        const response2 = await instance.acquireTokenRedirect(request);\r\n        return response2.idToken;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport { getAsyncIdToken };\r\n","const getNamesFromEmail = (email) => {\r\n  let names = email.substring(0, email.indexOf(\"@\"));\r\n  let firstname = names.substring(0, names.indexOf(\".\"));\r\n  let lastname = names.substring(names.indexOf(\".\") + 1);\r\n  firstname = firstname.charAt(0).toUpperCase() + firstname.slice(1);\r\n  lastname = lastname.charAt(0).toUpperCase() + lastname.slice(1);\r\n  // deal with cases where Extra info is added to the name, when there is a second dot\r\n  if (lastname.indexOf(\".\") >= 0) {\r\n    lastname = lastname.substring(lastname.indexOf(\".\") + 1);\r\n    lastname = lastname.charAt(0).toUpperCase() + lastname.slice(1);\r\n  }\r\n  return firstname + \" \" + lastname;\r\n};\r\n\r\nexport { getNamesFromEmail };\r\n"],"names":["_ref","className","isBeingEdited","onChange","startContent","id","isInline","children","currentContent","allClasses","he","React","contentEditable","onInput","e","propUpdated","currentTarget","textContent","suppressContentEditableWarning","ProjectDataContext","ProjectDataProvider","projectGroupData","setProjectGroupData","useState","undefined","userData","setUserData","projectData","setProjectData","isLoaded","setIsLoaded","Provider","value","useProjectData","instance","accounts","useMsal","useContext","updateProjectGroupData","async","idToken","getAsyncIdToken","tempProjectGroup","callAPI","associatedProjectGroupName","err","console","error","updateUserData","tempUser","updateProjectData","tempProject","projectGroupName","addOneProject","deleteOneProject","project","_id","addMemberToProject","deleteMemberFromProject","updateProject","data","name","other","useStaticQuery","toLowerCase","includes","Object","assign","href","requiredFile","allFile","edges","find","file","node","base","publicURL","style","color","Spinner","FontAwesomeIcon","icon","faSpinner","setFilteredContents","setIsBeingEdited","isPublic","setIsPublic","projectUpdateState","setProjectUpdateState","handleChange","propChanged","previousState","key","shortId","ContentEditable","isAdmin","faTrashAlt","onClick","projectMembers","userName","status","faEdit","onProjectUpdateRequest","length","maximumProjectMembers","faUserPlus","faUserTimes","faSave","updatedProject","faTimes","onQuitProjectUpdateRequest","description","presentationUrl","YoutubeImage","src","frontendProductionUrl","target","frontendRepo","backendRepo","map","member","getNamesFromEmail","join","type","checked","disabled","projects","ProjectCard","projectDocument","filteredContents","query","setQuery","useEffect","getData","group","LinkFile","placeholder","inputText","filteredData","filter","content","parseInt","ProjectsView","withAuthentication","ProjectPage","defaultAssociatedProjectGroupName","site","siteMetadata","MainLayout","ProjectManagement","endpoint","method","token","headers","Headers","options","bearer","append","body","JSON","stringify","url","process","response","fetch","ok","fullErrorMessage","statusText","text","search","Error","json","request","scopes","account","acquireTokenSilent","InteractionRequiredAuthError","acquireTokenRedirect","email","names","substring","indexOf","firstname","lastname","charAt","toUpperCase","slice"],"sourceRoot":""}